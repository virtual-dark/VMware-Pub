#
# Copyright 2006 VMware, Inc.  All rights reserved.
#

use 5.006001;
use strict;
use warnings;

use XML::LibXML;
use LWP::UserAgent;
use HTTP::Request;
use HTTP::Headers;
use HTTP::Response;
use HTTP::Cookies;
use Data::Dumper;



##################################################################################
package AboutInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['fullName', undef, undef, 1],
   ['vendor', undef, undef, 1],
   ['version', undef, undef, 1],
   ['build', undef, undef, 1],
   ['localeVersion', undef, undef, 0],
   ['localeBuild', undef, undef, 0],
   ['osType', undef, undef, 1],
   ['productLineId', undef, undef, 1],
   ['apiType', undef, undef, 1],
   ['apiVersion', undef, undef, 1],
   ['instanceUuid', undef, undef, 0],
   ['licenseProductName', undef, undef, 0],
   ['licenseProductVersion', undef, undef, 0],
);


VIMRuntime::make_get_set('AboutInfo', 'name', 'fullName', 'vendor', 'version', 'build', 'localeVersion', 'localeBuild', 'osType', 'productLineId', 'apiType', 'apiVersion', 'instanceUuid', 'licenseProductName', 'licenseProductVersion');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AuthorizationDescription;
our @ISA = qw(DynamicData);

our @property_list = (
   ['privilege', 'ElementDescription', 1, 1],
   ['privilegeGroup', 'ElementDescription', 1, 1],
);


VIMRuntime::make_get_set('AuthorizationDescription', 'privilege', 'privilegeGroup');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package Permission;
our @ISA = qw(DynamicData);

our @property_list = (
   ['entity', 'ManagedObjectReference', undef, 0],
   ['principal', undef, undef, 1],
   ['group', 'boolean', undef, 1],
   ['roleId', undef, undef, 1],
   ['propagate', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('Permission', 'entity', 'principal', 'group', 'roleId', 'propagate');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPermission;
our @ISA = qw(ComplexType);

our @property_list = (
   ['Permission', 'Permission', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPermission', 'Permission');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AuthorizationRole;
our @ISA = qw(DynamicData);

our @property_list = (
   ['roleId', undef, undef, 1],
   ['system', 'boolean', undef, 1],
   ['name', undef, undef, 1],
   ['info', 'Description', undef, 1],
   ['privilege', undef, 1, 0],
);


VIMRuntime::make_get_set('AuthorizationRole', 'roleId', 'system', 'name', 'info', 'privilege');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfAuthorizationRole;
our @ISA = qw(ComplexType);

our @property_list = (
   ['AuthorizationRole', 'AuthorizationRole', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfAuthorizationRole', 'AuthorizationRole');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AuthorizationPrivilege;
our @ISA = qw(DynamicData);

our @property_list = (
   ['privId', undef, undef, 1],
   ['onParent', 'boolean', undef, 1],
   ['name', undef, undef, 1],
   ['privGroupName', undef, undef, 1],
);


VIMRuntime::make_get_set('AuthorizationPrivilege', 'privId', 'onParent', 'name', 'privGroupName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfAuthorizationPrivilege;
our @ISA = qw(ComplexType);

our @property_list = (
   ['AuthorizationPrivilege', 'AuthorizationPrivilege', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfAuthorizationPrivilege', 'AuthorizationPrivilege');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PrivilegeAvailability;
our @ISA = qw(DynamicData);

our @property_list = (
   ['privId', undef, undef, 1],
   ['isGranted', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('PrivilegeAvailability', 'privId', 'isGranted');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPrivilegeAvailability;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PrivilegeAvailability', 'PrivilegeAvailability', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPrivilegeAvailability', 'PrivilegeAvailability');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EntityPrivilege;
our @ISA = qw(DynamicData);

our @property_list = (
   ['entity', 'ManagedObjectReference', undef, 1],
   ['privAvailability', 'PrivilegeAvailability', 1, 1],
);


VIMRuntime::make_get_set('EntityPrivilege', 'entity', 'privAvailability');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfEntityPrivilege;
our @ISA = qw(ComplexType);

our @property_list = (
   ['EntityPrivilege', 'EntityPrivilege', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfEntityPrivilege', 'EntityPrivilege');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UserPrivilegeResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['entity', 'ManagedObjectReference', undef, 1],
   ['privileges', undef, 1, 0],
);


VIMRuntime::make_get_set('UserPrivilegeResult', 'entity', 'privileges');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfUserPrivilegeResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['UserPrivilegeResult', 'UserPrivilegeResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfUserPrivilegeResult', 'UserPrivilegeResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package BatchResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['result', undef, undef, 1],
   ['hostKey', undef, undef, 1],
   ['ds', 'ManagedObjectReference', undef, 0],
   ['fault', 'LocalizedMethodFault', undef, 0],
);


VIMRuntime::make_get_set('BatchResult', 'result', 'hostKey', 'ds', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package BoolPolicy;
our @ISA = qw(InheritablePolicy);

our @property_list = (
   ['value', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('BoolPolicy', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package Capability;
our @ISA = qw(DynamicData);

our @property_list = (
   ['provisioningSupported', 'boolean', undef, 1],
   ['multiHostSupported', 'boolean', undef, 1],
   ['userShellAccessSupported', 'boolean', undef, 1],
   ['supportedEVCMode', 'EVCMode', 1, 0],
   ['networkBackupAndRestoreSupported', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('Capability', 'provisioningSupported', 'multiHostSupported', 'userShellAccessSupported', 'supportedEVCMode', 'networkBackupAndRestoreSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterComputeResourceSummary;
our @ISA = qw(ComputeResourceSummary);

our @property_list = (
   ['currentFailoverLevel', undef, undef, 1],
   ['admissionControlInfo', 'ClusterDasAdmissionControlInfo', undef, 0],
   ['numVmotions', undef, undef, 1],
   ['targetBalance', undef, undef, 0],
   ['currentBalance', undef, undef, 0],
   ['usageSummary', 'ClusterUsageSummary', undef, 0],
   ['currentEVCModeKey', undef, undef, 0],
   ['dasData', 'ClusterDasData', undef, 0],
);


VIMRuntime::make_get_set('ClusterComputeResourceSummary', 'currentFailoverLevel', 'admissionControlInfo', 'numVmotions', 'targetBalance', 'currentBalance', 'usageSummary', 'currentEVCModeKey', 'dasData');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ComputeResourceSummary;
our @ISA = qw(DynamicData);

our @property_list = (
   ['totalCpu', undef, undef, 1],
   ['totalMemory', undef, undef, 1],
   ['numCpuCores', undef, undef, 1],
   ['numCpuThreads', undef, undef, 1],
   ['effectiveCpu', undef, undef, 1],
   ['effectiveMemory', undef, undef, 1],
   ['numHosts', undef, undef, 1],
   ['numEffectiveHosts', undef, undef, 1],
   ['overallStatus', 'ManagedEntityStatus', undef, 1],
);


VIMRuntime::make_get_set('ComputeResourceSummary', 'totalCpu', 'totalMemory', 'numCpuCores', 'numCpuThreads', 'effectiveCpu', 'effectiveMemory', 'numHosts', 'numEffectiveHosts', 'overallStatus');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ComputeResourceConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vmSwapPlacement', undef, undef, 1],
   ['spbmEnabled', 'boolean', undef, 0],
   ['defaultHardwareVersionKey', undef, undef, 0],
);


VIMRuntime::make_get_set('ComputeResourceConfigInfo', 'vmSwapPlacement', 'spbmEnabled', 'defaultHardwareVersionKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ComputeResourceHostSPBMLicenseInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
   ['licenseState', 'ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState', undef, 1],
);


VIMRuntime::make_get_set('ComputeResourceHostSPBMLicenseInfo', 'host', 'licenseState');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfComputeResourceHostSPBMLicenseInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ComputeResourceHostSPBMLicenseInfo', 'ComputeResourceHostSPBMLicenseInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfComputeResourceHostSPBMLicenseInfo', 'ComputeResourceHostSPBMLicenseInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ComputeResourceConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vmSwapPlacement', undef, undef, 0],
   ['spbmEnabled', 'boolean', undef, 0],
   ['defaultHardwareVersionKey', undef, undef, 0],
);


VIMRuntime::make_get_set('ComputeResourceConfigSpec', 'vmSwapPlacement', 'spbmEnabled', 'defaultHardwareVersionKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomFieldDef;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['name', undef, undef, 1],
   ['type', undef, undef, 1],
   ['managedObjectType', undef, undef, 0],
   ['fieldDefPrivileges', 'PrivilegePolicyDef', undef, 0],
   ['fieldInstancePrivileges', 'PrivilegePolicyDef', undef, 0],
);


VIMRuntime::make_get_set('CustomFieldDef', 'key', 'name', 'type', 'managedObjectType', 'fieldDefPrivileges', 'fieldInstancePrivileges');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfCustomFieldDef;
our @ISA = qw(ComplexType);

our @property_list = (
   ['CustomFieldDef', 'CustomFieldDef', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfCustomFieldDef', 'CustomFieldDef');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomFieldValue;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
);


VIMRuntime::make_get_set('CustomFieldValue', 'key');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfCustomFieldValue;
our @ISA = qw(ComplexType);

our @property_list = (
   ['CustomFieldValue', 'CustomFieldValue', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfCustomFieldValue', 'CustomFieldValue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomFieldStringValue;
our @ISA = qw(CustomFieldValue);

our @property_list = (
   ['value', undef, undef, 1],
);


VIMRuntime::make_get_set('CustomFieldStringValue', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationSpecInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['description', undef, undef, 1],
   ['type', undef, undef, 1],
   ['changeVersion', undef, undef, 0],
   ['lastUpdateTime', undef, undef, 0],
);


VIMRuntime::make_get_set('CustomizationSpecInfo', 'name', 'description', 'type', 'changeVersion', 'lastUpdateTime');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfCustomizationSpecInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['CustomizationSpecInfo', 'CustomizationSpecInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfCustomizationSpecInfo', 'CustomizationSpecInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationSpecItem;
our @ISA = qw(DynamicData);

our @property_list = (
   ['info', 'CustomizationSpecInfo', undef, 1],
   ['spec', 'CustomizationSpec', undef, 1],
);


VIMRuntime::make_get_set('CustomizationSpecItem', 'info', 'spec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatacenterConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['defaultHardwareVersionKey', undef, undef, 0],
);


VIMRuntime::make_get_set('DatacenterConfigInfo', 'defaultHardwareVersionKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatacenterConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['defaultHardwareVersionKey', undef, undef, 0],
);


VIMRuntime::make_get_set('DatacenterConfigSpec', 'defaultHardwareVersionKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatastoreSummary;
our @ISA = qw(DynamicData);

our @property_list = (
   ['datastore', 'ManagedObjectReference', undef, 0],
   ['name', undef, undef, 1],
   ['url', undef, undef, 1],
   ['capacity', undef, undef, 1],
   ['freeSpace', undef, undef, 1],
   ['uncommitted', undef, undef, 0],
   ['accessible', 'boolean', undef, 1],
   ['multipleHostAccess', 'boolean', undef, 0],
   ['type', undef, undef, 1],
   ['maintenanceMode', undef, undef, 0],
);


VIMRuntime::make_get_set('DatastoreSummary', 'datastore', 'name', 'url', 'capacity', 'freeSpace', 'uncommitted', 'accessible', 'multipleHostAccess', 'type', 'maintenanceMode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatastoreInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['url', undef, undef, 1],
   ['freeSpace', undef, undef, 1],
   ['maxFileSize', undef, undef, 1],
   ['maxVirtualDiskCapacity', undef, undef, 0],
   ['maxMemoryFileSize', undef, undef, 0],
   ['timestamp', undef, undef, 0],
   ['containerId', undef, undef, 0],
);


VIMRuntime::make_get_set('DatastoreInfo', 'name', 'url', 'freeSpace', 'maxFileSize', 'maxVirtualDiskCapacity', 'maxMemoryFileSize', 'timestamp', 'containerId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatastoreCapability;
our @ISA = qw(DynamicData);

our @property_list = (
   ['directoryHierarchySupported', 'boolean', undef, 1],
   ['rawDiskMappingsSupported', 'boolean', undef, 1],
   ['perFileThinProvisioningSupported', 'boolean', undef, 1],
   ['storageIORMSupported', 'boolean', undef, 0],
   ['nativeSnapshotSupported', 'boolean', undef, 0],
   ['topLevelDirectoryCreateSupported', 'boolean', undef, 0],
   ['seSparseSupported', 'boolean', undef, 0],
   ['vmfsSparseSupported', 'boolean', undef, 0],
   ['vsanSparseSupported', 'boolean', undef, 0],
   ['upitSupported', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('DatastoreCapability', 'directoryHierarchySupported', 'rawDiskMappingsSupported', 'perFileThinProvisioningSupported', 'storageIORMSupported', 'nativeSnapshotSupported', 'topLevelDirectoryCreateSupported', 'seSparseSupported', 'vmfsSparseSupported', 'vsanSparseSupported', 'upitSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatastoreHostMount;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', 'ManagedObjectReference', undef, 1],
   ['mountInfo', 'HostMountInfo', undef, 1],
);


VIMRuntime::make_get_set('DatastoreHostMount', 'key', 'mountInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDatastoreHostMount;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DatastoreHostMount', 'DatastoreHostMount', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDatastoreHostMount', 'DatastoreHostMount');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatastoreMountPathDatastorePair;
our @ISA = qw(DynamicData);

our @property_list = (
   ['oldMountPath', undef, undef, 1],
   ['datastore', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('DatastoreMountPathDatastorePair', 'oldMountPath', 'datastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDatastoreMountPathDatastorePair;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DatastoreMountPathDatastorePair', 'DatastoreMountPathDatastorePair', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDatastoreMountPathDatastorePair', 'DatastoreMountPathDatastorePair');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatastoreVVolContainerFailoverPair;
our @ISA = qw(DynamicData);

our @property_list = (
   ['srcContainer', undef, undef, 0],
   ['tgtContainer', undef, undef, 1],
   ['vvolMapping', 'KeyValue', 1, 0],
);


VIMRuntime::make_get_set('DatastoreVVolContainerFailoverPair', 'srcContainer', 'tgtContainer', 'vvolMapping');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDatastoreVVolContainerFailoverPair;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DatastoreVVolContainerFailoverPair', 'DatastoreVVolContainerFailoverPair', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDatastoreVVolContainerFailoverPair', 'DatastoreVVolContainerFailoverPair');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package Description;
our @ISA = qw(DynamicData);

our @property_list = (
   ['label', undef, undef, 1],
   ['summary', undef, undef, 1],
);


VIMRuntime::make_get_set('Description', 'label', 'summary');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DiagnosticManagerLogDescriptor;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['fileName', undef, undef, 1],
   ['creator', undef, undef, 1],
   ['format', undef, undef, 1],
   ['mimeType', undef, undef, 1],
   ['info', 'Description', undef, 1],
);


VIMRuntime::make_get_set('DiagnosticManagerLogDescriptor', 'key', 'fileName', 'creator', 'format', 'mimeType', 'info');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDiagnosticManagerLogDescriptor;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DiagnosticManagerLogDescriptor', 'DiagnosticManagerLogDescriptor', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDiagnosticManagerLogDescriptor', 'DiagnosticManagerLogDescriptor');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DiagnosticManagerLogHeader;
our @ISA = qw(DynamicData);

our @property_list = (
   ['lineStart', undef, undef, 1],
   ['lineEnd', undef, undef, 1],
   ['lineText', undef, 1, 0],
);


VIMRuntime::make_get_set('DiagnosticManagerLogHeader', 'lineStart', 'lineEnd', 'lineText');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DiagnosticManagerBundleInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['system', 'ManagedObjectReference', undef, 0],
   ['url', undef, undef, 1],
);


VIMRuntime::make_get_set('DiagnosticManagerBundleInfo', 'system', 'url');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDiagnosticManagerBundleInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DiagnosticManagerBundleInfo', 'DiagnosticManagerBundleInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDiagnosticManagerBundleInfo', 'DiagnosticManagerBundleInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSContactInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 0],
   ['contact', undef, undef, 0],
);


VIMRuntime::make_get_set('DVSContactInfo', 'name', 'contact');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSNetworkResourceManagementCapability;
our @ISA = qw(DynamicData);

our @property_list = (
   ['networkResourceManagementSupported', 'boolean', undef, 1],
   ['networkResourcePoolHighShareValue', undef, undef, 1],
   ['qosSupported', 'boolean', undef, 1],
   ['userDefinedNetworkResourcePoolsSupported', 'boolean', undef, 1],
   ['networkResourceControlVersion3Supported', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('DVSNetworkResourceManagementCapability', 'networkResourceManagementSupported', 'networkResourcePoolHighShareValue', 'qosSupported', 'userDefinedNetworkResourcePoolsSupported', 'networkResourceControlVersion3Supported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSRollbackCapability;
our @ISA = qw(DynamicData);

our @property_list = (
   ['rollbackSupported', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('DVSRollbackCapability', 'rollbackSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSBackupRestoreCapability;
our @ISA = qw(DynamicData);

our @property_list = (
   ['backupRestoreSupported', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('DVSBackupRestoreCapability', 'backupRestoreSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSFeatureCapability;
our @ISA = qw(DynamicData);

our @property_list = (
   ['networkResourceManagementSupported', 'boolean', undef, 1],
   ['vmDirectPathGen2Supported', 'boolean', undef, 1],
   ['nicTeamingPolicy', undef, 1, 0],
   ['networkResourcePoolHighShareValue', undef, undef, 0],
   ['networkResourceManagementCapability', 'DVSNetworkResourceManagementCapability', undef, 0],
   ['healthCheckCapability', 'DVSHealthCheckCapability', undef, 0],
   ['rollbackCapability', 'DVSRollbackCapability', undef, 0],
   ['backupRestoreCapability', 'DVSBackupRestoreCapability', undef, 0],
   ['networkFilterSupported', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('DVSFeatureCapability', 'networkResourceManagementSupported', 'vmDirectPathGen2Supported', 'nicTeamingPolicy', 'networkResourcePoolHighShareValue', 'networkResourceManagementCapability', 'healthCheckCapability', 'rollbackCapability', 'backupRestoreCapability', 'networkFilterSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSHealthCheckCapability;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('DVSHealthCheckCapability');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSCapability;
our @ISA = qw(DynamicData);

our @property_list = (
   ['dvsOperationSupported', 'boolean', undef, 0],
   ['dvPortGroupOperationSupported', 'boolean', undef, 0],
   ['dvPortOperationSupported', 'boolean', undef, 0],
   ['compatibleHostComponentProductInfo', 'DistributedVirtualSwitchHostProductSpec', 1, 0],
   ['featuresSupported', 'DVSFeatureCapability', undef, 0],
);


VIMRuntime::make_get_set('DVSCapability', 'dvsOperationSupported', 'dvPortGroupOperationSupported', 'dvPortOperationSupported', 'compatibleHostComponentProductInfo', 'featuresSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSSummary;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['uuid', undef, undef, 1],
   ['numPorts', undef, undef, 1],
   ['productInfo', 'DistributedVirtualSwitchProductSpec', undef, 0],
   ['hostMember', 'ManagedObjectReference', 1, 0],
   ['vm', 'ManagedObjectReference', 1, 0],
   ['host', 'ManagedObjectReference', 1, 0],
   ['portgroupName', undef, 1, 0],
   ['description', undef, undef, 0],
   ['contact', 'DVSContactInfo', undef, 0],
   ['numHosts', undef, undef, 0],
);


VIMRuntime::make_get_set('DVSSummary', 'name', 'uuid', 'numPorts', 'productInfo', 'hostMember', 'vm', 'host', 'portgroupName', 'description', 'contact', 'numHosts');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSPolicy;
our @ISA = qw(DynamicData);

our @property_list = (
   ['autoPreInstallAllowed', 'boolean', undef, 0],
   ['autoUpgradeAllowed', 'boolean', undef, 0],
   ['partialUpgradeAllowed', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('DVSPolicy', 'autoPreInstallAllowed', 'autoUpgradeAllowed', 'partialUpgradeAllowed');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSUplinkPortPolicy;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('DVSUplinkPortPolicy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSNameArrayUplinkPortPolicy;
our @ISA = qw(DVSUplinkPortPolicy);

our @property_list = (
   ['uplinkPortName', undef, 1, 1],
);


VIMRuntime::make_get_set('DVSNameArrayUplinkPortPolicy', 'uplinkPortName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['configVersion', undef, undef, 0],
   ['name', undef, undef, 0],
   ['numStandalonePorts', undef, undef, 0],
   ['maxPorts', undef, undef, 0],
   ['uplinkPortPolicy', 'DVSUplinkPortPolicy', undef, 0],
   ['uplinkPortgroup', 'ManagedObjectReference', 1, 0],
   ['defaultPortConfig', 'DVPortSetting', undef, 0],
   ['host', 'DistributedVirtualSwitchHostMemberConfigSpec', 1, 0],
   ['extensionKey', undef, undef, 0],
   ['description', undef, undef, 0],
   ['policy', 'DVSPolicy', undef, 0],
   ['vendorSpecificConfig', 'DistributedVirtualSwitchKeyedOpaqueBlob', 1, 0],
   ['contact', 'DVSContactInfo', undef, 0],
   ['switchIpAddress', undef, undef, 0],
   ['defaultProxySwitchMaxNumPorts', undef, undef, 0],
   ['infrastructureTrafficResourceConfig', 'DvsHostInfrastructureTrafficResource', 1, 0],
   ['networkResourceControlVersion', undef, undef, 0],
);


VIMRuntime::make_get_set('DVSConfigSpec', 'configVersion', 'name', 'numStandalonePorts', 'maxPorts', 'uplinkPortPolicy', 'uplinkPortgroup', 'defaultPortConfig', 'host', 'extensionKey', 'description', 'policy', 'vendorSpecificConfig', 'contact', 'switchIpAddress', 'defaultProxySwitchMaxNumPorts', 'infrastructureTrafficResourceConfig', 'networkResourceControlVersion');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSCreateSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['configSpec', 'DVSConfigSpec', undef, 1],
   ['productInfo', 'DistributedVirtualSwitchProductSpec', undef, 0],
   ['capability', 'DVSCapability', undef, 0],
);


VIMRuntime::make_get_set('DVSCreateSpec', 'configSpec', 'productInfo', 'capability');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['uuid', undef, undef, 1],
   ['name', undef, undef, 1],
   ['numStandalonePorts', undef, undef, 1],
   ['numPorts', undef, undef, 1],
   ['maxPorts', undef, undef, 1],
   ['uplinkPortPolicy', 'DVSUplinkPortPolicy', undef, 1],
   ['uplinkPortgroup', 'ManagedObjectReference', 1, 0],
   ['defaultPortConfig', 'DVPortSetting', undef, 1],
   ['host', 'DistributedVirtualSwitchHostMember', 1, 0],
   ['productInfo', 'DistributedVirtualSwitchProductSpec', undef, 1],
   ['targetInfo', 'DistributedVirtualSwitchProductSpec', undef, 0],
   ['extensionKey', undef, undef, 0],
   ['vendorSpecificConfig', 'DistributedVirtualSwitchKeyedOpaqueBlob', 1, 0],
   ['policy', 'DVSPolicy', undef, 0],
   ['description', undef, undef, 0],
   ['configVersion', undef, undef, 1],
   ['contact', 'DVSContactInfo', undef, 1],
   ['switchIpAddress', undef, undef, 0],
   ['createTime', undef, undef, 1],
   ['networkResourceManagementEnabled', 'boolean', undef, 0],
   ['defaultProxySwitchMaxNumPorts', undef, undef, 0],
   ['healthCheckConfig', 'DVSHealthCheckConfig', 1, 0],
   ['infrastructureTrafficResourceConfig', 'DvsHostInfrastructureTrafficResource', 1, 0],
   ['networkResourceControlVersion', undef, undef, 0],
   ['vmVnicNetworkResourcePool', 'DVSVmVnicNetworkResourcePool', 1, 0],
   ['pnicCapacityRatioForReservation', undef, undef, 0],
);


VIMRuntime::make_get_set('DVSConfigInfo', 'uuid', 'name', 'numStandalonePorts', 'numPorts', 'maxPorts', 'uplinkPortPolicy', 'uplinkPortgroup', 'defaultPortConfig', 'host', 'productInfo', 'targetInfo', 'extensionKey', 'vendorSpecificConfig', 'policy', 'description', 'configVersion', 'contact', 'switchIpAddress', 'createTime', 'networkResourceManagementEnabled', 'defaultProxySwitchMaxNumPorts', 'healthCheckConfig', 'infrastructureTrafficResourceConfig', 'networkResourceControlVersion', 'vmVnicNetworkResourcePool', 'pnicCapacityRatioForReservation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsHostInfrastructureTrafficResourceAllocation;
our @ISA = qw(DynamicData);

our @property_list = (
   ['limit', undef, undef, 0],
   ['shares', 'SharesInfo', undef, 0],
   ['reservation', undef, undef, 0],
);


VIMRuntime::make_get_set('DvsHostInfrastructureTrafficResourceAllocation', 'limit', 'shares', 'reservation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsHostInfrastructureTrafficResource;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['description', undef, undef, 0],
   ['allocationInfo', 'DvsHostInfrastructureTrafficResourceAllocation', undef, 1],
);


VIMRuntime::make_get_set('DvsHostInfrastructureTrafficResource', 'key', 'description', 'allocationInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDvsHostInfrastructureTrafficResource;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DvsHostInfrastructureTrafficResource', 'DvsHostInfrastructureTrafficResource', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDvsHostInfrastructureTrafficResource', 'DvsHostInfrastructureTrafficResource');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSHealthCheckConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['enable', 'boolean', undef, 0],
   ['interval', undef, undef, 0],
);


VIMRuntime::make_get_set('DVSHealthCheckConfig', 'enable', 'interval');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDVSHealthCheckConfig;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DVSHealthCheckConfig', 'DVSHealthCheckConfig', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDVSHealthCheckConfig', 'DVSHealthCheckConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsResourceRuntimeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['capacity', undef, undef, 0],
   ['usage', undef, undef, 0],
   ['available', undef, undef, 0],
   ['allocatedResource', 'DvsVnicAllocatedResource', 1, 0],
   ['vmVnicNetworkResourcePoolRuntime', 'DvsVmVnicNetworkResourcePoolRuntimeInfo', 1, 0],
);


VIMRuntime::make_get_set('DvsResourceRuntimeInfo', 'capacity', 'usage', 'available', 'allocatedResource', 'vmVnicNetworkResourcePoolRuntime');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSRuntimeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['hostMemberRuntime', 'HostMemberRuntimeInfo', 1, 0],
   ['resourceRuntimeInfo', 'DvsResourceRuntimeInfo', undef, 0],
);


VIMRuntime::make_get_set('DVSRuntimeInfo', 'hostMemberRuntime', 'resourceRuntimeInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EVCMode;
our @ISA = qw(ElementDescription);

our @property_list = (
   ['guaranteedCPUFeatures', 'HostCpuIdInfo', 1, 0],
   ['featureCapability', 'HostFeatureCapability', 1, 0],
   ['featureMask', 'HostFeatureMask', 1, 0],
   ['featureRequirement', 'VirtualMachineFeatureRequirement', 1, 0],
   ['vendor', undef, undef, 1],
   ['track', undef, 1, 0],
   ['vendorTier', undef, undef, 1],
);


VIMRuntime::make_get_set('EVCMode', 'guaranteedCPUFeatures', 'featureCapability', 'featureMask', 'featureRequirement', 'vendor', 'track', 'vendorTier');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfEVCMode;
our @ISA = qw(ComplexType);

our @property_list = (
   ['EVCMode', 'EVCMode', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfEVCMode', 'EVCMode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ElementDescription;
our @ISA = qw(Description);

our @property_list = (
   ['key', undef, undef, 1],
);


VIMRuntime::make_get_set('ElementDescription', 'key');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfElementDescription;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ElementDescription', 'ElementDescription', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfElementDescription', 'ElementDescription');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EnumDescription;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['tags', 'ElementDescription', 1, 1],
);


VIMRuntime::make_get_set('EnumDescription', 'key', 'tags');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfEnumDescription;
our @ISA = qw(ComplexType);

our @property_list = (
   ['EnumDescription', 'EnumDescription', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfEnumDescription', 'EnumDescription');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EnvironmentBrowserConfigOptionQuerySpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 0],
   ['host', 'ManagedObjectReference', undef, 0],
   ['guestId', undef, 1, 0],
);


VIMRuntime::make_get_set('EnvironmentBrowserConfigOptionQuerySpec', 'key', 'host', 'guestId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExtendedDescription;
our @ISA = qw(Description);

our @property_list = (
   ['messageCatalogKeyPrefix', undef, undef, 1],
   ['messageArg', 'KeyAnyValue', 1, 0],
);


VIMRuntime::make_get_set('ExtendedDescription', 'messageCatalogKeyPrefix', 'messageArg');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExtendedElementDescription;
our @ISA = qw(ElementDescription);

our @property_list = (
   ['messageCatalogKeyPrefix', undef, undef, 1],
   ['messageArg', 'KeyAnyValue', 1, 0],
);


VIMRuntime::make_get_set('ExtendedElementDescription', 'messageCatalogKeyPrefix', 'messageArg');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExtensionServerInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['url', undef, undef, 1],
   ['description', 'Description', undef, 1],
   ['company', undef, undef, 1],
   ['type', undef, undef, 1],
   ['adminEmail', undef, 1, 1],
   ['serverThumbprint', undef, undef, 0],
);


VIMRuntime::make_get_set('ExtensionServerInfo', 'url', 'description', 'company', 'type', 'adminEmail', 'serverThumbprint');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfExtensionServerInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ExtensionServerInfo', 'ExtensionServerInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfExtensionServerInfo', 'ExtensionServerInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExtensionClientInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['version', undef, undef, 1],
   ['description', 'Description', undef, 1],
   ['company', undef, undef, 1],
   ['type', undef, undef, 1],
   ['url', undef, undef, 1],
);


VIMRuntime::make_get_set('ExtensionClientInfo', 'version', 'description', 'company', 'type', 'url');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfExtensionClientInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ExtensionClientInfo', 'ExtensionClientInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfExtensionClientInfo', 'ExtensionClientInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExtensionTaskTypeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['taskID', undef, undef, 1],
);


VIMRuntime::make_get_set('ExtensionTaskTypeInfo', 'taskID');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfExtensionTaskTypeInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ExtensionTaskTypeInfo', 'ExtensionTaskTypeInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfExtensionTaskTypeInfo', 'ExtensionTaskTypeInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExtensionEventTypeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['eventID', undef, undef, 1],
   ['eventTypeSchema', undef, undef, 0],
);


VIMRuntime::make_get_set('ExtensionEventTypeInfo', 'eventID', 'eventTypeSchema');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfExtensionEventTypeInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ExtensionEventTypeInfo', 'ExtensionEventTypeInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfExtensionEventTypeInfo', 'ExtensionEventTypeInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExtensionFaultTypeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['faultID', undef, undef, 1],
);


VIMRuntime::make_get_set('ExtensionFaultTypeInfo', 'faultID');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfExtensionFaultTypeInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ExtensionFaultTypeInfo', 'ExtensionFaultTypeInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfExtensionFaultTypeInfo', 'ExtensionFaultTypeInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExtensionPrivilegeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['privID', undef, undef, 1],
   ['privGroupName', undef, undef, 1],
);


VIMRuntime::make_get_set('ExtensionPrivilegeInfo', 'privID', 'privGroupName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfExtensionPrivilegeInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ExtensionPrivilegeInfo', 'ExtensionPrivilegeInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfExtensionPrivilegeInfo', 'ExtensionPrivilegeInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExtensionResourceInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['locale', undef, undef, 1],
   ['module', undef, undef, 1],
   ['data', 'KeyValue', 1, 1],
);


VIMRuntime::make_get_set('ExtensionResourceInfo', 'locale', 'module', 'data');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfExtensionResourceInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ExtensionResourceInfo', 'ExtensionResourceInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfExtensionResourceInfo', 'ExtensionResourceInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExtensionHealthInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['url', undef, undef, 1],
);


VIMRuntime::make_get_set('ExtensionHealthInfo', 'url');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExtensionOvfConsumerInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['callbackUrl', undef, undef, 1],
   ['sectionType', undef, 1, 1],
);


VIMRuntime::make_get_set('ExtensionOvfConsumerInfo', 'callbackUrl', 'sectionType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package Extension;
our @ISA = qw(DynamicData);

our @property_list = (
   ['description', 'Description', undef, 1],
   ['key', undef, undef, 1],
   ['company', undef, undef, 0],
   ['type', undef, undef, 0],
   ['version', undef, undef, 1],
   ['subjectName', undef, undef, 0],
   ['server', 'ExtensionServerInfo', 1, 0],
   ['client', 'ExtensionClientInfo', 1, 0],
   ['taskList', 'ExtensionTaskTypeInfo', 1, 0],
   ['eventList', 'ExtensionEventTypeInfo', 1, 0],
   ['faultList', 'ExtensionFaultTypeInfo', 1, 0],
   ['privilegeList', 'ExtensionPrivilegeInfo', 1, 0],
   ['resourceList', 'ExtensionResourceInfo', 1, 0],
   ['lastHeartbeatTime', undef, undef, 1],
   ['healthInfo', 'ExtensionHealthInfo', undef, 0],
   ['ovfConsumerInfo', 'ExtensionOvfConsumerInfo', undef, 0],
   ['extendedProductInfo', 'ExtExtendedProductInfo', undef, 0],
   ['managedEntityInfo', 'ExtManagedEntityInfo', 1, 0],
   ['shownInSolutionManager', 'boolean', undef, 0],
   ['solutionManagerInfo', 'ExtSolutionManagerInfo', undef, 0],
);


VIMRuntime::make_get_set('Extension', 'description', 'key', 'company', 'type', 'version', 'subjectName', 'server', 'client', 'taskList', 'eventList', 'faultList', 'privilegeList', 'resourceList', 'lastHeartbeatTime', 'healthInfo', 'ovfConsumerInfo', 'extendedProductInfo', 'managedEntityInfo', 'shownInSolutionManager', 'solutionManagerInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfExtension;
our @ISA = qw(ComplexType);

our @property_list = (
   ['Extension', 'Extension', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfExtension', 'Extension');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExtensionManagerIpAllocationUsage;
our @ISA = qw(DynamicData);

our @property_list = (
   ['extensionKey', undef, undef, 1],
   ['numAddresses', undef, undef, 1],
);


VIMRuntime::make_get_set('ExtensionManagerIpAllocationUsage', 'extensionKey', 'numAddresses');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfExtensionManagerIpAllocationUsage;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ExtensionManagerIpAllocationUsage', 'ExtensionManagerIpAllocationUsage', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfExtensionManagerIpAllocationUsage', 'ExtensionManagerIpAllocationUsage');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ReplicationVmProgressInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['progress', undef, undef, 1],
   ['bytesTransferred', undef, undef, 1],
   ['bytesToTransfer', undef, undef, 1],
   ['checksumTotalBytes', undef, undef, 0],
   ['checksumComparedBytes', undef, undef, 0],
);


VIMRuntime::make_get_set('ReplicationVmProgressInfo', 'progress', 'bytesTransferred', 'bytesToTransfer', 'checksumTotalBytes', 'checksumComparedBytes');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HbrManagerReplicationVmInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['state', undef, undef, 1],
   ['progressInfo', 'ReplicationVmProgressInfo', undef, 0],
   ['imageId', undef, undef, 0],
   ['lastError', 'LocalizedMethodFault', undef, 0],
);


VIMRuntime::make_get_set('HbrManagerReplicationVmInfo', 'state', 'progressInfo', 'imageId', 'lastError');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HbrManagerVmReplicationCapability;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 1],
   ['supportedQuiesceMode', undef, undef, 1],
   ['compressionSupported', 'boolean', undef, 1],
   ['maxSupportedSourceDiskCapacity', undef, undef, 1],
   ['minRpo', undef, undef, 0],
   ['fault', 'LocalizedMethodFault', undef, 0],
);


VIMRuntime::make_get_set('HbrManagerVmReplicationCapability', 'vm', 'supportedQuiesceMode', 'compressionSupported', 'maxSupportedSourceDiskCapacity', 'minRpo', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHbrManagerVmReplicationCapability;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HbrManagerVmReplicationCapability', 'HbrManagerVmReplicationCapability', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHbrManagerVmReplicationCapability', 'HbrManagerVmReplicationCapability');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HealthUpdateInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
   ['componentType', undef, undef, 1],
   ['description', undef, undef, 1],
);


VIMRuntime::make_get_set('HealthUpdateInfo', 'id', 'componentType', 'description');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHealthUpdateInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HealthUpdateInfo', 'HealthUpdateInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHealthUpdateInfo', 'HealthUpdateInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HealthUpdate;
our @ISA = qw(DynamicData);

our @property_list = (
   ['entity', 'ManagedObjectReference', undef, 1],
   ['healthUpdateInfoId', undef, undef, 1],
   ['id', undef, undef, 1],
   ['status', 'ManagedEntityStatus', undef, 1],
   ['remediation', undef, undef, 1],
);


VIMRuntime::make_get_set('HealthUpdate', 'entity', 'healthUpdateInfoId', 'id', 'status', 'remediation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHealthUpdate;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HealthUpdate', 'HealthUpdate', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHealthUpdate', 'HealthUpdate');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostServiceTicket;
our @ISA = qw(DynamicData);

our @property_list = (
   ['host', undef, undef, 0],
   ['port', undef, undef, 0],
   ['sslThumbprint', undef, undef, 0],
   ['service', undef, undef, 1],
   ['serviceVersion', undef, undef, 1],
   ['sessionId', undef, undef, 1],
);


VIMRuntime::make_get_set('HostServiceTicket', 'host', 'port', 'sslThumbprint', 'service', 'serviceVersion', 'sessionId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSystemReconnectSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['syncState', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostSystemReconnectSpec', 'syncState');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HttpNfcLeaseDatastoreLeaseInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['datastoreKey', undef, undef, 1],
   ['hosts', 'HttpNfcLeaseHostInfo', 1, 1],
);


VIMRuntime::make_get_set('HttpNfcLeaseDatastoreLeaseInfo', 'datastoreKey', 'hosts');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHttpNfcLeaseDatastoreLeaseInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HttpNfcLeaseDatastoreLeaseInfo', 'HttpNfcLeaseDatastoreLeaseInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHttpNfcLeaseDatastoreLeaseInfo', 'HttpNfcLeaseDatastoreLeaseInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HttpNfcLeaseHostInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['url', undef, undef, 1],
   ['sslThumbprint', undef, undef, 1],
);


VIMRuntime::make_get_set('HttpNfcLeaseHostInfo', 'url', 'sslThumbprint');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHttpNfcLeaseHostInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HttpNfcLeaseHostInfo', 'HttpNfcLeaseHostInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHttpNfcLeaseHostInfo', 'HttpNfcLeaseHostInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HttpNfcLeaseInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['lease', 'ManagedObjectReference', undef, 1],
   ['entity', 'ManagedObjectReference', undef, 1],
   ['deviceUrl', 'HttpNfcLeaseDeviceUrl', 1, 0],
   ['totalDiskCapacityInKB', undef, undef, 1],
   ['leaseTimeout', undef, undef, 1],
   ['hostMap', 'HttpNfcLeaseDatastoreLeaseInfo', 1, 0],
);


VIMRuntime::make_get_set('HttpNfcLeaseInfo', 'lease', 'entity', 'deviceUrl', 'totalDiskCapacityInKB', 'leaseTimeout', 'hostMap');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HttpNfcLeaseDeviceUrl;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['importKey', undef, undef, 1],
   ['url', undef, undef, 1],
   ['sslThumbprint', undef, undef, 1],
   ['disk', 'boolean', undef, 0],
   ['targetId', undef, undef, 0],
   ['datastoreKey', undef, undef, 0],
   ['fileSize', undef, undef, 0],
);


VIMRuntime::make_get_set('HttpNfcLeaseDeviceUrl', 'key', 'importKey', 'url', 'sslThumbprint', 'disk', 'targetId', 'datastoreKey', 'fileSize');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHttpNfcLeaseDeviceUrl;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HttpNfcLeaseDeviceUrl', 'HttpNfcLeaseDeviceUrl', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHttpNfcLeaseDeviceUrl', 'HttpNfcLeaseDeviceUrl');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HttpNfcLeaseManifestEntry;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['sha1', undef, undef, 1],
   ['size', undef, undef, 1],
   ['disk', 'boolean', undef, 1],
   ['capacity', undef, undef, 0],
   ['populatedSize', undef, undef, 0],
);


VIMRuntime::make_get_set('HttpNfcLeaseManifestEntry', 'key', 'sha1', 'size', 'disk', 'capacity', 'populatedSize');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHttpNfcLeaseManifestEntry;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HttpNfcLeaseManifestEntry', 'HttpNfcLeaseManifestEntry', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHttpNfcLeaseManifestEntry', 'HttpNfcLeaseManifestEntry');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ImportSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['entityConfig', 'VAppEntityConfigInfo', undef, 0],
   ['instantiationOst', 'OvfConsumerOstNode', undef, 0],
);


VIMRuntime::make_get_set('ImportSpec', 'entityConfig', 'instantiationOst');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfImportSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ImportSpec', 'ImportSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfImportSpec', 'ImportSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InheritablePolicy;
our @ISA = qw(DynamicData);

our @property_list = (
   ['inherited', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('InheritablePolicy', 'inherited');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IntExpression;
our @ISA = qw(NegatableExpression);

our @property_list = (
   ['value', undef, undef, 0],
);


VIMRuntime::make_get_set('IntExpression', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IntPolicy;
our @ISA = qw(InheritablePolicy);

our @property_list = (
   ['value', undef, undef, 0],
);


VIMRuntime::make_get_set('IntPolicy', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IoFilterInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
   ['name', undef, undef, 1],
   ['vendor', undef, undef, 1],
   ['version', undef, undef, 1],
   ['type', undef, undef, 0],
   ['summary', undef, undef, 0],
   ['releaseDate', undef, undef, 0],
);


VIMRuntime::make_get_set('IoFilterInfo', 'id', 'name', 'vendor', 'version', 'type', 'summary', 'releaseDate');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostIoFilterInfo;
our @ISA = qw(IoFilterInfo);

our @property_list = (
   ['available', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('HostIoFilterInfo', 'available');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostIoFilterInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostIoFilterInfo', 'HostIoFilterInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostIoFilterInfo', 'HostIoFilterInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterIoFilterInfo;
our @ISA = qw(IoFilterInfo);

our @property_list = (
   ['opType', undef, undef, 1],
   ['vibUrl', undef, undef, 0],
);


VIMRuntime::make_get_set('ClusterIoFilterInfo', 'opType', 'vibUrl');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterIoFilterInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterIoFilterInfo', 'ClusterIoFilterInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterIoFilterInfo', 'ClusterIoFilterInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IoFilterHostIssue;
our @ISA = qw(DynamicData);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
   ['issue', 'LocalizedMethodFault', 1, 1],
);


VIMRuntime::make_get_set('IoFilterHostIssue', 'host', 'issue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfIoFilterHostIssue;
our @ISA = qw(ComplexType);

our @property_list = (
   ['IoFilterHostIssue', 'IoFilterHostIssue', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfIoFilterHostIssue', 'IoFilterHostIssue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IoFilterQueryIssueResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['opType', undef, undef, 1],
   ['hostIssue', 'IoFilterHostIssue', 1, 0],
);


VIMRuntime::make_get_set('IoFilterQueryIssueResult', 'opType', 'hostIssue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IpAddress;
our @ISA = qw(NegatableExpression);

our @property_list = (
);


VIMRuntime::make_get_set('IpAddress');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IpPoolManagerIpAllocation;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipAddress', undef, undef, 1],
   ['allocationId', undef, undef, 1],
);


VIMRuntime::make_get_set('IpPoolManagerIpAllocation', 'ipAddress', 'allocationId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfIpPoolManagerIpAllocation;
our @ISA = qw(ComplexType);

our @property_list = (
   ['IpPoolManagerIpAllocation', 'IpPoolManagerIpAllocation', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfIpPoolManagerIpAllocation', 'IpPoolManagerIpAllocation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IpRange;
our @ISA = qw(IpAddress);

our @property_list = (
   ['addressPrefix', undef, undef, 1],
   ['prefixLength', undef, undef, 0],
);


VIMRuntime::make_get_set('IpRange', 'addressPrefix', 'prefixLength');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package KeyValue;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['value', undef, undef, 1],
);


VIMRuntime::make_get_set('KeyValue', 'key', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfKeyValue;
our @ISA = qw(ComplexType);

our @property_list = (
   ['KeyValue', 'KeyValue', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfKeyValue', 'KeyValue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LatencySensitivity;
our @ISA = qw(DynamicData);

our @property_list = (
   ['level', 'LatencySensitivitySensitivityLevel', undef, 1],
   ['sensitivity', undef, undef, 0],
);


VIMRuntime::make_get_set('LatencySensitivity', 'level', 'sensitivity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseAssignmentManagerLicenseAssignment;
our @ISA = qw(DynamicData);

our @property_list = (
   ['entityId', undef, undef, 1],
   ['scope', undef, undef, 0],
   ['entityDisplayName', undef, undef, 0],
   ['assignedLicense', 'LicenseManagerLicenseInfo', undef, 1],
   ['properties', 'KeyAnyValue', 1, 0],
);


VIMRuntime::make_get_set('LicenseAssignmentManagerLicenseAssignment', 'entityId', 'scope', 'entityDisplayName', 'assignedLicense', 'properties');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfLicenseAssignmentManagerLicenseAssignment;
our @ISA = qw(ComplexType);

our @property_list = (
   ['LicenseAssignmentManagerLicenseAssignment', 'LicenseAssignmentManagerLicenseAssignment', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfLicenseAssignmentManagerLicenseAssignment', 'LicenseAssignmentManagerLicenseAssignment');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseSource;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('LicenseSource');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseServerSource;
our @ISA = qw(LicenseSource);

our @property_list = (
   ['licenseServer', undef, undef, 1],
);


VIMRuntime::make_get_set('LicenseServerSource', 'licenseServer');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LocalLicenseSource;
our @ISA = qw(LicenseSource);

our @property_list = (
   ['licenseKeys', undef, undef, 1],
);


VIMRuntime::make_get_set('LocalLicenseSource', 'licenseKeys');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EvaluationLicenseSource;
our @ISA = qw(LicenseSource);

our @property_list = (
   ['remainingHours', undef, undef, 0],
);


VIMRuntime::make_get_set('EvaluationLicenseSource', 'remainingHours');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseFeatureInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['featureName', undef, undef, 1],
   ['featureDescription', undef, undef, 0],
   ['state', 'LicenseFeatureInfoState', undef, 0],
   ['costUnit', undef, undef, 1],
   ['sourceRestriction', undef, undef, 0],
   ['dependentKey', undef, 1, 0],
   ['edition', 'boolean', undef, 0],
   ['expiresOn', undef, undef, 0],
);


VIMRuntime::make_get_set('LicenseFeatureInfo', 'key', 'featureName', 'featureDescription', 'state', 'costUnit', 'sourceRestriction', 'dependentKey', 'edition', 'expiresOn');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfLicenseFeatureInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['LicenseFeatureInfo', 'LicenseFeatureInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfLicenseFeatureInfo', 'LicenseFeatureInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseReservationInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['state', 'LicenseReservationInfoState', undef, 1],
   ['required', undef, undef, 1],
);


VIMRuntime::make_get_set('LicenseReservationInfo', 'key', 'state', 'required');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfLicenseReservationInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['LicenseReservationInfo', 'LicenseReservationInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfLicenseReservationInfo', 'LicenseReservationInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseAvailabilityInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['feature', 'LicenseFeatureInfo', undef, 1],
   ['total', undef, undef, 1],
   ['available', undef, undef, 1],
);


VIMRuntime::make_get_set('LicenseAvailabilityInfo', 'feature', 'total', 'available');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfLicenseAvailabilityInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['LicenseAvailabilityInfo', 'LicenseAvailabilityInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfLicenseAvailabilityInfo', 'LicenseAvailabilityInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseDiagnostics;
our @ISA = qw(DynamicData);

our @property_list = (
   ['sourceLastChanged', undef, undef, 1],
   ['sourceLost', undef, undef, 1],
   ['sourceLatency', undef, undef, 1],
   ['licenseRequests', undef, undef, 1],
   ['licenseRequestFailures', undef, undef, 1],
   ['licenseFeatureUnknowns', undef, undef, 1],
   ['opState', 'LicenseManagerState', undef, 1],
   ['lastStatusUpdate', undef, undef, 1],
   ['opFailureMessage', undef, undef, 1],
);


VIMRuntime::make_get_set('LicenseDiagnostics', 'sourceLastChanged', 'sourceLost', 'sourceLatency', 'licenseRequests', 'licenseRequestFailures', 'licenseFeatureUnknowns', 'opState', 'lastStatusUpdate', 'opFailureMessage');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseUsageInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['source', 'LicenseSource', undef, 1],
   ['sourceAvailable', 'boolean', undef, 1],
   ['reservationInfo', 'LicenseReservationInfo', 1, 0],
   ['featureInfo', 'LicenseFeatureInfo', 1, 0],
);


VIMRuntime::make_get_set('LicenseUsageInfo', 'source', 'sourceAvailable', 'reservationInfo', 'featureInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseManagerEvaluationInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['properties', 'KeyAnyValue', 1, 1],
);


VIMRuntime::make_get_set('LicenseManagerEvaluationInfo', 'properties');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostLicensableResourceInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['resource', 'KeyAnyValue', 1, 1],
);


VIMRuntime::make_get_set('HostLicensableResourceInfo', 'resource');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseManagerLicenseInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['licenseKey', undef, undef, 1],
   ['editionKey', undef, undef, 1],
   ['name', undef, undef, 1],
   ['total', undef, undef, 1],
   ['used', undef, undef, 0],
   ['costUnit', undef, undef, 1],
   ['properties', 'KeyAnyValue', 1, 0],
   ['labels', 'KeyValue', 1, 0],
);


VIMRuntime::make_get_set('LicenseManagerLicenseInfo', 'licenseKey', 'editionKey', 'name', 'total', 'used', 'costUnit', 'properties', 'labels');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfLicenseManagerLicenseInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['LicenseManagerLicenseInfo', 'LicenseManagerLicenseInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfLicenseManagerLicenseInfo', 'LicenseManagerLicenseInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LocalizationManagerMessageCatalog;
our @ISA = qw(DynamicData);

our @property_list = (
   ['moduleName', undef, undef, 1],
   ['catalogName', undef, undef, 1],
   ['locale', undef, undef, 1],
   ['catalogUri', undef, undef, 1],
   ['lastModified', undef, undef, 0],
   ['md5sum', undef, undef, 0],
   ['version', undef, undef, 0],
);


VIMRuntime::make_get_set('LocalizationManagerMessageCatalog', 'moduleName', 'catalogName', 'locale', 'catalogUri', 'lastModified', 'md5sum', 'version');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfLocalizationManagerMessageCatalog;
our @ISA = qw(ComplexType);

our @property_list = (
   ['LocalizationManagerMessageCatalog', 'LocalizationManagerMessageCatalog', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfLocalizationManagerMessageCatalog', 'LocalizationManagerMessageCatalog');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LongPolicy;
our @ISA = qw(InheritablePolicy);

our @property_list = (
   ['value', undef, undef, 0],
);


VIMRuntime::make_get_set('LongPolicy', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MacAddress;
our @ISA = qw(NegatableExpression);

our @property_list = (
);


VIMRuntime::make_get_set('MacAddress');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MacRange;
our @ISA = qw(MacAddress);

our @property_list = (
   ['address', undef, undef, 1],
   ['mask', undef, undef, 1],
);


VIMRuntime::make_get_set('MacRange', 'address', 'mask');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MethodDescription;
our @ISA = qw(Description);

our @property_list = (
   ['key', undef, undef, 1],
);


VIMRuntime::make_get_set('MethodDescription', 'key');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NegatableExpression;
our @ISA = qw(DynamicData);

our @property_list = (
   ['negate', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('NegatableExpression', 'negate');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetworkSummary;
our @ISA = qw(DynamicData);

our @property_list = (
   ['network', 'ManagedObjectReference', undef, 0],
   ['name', undef, undef, 1],
   ['accessible', 'boolean', undef, 1],
   ['ipPoolName', undef, undef, 0],
   ['ipPoolId', undef, undef, 0],
);


VIMRuntime::make_get_set('NetworkSummary', 'network', 'name', 'accessible', 'ipPoolName', 'ipPoolId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NumericRange;
our @ISA = qw(DynamicData);

our @property_list = (
   ['start', undef, undef, 1],
   ['end', undef, undef, 1],
);


VIMRuntime::make_get_set('NumericRange', 'start', 'end');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfNumericRange;
our @ISA = qw(ComplexType);

our @property_list = (
   ['NumericRange', 'NumericRange', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfNumericRange', 'NumericRange');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OpaqueNetworkSummary;
our @ISA = qw(NetworkSummary);

our @property_list = (
   ['opaqueNetworkId', undef, undef, 1],
   ['opaqueNetworkType', undef, undef, 1],
);


VIMRuntime::make_get_set('OpaqueNetworkSummary', 'opaqueNetworkId', 'opaqueNetworkType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OpaqueNetworkCapability;
our @ISA = qw(DynamicData);

our @property_list = (
   ['networkReservationSupported', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('OpaqueNetworkCapability', 'networkReservationSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfConsumerOvfSection;
our @ISA = qw(DynamicData);

our @property_list = (
   ['lineNumber', undef, undef, 1],
   ['xml', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfConsumerOvfSection', 'lineNumber', 'xml');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfOvfConsumerOvfSection;
our @ISA = qw(ComplexType);

our @property_list = (
   ['OvfConsumerOvfSection', 'OvfConsumerOvfSection', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfOvfConsumerOvfSection', 'OvfConsumerOvfSection');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfConsumerOstNode;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
   ['type', undef, undef, 1],
   ['section', 'OvfConsumerOvfSection', 1, 0],
   ['child', 'OvfConsumerOstNode', 1, 0],
   ['entity', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('OvfConsumerOstNode', 'id', 'type', 'section', 'child', 'entity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfOvfConsumerOstNode;
our @ISA = qw(ComplexType);

our @property_list = (
   ['OvfConsumerOstNode', 'OvfConsumerOstNode', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfOvfConsumerOstNode', 'OvfConsumerOstNode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfOptionInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['option', undef, undef, 1],
   ['description', 'LocalizableMessage', undef, 1],
);


VIMRuntime::make_get_set('OvfOptionInfo', 'option', 'description');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfOvfOptionInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['OvfOptionInfo', 'OvfOptionInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfOvfOptionInfo', 'OvfOptionInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfDeploymentOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['label', undef, undef, 1],
   ['description', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfDeploymentOption', 'key', 'label', 'description');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfOvfDeploymentOption;
our @ISA = qw(ComplexType);

our @property_list = (
   ['OvfDeploymentOption', 'OvfDeploymentOption', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfOvfDeploymentOption', 'OvfDeploymentOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfManagerCommonParams;
our @ISA = qw(DynamicData);

our @property_list = (
   ['locale', undef, undef, 1],
   ['deploymentOption', undef, undef, 1],
   ['msgBundle', 'KeyValue', 1, 0],
   ['importOption', undef, 1, 0],
);


VIMRuntime::make_get_set('OvfManagerCommonParams', 'locale', 'deploymentOption', 'msgBundle', 'importOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfValidateHostParams;
our @ISA = qw(OvfManagerCommonParams);

our @property_list = (
);


VIMRuntime::make_get_set('OvfValidateHostParams');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfValidateHostResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['downloadSize', undef, undef, 0],
   ['flatDeploymentSize', undef, undef, 0],
   ['sparseDeploymentSize', undef, undef, 0],
   ['error', 'LocalizedMethodFault', 1, 0],
   ['warning', 'LocalizedMethodFault', 1, 0],
   ['supportedDiskProvisioning', undef, 1, 0],
);


VIMRuntime::make_get_set('OvfValidateHostResult', 'downloadSize', 'flatDeploymentSize', 'sparseDeploymentSize', 'error', 'warning', 'supportedDiskProvisioning');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfParseDescriptorParams;
our @ISA = qw(OvfManagerCommonParams);

our @property_list = (
);


VIMRuntime::make_get_set('OvfParseDescriptorParams');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfParseDescriptorResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['eula', undef, 1, 0],
   ['network', 'OvfNetworkInfo', 1, 0],
   ['ipAllocationScheme', undef, 1, 0],
   ['ipProtocols', undef, 1, 0],
   ['property', 'VAppPropertyInfo', 1, 0],
   ['productInfo', 'VAppProductInfo', undef, 0],
   ['annotation', undef, undef, 1],
   ['approximateDownloadSize', undef, undef, 0],
   ['approximateFlatDeploymentSize', undef, undef, 0],
   ['approximateSparseDeploymentSize', undef, undef, 0],
   ['defaultEntityName', undef, undef, 1],
   ['virtualApp', 'boolean', undef, 1],
   ['deploymentOption', 'OvfDeploymentOption', 1, 0],
   ['defaultDeploymentOption', undef, undef, 1],
   ['entityName', 'KeyValue', 1, 0],
   ['annotatedOst', 'OvfConsumerOstNode', undef, 0],
   ['error', 'LocalizedMethodFault', 1, 0],
   ['warning', 'LocalizedMethodFault', 1, 0],
);


VIMRuntime::make_get_set('OvfParseDescriptorResult', 'eula', 'network', 'ipAllocationScheme', 'ipProtocols', 'property', 'productInfo', 'annotation', 'approximateDownloadSize', 'approximateFlatDeploymentSize', 'approximateSparseDeploymentSize', 'defaultEntityName', 'virtualApp', 'deploymentOption', 'defaultDeploymentOption', 'entityName', 'annotatedOst', 'error', 'warning');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfNetworkInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['description', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfNetworkInfo', 'name', 'description');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfOvfNetworkInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['OvfNetworkInfo', 'OvfNetworkInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfOvfNetworkInfo', 'OvfNetworkInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfCreateImportSpecParams;
our @ISA = qw(OvfManagerCommonParams);

our @property_list = (
   ['entityName', undef, undef, 1],
   ['hostSystem', 'ManagedObjectReference', undef, 0],
   ['networkMapping', 'OvfNetworkMapping', 1, 0],
   ['ipAllocationPolicy', undef, undef, 0],
   ['ipProtocol', undef, undef, 0],
   ['propertyMapping', 'KeyValue', 1, 0],
   ['resourceMapping', 'OvfResourceMap', 1, 0],
   ['diskProvisioning', undef, undef, 0],
   ['instantiationOst', 'OvfConsumerOstNode', undef, 0],
);


VIMRuntime::make_get_set('OvfCreateImportSpecParams', 'entityName', 'hostSystem', 'networkMapping', 'ipAllocationPolicy', 'ipProtocol', 'propertyMapping', 'resourceMapping', 'diskProvisioning', 'instantiationOst');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfResourceMap;
our @ISA = qw(DynamicData);

our @property_list = (
   ['source', undef, undef, 1],
   ['parent', 'ManagedObjectReference', undef, 0],
   ['resourceSpec', 'ResourceConfigSpec', undef, 0],
   ['datastore', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('OvfResourceMap', 'source', 'parent', 'resourceSpec', 'datastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfOvfResourceMap;
our @ISA = qw(ComplexType);

our @property_list = (
   ['OvfResourceMap', 'OvfResourceMap', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfOvfResourceMap', 'OvfResourceMap');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfNetworkMapping;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['network', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('OvfNetworkMapping', 'name', 'network');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfOvfNetworkMapping;
our @ISA = qw(ComplexType);

our @property_list = (
   ['OvfNetworkMapping', 'OvfNetworkMapping', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfOvfNetworkMapping', 'OvfNetworkMapping');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfCreateImportSpecResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['importSpec', 'ImportSpec', undef, 0],
   ['fileItem', 'OvfFileItem', 1, 0],
   ['warning', 'LocalizedMethodFault', 1, 0],
   ['error', 'LocalizedMethodFault', 1, 0],
);


VIMRuntime::make_get_set('OvfCreateImportSpecResult', 'importSpec', 'fileItem', 'warning', 'error');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfFileItem;
our @ISA = qw(DynamicData);

our @property_list = (
   ['deviceId', undef, undef, 1],
   ['path', undef, undef, 1],
   ['compressionMethod', undef, undef, 0],
   ['chunkSize', undef, undef, 0],
   ['size', undef, undef, 0],
   ['cimType', undef, undef, 1],
   ['create', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('OvfFileItem', 'deviceId', 'path', 'compressionMethod', 'chunkSize', 'size', 'cimType', 'create');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfOvfFileItem;
our @ISA = qw(ComplexType);

our @property_list = (
   ['OvfFileItem', 'OvfFileItem', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfOvfFileItem', 'OvfFileItem');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfCreateDescriptorParams;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ovfFiles', 'OvfFile', 1, 0],
   ['name', undef, undef, 0],
   ['description', undef, undef, 0],
   ['includeImageFiles', 'boolean', undef, 0],
   ['exportOption', undef, 1, 0],
   ['snapshot', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('OvfCreateDescriptorParams', 'ovfFiles', 'name', 'description', 'includeImageFiles', 'exportOption', 'snapshot');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfCreateDescriptorResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ovfDescriptor', undef, undef, 1],
   ['error', 'LocalizedMethodFault', 1, 0],
   ['warning', 'LocalizedMethodFault', 1, 0],
   ['includeImageFiles', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('OvfCreateDescriptorResult', 'ovfDescriptor', 'error', 'warning', 'includeImageFiles');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfFile;
our @ISA = qw(DynamicData);

our @property_list = (
   ['deviceId', undef, undef, 1],
   ['path', undef, undef, 1],
   ['compressionMethod', undef, undef, 0],
   ['chunkSize', undef, undef, 0],
   ['size', undef, undef, 1],
   ['capacity', undef, undef, 0],
   ['populatedSize', undef, undef, 0],
);


VIMRuntime::make_get_set('OvfFile', 'deviceId', 'path', 'compressionMethod', 'chunkSize', 'size', 'capacity', 'populatedSize');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfOvfFile;
our @ISA = qw(ComplexType);

our @property_list = (
   ['OvfFile', 'OvfFile', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfOvfFile', 'OvfFile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PasswordField;
our @ISA = qw(DynamicData);

our @property_list = (
   ['value', undef, undef, 1],
);


VIMRuntime::make_get_set('PasswordField', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PerformanceDescription;
our @ISA = qw(DynamicData);

our @property_list = (
   ['counterType', 'ElementDescription', 1, 1],
   ['statsType', 'ElementDescription', 1, 1],
);


VIMRuntime::make_get_set('PerformanceDescription', 'counterType', 'statsType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PerfProviderSummary;
our @ISA = qw(DynamicData);

our @property_list = (
   ['entity', 'ManagedObjectReference', undef, 1],
   ['currentSupported', 'boolean', undef, 1],
   ['summarySupported', 'boolean', undef, 1],
   ['refreshRate', undef, undef, 0],
);


VIMRuntime::make_get_set('PerfProviderSummary', 'entity', 'currentSupported', 'summarySupported', 'refreshRate');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PerfCounterInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['nameInfo', 'ElementDescription', undef, 1],
   ['groupInfo', 'ElementDescription', undef, 1],
   ['unitInfo', 'ElementDescription', undef, 1],
   ['rollupType', 'PerfSummaryType', undef, 1],
   ['statsType', 'PerfStatsType', undef, 1],
   ['level', undef, undef, 0],
   ['perDeviceLevel', undef, undef, 0],
   ['associatedCounterId', undef, 1, 0],
);


VIMRuntime::make_get_set('PerfCounterInfo', 'key', 'nameInfo', 'groupInfo', 'unitInfo', 'rollupType', 'statsType', 'level', 'perDeviceLevel', 'associatedCounterId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPerfCounterInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PerfCounterInfo', 'PerfCounterInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPerfCounterInfo', 'PerfCounterInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PerfMetricId;
our @ISA = qw(DynamicData);

our @property_list = (
   ['counterId', undef, undef, 1],
   ['instance', undef, undef, 1],
);


VIMRuntime::make_get_set('PerfMetricId', 'counterId', 'instance');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPerfMetricId;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PerfMetricId', 'PerfMetricId', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPerfMetricId', 'PerfMetricId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PerfQuerySpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['entity', 'ManagedObjectReference', undef, 1],
   ['startTime', undef, undef, 0],
   ['endTime', undef, undef, 0],
   ['maxSample', undef, undef, 0],
   ['metricId', 'PerfMetricId', 1, 0],
   ['intervalId', undef, undef, 0],
   ['format', undef, undef, 0],
);


VIMRuntime::make_get_set('PerfQuerySpec', 'entity', 'startTime', 'endTime', 'maxSample', 'metricId', 'intervalId', 'format');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPerfQuerySpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PerfQuerySpec', 'PerfQuerySpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPerfQuerySpec', 'PerfQuerySpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PerfSampleInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['timestamp', undef, undef, 1],
   ['interval', undef, undef, 1],
);


VIMRuntime::make_get_set('PerfSampleInfo', 'timestamp', 'interval');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPerfSampleInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PerfSampleInfo', 'PerfSampleInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPerfSampleInfo', 'PerfSampleInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PerfMetricSeries;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', 'PerfMetricId', undef, 1],
);


VIMRuntime::make_get_set('PerfMetricSeries', 'id');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPerfMetricSeries;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PerfMetricSeries', 'PerfMetricSeries', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPerfMetricSeries', 'PerfMetricSeries');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PerfMetricIntSeries;
our @ISA = qw(PerfMetricSeries);

our @property_list = (
   ['value', undef, 1, 0],
);


VIMRuntime::make_get_set('PerfMetricIntSeries', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PerfMetricSeriesCSV;
our @ISA = qw(PerfMetricSeries);

our @property_list = (
   ['value', undef, undef, 0],
);


VIMRuntime::make_get_set('PerfMetricSeriesCSV', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPerfMetricSeriesCSV;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PerfMetricSeriesCSV', 'PerfMetricSeriesCSV', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPerfMetricSeriesCSV', 'PerfMetricSeriesCSV');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PerfEntityMetricBase;
our @ISA = qw(DynamicData);

our @property_list = (
   ['entity', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('PerfEntityMetricBase', 'entity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPerfEntityMetricBase;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PerfEntityMetricBase', 'PerfEntityMetricBase', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPerfEntityMetricBase', 'PerfEntityMetricBase');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PerfEntityMetric;
our @ISA = qw(PerfEntityMetricBase);

our @property_list = (
   ['sampleInfo', 'PerfSampleInfo', 1, 0],
   ['value', 'PerfMetricSeries', 1, 0],
);


VIMRuntime::make_get_set('PerfEntityMetric', 'sampleInfo', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PerfEntityMetricCSV;
our @ISA = qw(PerfEntityMetricBase);

our @property_list = (
   ['sampleInfoCSV', undef, undef, 1],
   ['value', 'PerfMetricSeriesCSV', 1, 0],
);


VIMRuntime::make_get_set('PerfEntityMetricCSV', 'sampleInfoCSV', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PerfCompositeMetric;
our @ISA = qw(DynamicData);

our @property_list = (
   ['entity', 'PerfEntityMetricBase', undef, 0],
   ['childEntity', 'PerfEntityMetricBase', 1, 0],
);


VIMRuntime::make_get_set('PerfCompositeMetric', 'entity', 'childEntity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PerformanceManagerCounterLevelMapping;
our @ISA = qw(DynamicData);

our @property_list = (
   ['counterId', undef, undef, 1],
   ['aggregateLevel', undef, undef, 0],
   ['perDeviceLevel', undef, undef, 0],
);


VIMRuntime::make_get_set('PerformanceManagerCounterLevelMapping', 'counterId', 'aggregateLevel', 'perDeviceLevel');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPerformanceManagerCounterLevelMapping;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PerformanceManagerCounterLevelMapping', 'PerformanceManagerCounterLevelMapping', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPerformanceManagerCounterLevelMapping', 'PerformanceManagerCounterLevelMapping');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PerfInterval;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['samplingPeriod', undef, undef, 1],
   ['name', undef, undef, 1],
   ['length', undef, undef, 1],
   ['level', undef, undef, 0],
   ['enabled', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('PerfInterval', 'key', 'samplingPeriod', 'name', 'length', 'level', 'enabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPerfInterval;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PerfInterval', 'PerfInterval', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPerfInterval', 'PerfInterval');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PosixUserSearchResult;
our @ISA = qw(UserSearchResult);

our @property_list = (
   ['id', undef, undef, 1],
   ['shellAccess', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('PosixUserSearchResult', 'id', 'shellAccess');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PrivilegePolicyDef;
our @ISA = qw(DynamicData);

our @property_list = (
   ['createPrivilege', undef, undef, 1],
   ['readPrivilege', undef, undef, 1],
   ['updatePrivilege', undef, undef, 1],
   ['deletePrivilege', undef, undef, 1],
);


VIMRuntime::make_get_set('PrivilegePolicyDef', 'createPrivilege', 'readPrivilege', 'updatePrivilege', 'deletePrivilege');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ResourceAllocationInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['reservation', undef, undef, 0],
   ['expandableReservation', 'boolean', undef, 0],
   ['limit', undef, undef, 0],
   ['shares', 'SharesInfo', undef, 0],
   ['overheadLimit', undef, undef, 0],
);


VIMRuntime::make_get_set('ResourceAllocationInfo', 'reservation', 'expandableReservation', 'limit', 'shares', 'overheadLimit');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ResourceAllocationOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['sharesOption', 'SharesOption', undef, 1],
);


VIMRuntime::make_get_set('ResourceAllocationOption', 'sharesOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ResourceConfigOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['cpuAllocationOption', 'ResourceAllocationOption', undef, 1],
   ['memoryAllocationOption', 'ResourceAllocationOption', undef, 1],
);


VIMRuntime::make_get_set('ResourceConfigOption', 'cpuAllocationOption', 'memoryAllocationOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ResourceConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['entity', 'ManagedObjectReference', undef, 0],
   ['changeVersion', undef, undef, 0],
   ['lastModified', undef, undef, 0],
   ['cpuAllocation', 'ResourceAllocationInfo', undef, 1],
   ['memoryAllocation', 'ResourceAllocationInfo', undef, 1],
);


VIMRuntime::make_get_set('ResourceConfigSpec', 'entity', 'changeVersion', 'lastModified', 'cpuAllocation', 'memoryAllocation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfResourceConfigSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ResourceConfigSpec', 'ResourceConfigSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfResourceConfigSpec', 'ResourceConfigSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatabaseSizeParam;
our @ISA = qw(DynamicData);

our @property_list = (
   ['inventoryDesc', 'InventoryDescription', undef, 1],
   ['perfStatsDesc', 'PerformanceStatisticsDescription', undef, 0],
);


VIMRuntime::make_get_set('DatabaseSizeParam', 'inventoryDesc', 'perfStatsDesc');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InventoryDescription;
our @ISA = qw(DynamicData);

our @property_list = (
   ['numHosts', undef, undef, 1],
   ['numVirtualMachines', undef, undef, 1],
   ['numResourcePools', undef, undef, 0],
   ['numClusters', undef, undef, 0],
   ['numCpuDev', undef, undef, 0],
   ['numNetDev', undef, undef, 0],
   ['numDiskDev', undef, undef, 0],
   ['numvCpuDev', undef, undef, 0],
   ['numvNetDev', undef, undef, 0],
   ['numvDiskDev', undef, undef, 0],
);


VIMRuntime::make_get_set('InventoryDescription', 'numHosts', 'numVirtualMachines', 'numResourcePools', 'numClusters', 'numCpuDev', 'numNetDev', 'numDiskDev', 'numvCpuDev', 'numvNetDev', 'numvDiskDev');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PerformanceStatisticsDescription;
our @ISA = qw(DynamicData);

our @property_list = (
   ['intervals', 'PerfInterval', 1, 0],
);


VIMRuntime::make_get_set('PerformanceStatisticsDescription', 'intervals');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatabaseSizeEstimate;
our @ISA = qw(DynamicData);

our @property_list = (
   ['size', undef, undef, 1],
);


VIMRuntime::make_get_set('DatabaseSizeEstimate', 'size');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ResourcePoolResourceUsage;
our @ISA = qw(DynamicData);

our @property_list = (
   ['reservationUsed', undef, undef, 1],
   ['reservationUsedForVm', undef, undef, 1],
   ['unreservedForPool', undef, undef, 1],
   ['unreservedForVm', undef, undef, 1],
   ['overallUsage', undef, undef, 1],
   ['maxUsage', undef, undef, 1],
);


VIMRuntime::make_get_set('ResourcePoolResourceUsage', 'reservationUsed', 'reservationUsedForVm', 'unreservedForPool', 'unreservedForVm', 'overallUsage', 'maxUsage');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ResourcePoolRuntimeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['memory', 'ResourcePoolResourceUsage', undef, 1],
   ['cpu', 'ResourcePoolResourceUsage', undef, 1],
   ['overallStatus', 'ManagedEntityStatus', undef, 1],
);


VIMRuntime::make_get_set('ResourcePoolRuntimeInfo', 'memory', 'cpu', 'overallStatus');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ResourcePoolQuickStats;
our @ISA = qw(DynamicData);

our @property_list = (
   ['overallCpuUsage', undef, undef, 0],
   ['overallCpuDemand', undef, undef, 0],
   ['guestMemoryUsage', undef, undef, 0],
   ['hostMemoryUsage', undef, undef, 0],
   ['distributedCpuEntitlement', undef, undef, 0],
   ['distributedMemoryEntitlement', undef, undef, 0],
   ['staticCpuEntitlement', undef, undef, 0],
   ['staticMemoryEntitlement', undef, undef, 0],
   ['privateMemory', undef, undef, 0],
   ['sharedMemory', undef, undef, 0],
   ['swappedMemory', undef, undef, 0],
   ['balloonedMemory', undef, undef, 0],
   ['overheadMemory', undef, undef, 0],
   ['consumedOverheadMemory', undef, undef, 0],
   ['compressedMemory', undef, undef, 0],
);


VIMRuntime::make_get_set('ResourcePoolQuickStats', 'overallCpuUsage', 'overallCpuDemand', 'guestMemoryUsage', 'hostMemoryUsage', 'distributedCpuEntitlement', 'distributedMemoryEntitlement', 'staticCpuEntitlement', 'staticMemoryEntitlement', 'privateMemory', 'sharedMemory', 'swappedMemory', 'balloonedMemory', 'overheadMemory', 'consumedOverheadMemory', 'compressedMemory');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ResourcePoolSummary;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['config', 'ResourceConfigSpec', undef, 1],
   ['runtime', 'ResourcePoolRuntimeInfo', undef, 1],
   ['quickStats', 'ResourcePoolQuickStats', undef, 0],
   ['configuredMemoryMB', undef, undef, 0],
);


VIMRuntime::make_get_set('ResourcePoolSummary', 'name', 'config', 'runtime', 'quickStats', 'configuredMemoryMB');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SelectionSet;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('SelectionSet');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfSelectionSet;
our @ISA = qw(ComplexType);

our @property_list = (
   ['SelectionSet', 'SelectionSet', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfSelectionSet', 'SelectionSet');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVMotionCompatibility;
our @ISA = qw(DynamicData);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
   ['compatibility', undef, 1, 0],
);


VIMRuntime::make_get_set('HostVMotionCompatibility', 'host', 'compatibility');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostVMotionCompatibility;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostVMotionCompatibility', 'HostVMotionCompatibility', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostVMotionCompatibility', 'HostVMotionCompatibility');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProductComponentInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
   ['name', undef, undef, 1],
   ['version', undef, undef, 1],
   ['release', undef, undef, 1],
);


VIMRuntime::make_get_set('ProductComponentInfo', 'id', 'name', 'version', 'release');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfProductComponentInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ProductComponentInfo', 'ProductComponentInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfProductComponentInfo', 'ProductComponentInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ServiceContent;
our @ISA = qw(DynamicData);

our @property_list = (
   ['rootFolder', 'ManagedObjectReference', undef, 1],
   ['propertyCollector', 'ManagedObjectReference', undef, 1],
   ['viewManager', 'ManagedObjectReference', undef, 0],
   ['about', 'AboutInfo', undef, 1],
   ['setting', 'ManagedObjectReference', undef, 0],
   ['userDirectory', 'ManagedObjectReference', undef, 0],
   ['sessionManager', 'ManagedObjectReference', undef, 0],
   ['authorizationManager', 'ManagedObjectReference', undef, 0],
   ['serviceManager', 'ManagedObjectReference', undef, 0],
   ['perfManager', 'ManagedObjectReference', undef, 0],
   ['scheduledTaskManager', 'ManagedObjectReference', undef, 0],
   ['alarmManager', 'ManagedObjectReference', undef, 0],
   ['eventManager', 'ManagedObjectReference', undef, 0],
   ['taskManager', 'ManagedObjectReference', undef, 0],
   ['extensionManager', 'ManagedObjectReference', undef, 0],
   ['customizationSpecManager', 'ManagedObjectReference', undef, 0],
   ['customFieldsManager', 'ManagedObjectReference', undef, 0],
   ['accountManager', 'ManagedObjectReference', undef, 0],
   ['diagnosticManager', 'ManagedObjectReference', undef, 0],
   ['licenseManager', 'ManagedObjectReference', undef, 0],
   ['searchIndex', 'ManagedObjectReference', undef, 0],
   ['fileManager', 'ManagedObjectReference', undef, 0],
   ['datastoreNamespaceManager', 'ManagedObjectReference', undef, 0],
   ['virtualDiskManager', 'ManagedObjectReference', undef, 0],
   ['virtualizationManager', 'ManagedObjectReference', undef, 0],
   ['snmpSystem', 'ManagedObjectReference', undef, 0],
   ['vmProvisioningChecker', 'ManagedObjectReference', undef, 0],
   ['vmCompatibilityChecker', 'ManagedObjectReference', undef, 0],
   ['ovfManager', 'ManagedObjectReference', undef, 0],
   ['ipPoolManager', 'ManagedObjectReference', undef, 0],
   ['dvSwitchManager', 'ManagedObjectReference', undef, 0],
   ['hostProfileManager', 'ManagedObjectReference', undef, 0],
   ['clusterProfileManager', 'ManagedObjectReference', undef, 0],
   ['complianceManager', 'ManagedObjectReference', undef, 0],
   ['localizationManager', 'ManagedObjectReference', undef, 0],
   ['storageResourceManager', 'ManagedObjectReference', undef, 0],
   ['guestOperationsManager', 'ManagedObjectReference', undef, 0],
   ['overheadMemoryManager', 'ManagedObjectReference', undef, 0],
   ['certificateManager', 'ManagedObjectReference', undef, 0],
   ['ioFilterManager', 'ManagedObjectReference', undef, 0],
   ['vStorageObjectManager', 'ManagedObjectReference', undef, 0],
   ['hostSpecManager', 'ManagedObjectReference', undef, 0],
   ['cryptoManager', 'ManagedObjectReference', undef, 0],
   ['healthUpdateManager', 'ManagedObjectReference', undef, 0],
   ['failoverClusterConfigurator', 'ManagedObjectReference', undef, 0],
   ['failoverClusterManager', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('ServiceContent', 'rootFolder', 'propertyCollector', 'viewManager', 'about', 'setting', 'userDirectory', 'sessionManager', 'authorizationManager', 'serviceManager', 'perfManager', 'scheduledTaskManager', 'alarmManager', 'eventManager', 'taskManager', 'extensionManager', 'customizationSpecManager', 'customFieldsManager', 'accountManager', 'diagnosticManager', 'licenseManager', 'searchIndex', 'fileManager', 'datastoreNamespaceManager', 'virtualDiskManager', 'virtualizationManager', 'snmpSystem', 'vmProvisioningChecker', 'vmCompatibilityChecker', 'ovfManager', 'ipPoolManager', 'dvSwitchManager', 'hostProfileManager', 'clusterProfileManager', 'complianceManager', 'localizationManager', 'storageResourceManager', 'guestOperationsManager', 'overheadMemoryManager', 'certificateManager', 'ioFilterManager', 'vStorageObjectManager', 'hostSpecManager', 'cryptoManager', 'healthUpdateManager', 'failoverClusterConfigurator', 'failoverClusterManager');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ServiceLocatorCredential;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('ServiceLocatorCredential');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ServiceLocatorNamePassword;
our @ISA = qw(ServiceLocatorCredential);

our @property_list = (
   ['username', undef, undef, 1],
   ['password', undef, undef, 1],
);


VIMRuntime::make_get_set('ServiceLocatorNamePassword', 'username', 'password');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ServiceLocatorSAMLCredential;
our @ISA = qw(ServiceLocatorCredential);

our @property_list = (
   ['token', undef, undef, 0],
);


VIMRuntime::make_get_set('ServiceLocatorSAMLCredential', 'token');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ServiceLocator;
our @ISA = qw(DynamicData);

our @property_list = (
   ['instanceUuid', undef, undef, 1],
   ['url', undef, undef, 1],
   ['credential', 'ServiceLocatorCredential', undef, 1],
   ['sslThumbprint', undef, undef, 0],
);


VIMRuntime::make_get_set('ServiceLocator', 'instanceUuid', 'url', 'credential', 'sslThumbprint');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfServiceLocator;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ServiceLocator', 'ServiceLocator', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfServiceLocator', 'ServiceLocator');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ServiceManagerServiceInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['serviceName', undef, undef, 1],
   ['location', undef, 1, 0],
   ['service', 'ManagedObjectReference', undef, 1],
   ['description', undef, undef, 1],
);


VIMRuntime::make_get_set('ServiceManagerServiceInfo', 'serviceName', 'location', 'service', 'description');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfServiceManagerServiceInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ServiceManagerServiceInfo', 'ServiceManagerServiceInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfServiceManagerServiceInfo', 'ServiceManagerServiceInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SessionManagerLocalTicket;
our @ISA = qw(DynamicData);

our @property_list = (
   ['userName', undef, undef, 1],
   ['passwordFilePath', undef, undef, 1],
);


VIMRuntime::make_get_set('SessionManagerLocalTicket', 'userName', 'passwordFilePath');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SessionManagerGenericServiceTicket;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
   ['hostName', undef, undef, 0],
   ['sslThumbprint', undef, undef, 0],
);


VIMRuntime::make_get_set('SessionManagerGenericServiceTicket', 'id', 'hostName', 'sslThumbprint');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SessionManagerServiceRequestSpec;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('SessionManagerServiceRequestSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SessionManagerVmomiServiceRequestSpec;
our @ISA = qw(SessionManagerServiceRequestSpec);

our @property_list = (
   ['method', undef, undef, 1],
);


VIMRuntime::make_get_set('SessionManagerVmomiServiceRequestSpec', 'method');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SessionManagerHttpServiceRequestSpec;
our @ISA = qw(SessionManagerServiceRequestSpec);

our @property_list = (
   ['method', undef, undef, 0],
   ['url', undef, undef, 1],
);


VIMRuntime::make_get_set('SessionManagerHttpServiceRequestSpec', 'method', 'url');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SharesInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['shares', undef, undef, 1],
   ['level', 'SharesLevel', undef, 1],
);


VIMRuntime::make_get_set('SharesInfo', 'shares', 'level');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SharesOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['sharesOption', 'IntOption', undef, 1],
   ['defaultLevel', 'SharesLevel', undef, 1],
);


VIMRuntime::make_get_set('SharesOption', 'sharesOption', 'defaultLevel');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SingleIp;
our @ISA = qw(IpAddress);

our @property_list = (
   ['address', undef, undef, 1],
);


VIMRuntime::make_get_set('SingleIp', 'address');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SingleMac;
our @ISA = qw(MacAddress);

our @property_list = (
   ['address', undef, undef, 1],
);


VIMRuntime::make_get_set('SingleMac', 'address');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StoragePodSummary;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['capacity', undef, undef, 1],
   ['freeSpace', undef, undef, 1],
);


VIMRuntime::make_get_set('StoragePodSummary', 'name', 'capacity', 'freeSpace');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageIOAllocationInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['limit', undef, undef, 0],
   ['shares', 'SharesInfo', undef, 0],
   ['reservation', undef, undef, 0],
);


VIMRuntime::make_get_set('StorageIOAllocationInfo', 'limit', 'shares', 'reservation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageIOAllocationOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['limitOption', 'LongOption', undef, 1],
   ['sharesOption', 'SharesOption', undef, 1],
);


VIMRuntime::make_get_set('StorageIOAllocationOption', 'limitOption', 'sharesOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageIORMInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['enabled', 'boolean', undef, 1],
   ['congestionThresholdMode', undef, undef, 0],
   ['congestionThreshold', undef, undef, 1],
   ['percentOfPeakThroughput', undef, undef, 0],
   ['statsCollectionEnabled', 'boolean', undef, 0],
   ['reservationEnabled', 'boolean', undef, 0],
   ['statsAggregationDisabled', 'boolean', undef, 0],
   ['reservableIopsThreshold', undef, undef, 0],
);


VIMRuntime::make_get_set('StorageIORMInfo', 'enabled', 'congestionThresholdMode', 'congestionThreshold', 'percentOfPeakThroughput', 'statsCollectionEnabled', 'reservationEnabled', 'statsAggregationDisabled', 'reservableIopsThreshold');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageIORMConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['enabled', 'boolean', undef, 0],
   ['congestionThresholdMode', undef, undef, 0],
   ['congestionThreshold', undef, undef, 0],
   ['percentOfPeakThroughput', undef, undef, 0],
   ['statsCollectionEnabled', 'boolean', undef, 0],
   ['reservationEnabled', 'boolean', undef, 0],
   ['statsAggregationDisabled', 'boolean', undef, 0],
   ['reservableIopsThreshold', undef, undef, 0],
);


VIMRuntime::make_get_set('StorageIORMConfigSpec', 'enabled', 'congestionThresholdMode', 'congestionThreshold', 'percentOfPeakThroughput', 'statsCollectionEnabled', 'reservationEnabled', 'statsAggregationDisabled', 'reservableIopsThreshold');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageIORMConfigOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['enabledOption', 'BoolOption', undef, 1],
   ['congestionThresholdOption', 'IntOption', undef, 1],
   ['statsCollectionEnabledOption', 'BoolOption', undef, 0],
   ['reservationEnabledOption', 'BoolOption', undef, 0],
);


VIMRuntime::make_get_set('StorageIORMConfigOption', 'enabledOption', 'congestionThresholdOption', 'statsCollectionEnabledOption', 'reservationEnabledOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StoragePerformanceSummary;
our @ISA = qw(DynamicData);

our @property_list = (
   ['interval', undef, undef, 1],
   ['percentile', undef, 1, 1],
   ['datastoreReadLatency', undef, 1, 1],
   ['datastoreWriteLatency', undef, 1, 1],
   ['datastoreVmLatency', undef, 1, 1],
   ['datastoreReadIops', undef, 1, 1],
   ['datastoreWriteIops', undef, 1, 1],
   ['siocActivityDuration', undef, undef, 1],
);


VIMRuntime::make_get_set('StoragePerformanceSummary', 'interval', 'percentile', 'datastoreReadLatency', 'datastoreWriteLatency', 'datastoreVmLatency', 'datastoreReadIops', 'datastoreWriteIops', 'siocActivityDuration');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfStoragePerformanceSummary;
our @ISA = qw(ComplexType);

our @property_list = (
   ['StoragePerformanceSummary', 'StoragePerformanceSummary', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfStoragePerformanceSummary', 'StoragePerformanceSummary');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PodStorageDrsEntry;
our @ISA = qw(DynamicData);

our @property_list = (
   ['storageDrsConfig', 'StorageDrsConfigInfo', undef, 1],
   ['recommendation', 'ClusterRecommendation', 1, 0],
   ['drsFault', 'ClusterDrsFaults', 1, 0],
   ['actionHistory', 'ClusterActionHistory', 1, 0],
);


VIMRuntime::make_get_set('PodStorageDrsEntry', 'storageDrsConfig', 'recommendation', 'drsFault', 'actionHistory');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageResourceManagerStorageProfileStatistics;
our @ISA = qw(DynamicData);

our @property_list = (
   ['profileId', undef, undef, 1],
   ['totalSpaceMB', undef, undef, 1],
   ['usedSpaceMB', undef, undef, 1],
);


VIMRuntime::make_get_set('StorageResourceManagerStorageProfileStatistics', 'profileId', 'totalSpaceMB', 'usedSpaceMB');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StringExpression;
our @ISA = qw(NegatableExpression);

our @property_list = (
   ['value', undef, undef, 0],
);


VIMRuntime::make_get_set('StringExpression', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StringPolicy;
our @ISA = qw(InheritablePolicy);

our @property_list = (
   ['value', undef, undef, 0],
);


VIMRuntime::make_get_set('StringPolicy', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package Tag;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
);


VIMRuntime::make_get_set('Tag', 'key');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfTag;
our @ISA = qw(ComplexType);

our @property_list = (
   ['Tag', 'Tag', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfTag', 'Tag');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TaskDescription;
our @ISA = qw(DynamicData);

our @property_list = (
   ['methodInfo', 'ElementDescription', 1, 1],
   ['state', 'ElementDescription', 1, 1],
   ['reason', 'TypeDescription', 1, 1],
);


VIMRuntime::make_get_set('TaskDescription', 'methodInfo', 'state', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TaskFilterSpecByEntity;
our @ISA = qw(DynamicData);

our @property_list = (
   ['entity', 'ManagedObjectReference', undef, 1],
   ['recursion', 'TaskFilterSpecRecursionOption', undef, 1],
);


VIMRuntime::make_get_set('TaskFilterSpecByEntity', 'entity', 'recursion');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TaskFilterSpecByTime;
our @ISA = qw(DynamicData);

our @property_list = (
   ['timeType', 'TaskFilterSpecTimeOption', undef, 1],
   ['beginTime', undef, undef, 0],
   ['endTime', undef, undef, 0],
);


VIMRuntime::make_get_set('TaskFilterSpecByTime', 'timeType', 'beginTime', 'endTime');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TaskFilterSpecByUsername;
our @ISA = qw(DynamicData);

our @property_list = (
   ['systemUser', 'boolean', undef, 1],
   ['userList', undef, 1, 0],
);


VIMRuntime::make_get_set('TaskFilterSpecByUsername', 'systemUser', 'userList');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TaskFilterSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['entity', 'TaskFilterSpecByEntity', undef, 0],
   ['time', 'TaskFilterSpecByTime', undef, 0],
   ['userName', 'TaskFilterSpecByUsername', undef, 0],
   ['activationId', undef, 1, 0],
   ['state', 'TaskInfoState', 1, 0],
   ['alarm', 'ManagedObjectReference', undef, 0],
   ['scheduledTask', 'ManagedObjectReference', undef, 0],
   ['eventChainId', undef, 1, 0],
   ['tag', undef, 1, 0],
   ['parentTaskKey', undef, 1, 0],
   ['rootTaskKey', undef, 1, 0],
);


VIMRuntime::make_get_set('TaskFilterSpec', 'entity', 'time', 'userName', 'activationId', 'state', 'alarm', 'scheduledTask', 'eventChainId', 'tag', 'parentTaskKey', 'rootTaskKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfTaskInfoState;
our @ISA = qw(ComplexType);

our @property_list = (
   ['TaskInfoState', 'TaskInfoState', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfTaskInfoState', 'TaskInfoState');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TaskInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['task', 'ManagedObjectReference', undef, 1],
   ['description', 'LocalizableMessage', undef, 0],
   ['name', undef, undef, 0],
   ['descriptionId', undef, undef, 1],
   ['entity', 'ManagedObjectReference', undef, 0],
   ['entityName', undef, undef, 0],
   ['locked', 'ManagedObjectReference', 1, 0],
   ['state', 'TaskInfoState', undef, 1],
   ['cancelled', 'boolean', undef, 1],
   ['cancelable', 'boolean', undef, 1],
   ['error', 'LocalizedMethodFault', undef, 0],
   ['result', 'anyType', undef, 0],
   ['progress', undef, undef, 0],
   ['reason', 'TaskReason', undef, 1],
   ['queueTime', undef, undef, 1],
   ['startTime', undef, undef, 0],
   ['completeTime', undef, undef, 0],
   ['eventChainId', undef, undef, 1],
   ['changeTag', undef, undef, 0],
   ['parentTaskKey', undef, undef, 0],
   ['rootTaskKey', undef, undef, 0],
   ['activationId', undef, undef, 0],
);


VIMRuntime::make_get_set('TaskInfo', 'key', 'task', 'description', 'name', 'descriptionId', 'entity', 'entityName', 'locked', 'state', 'cancelled', 'cancelable', 'error', 'result', 'progress', 'reason', 'queueTime', 'startTime', 'completeTime', 'eventChainId', 'changeTag', 'parentTaskKey', 'rootTaskKey', 'activationId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfTaskInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['TaskInfo', 'TaskInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfTaskInfo', 'TaskInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TaskReason;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('TaskReason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TaskReasonSystem;
our @ISA = qw(TaskReason);

our @property_list = (
);


VIMRuntime::make_get_set('TaskReasonSystem');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TaskReasonUser;
our @ISA = qw(TaskReason);

our @property_list = (
   ['userName', undef, undef, 1],
);


VIMRuntime::make_get_set('TaskReasonUser', 'userName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TaskReasonAlarm;
our @ISA = qw(TaskReason);

our @property_list = (
   ['alarmName', undef, undef, 1],
   ['alarm', 'ManagedObjectReference', undef, 1],
   ['entityName', undef, undef, 1],
   ['entity', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('TaskReasonAlarm', 'alarmName', 'alarm', 'entityName', 'entity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TaskReasonSchedule;
our @ISA = qw(TaskReason);

our @property_list = (
   ['name', undef, undef, 1],
   ['scheduledTask', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('TaskReasonSchedule', 'name', 'scheduledTask');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TypeDescription;
our @ISA = qw(Description);

our @property_list = (
   ['key', undef, undef, 1],
);


VIMRuntime::make_get_set('TypeDescription', 'key');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfTypeDescription;
our @ISA = qw(ComplexType);

our @property_list = (
   ['TypeDescription', 'TypeDescription', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfTypeDescription', 'TypeDescription');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UpdateVirtualMachineFilesResultFailedVmFileInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vmFile', undef, undef, 1],
   ['fault', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('UpdateVirtualMachineFilesResultFailedVmFileInfo', 'vmFile', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['UpdateVirtualMachineFilesResultFailedVmFileInfo', 'UpdateVirtualMachineFilesResultFailedVmFileInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo', 'UpdateVirtualMachineFilesResultFailedVmFileInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UpdateVirtualMachineFilesResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['failedVmFile', 'UpdateVirtualMachineFilesResultFailedVmFileInfo', 1, 0],
);


VIMRuntime::make_get_set('UpdateVirtualMachineFilesResult', 'failedVmFile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UserSearchResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['principal', undef, undef, 1],
   ['fullName', undef, undef, 0],
   ['group', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('UserSearchResult', 'principal', 'fullName', 'group');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfUserSearchResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['UserSearchResult', 'UserSearchResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfUserSearchResult', 'UserSearchResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UserSession;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['userName', undef, undef, 1],
   ['fullName', undef, undef, 1],
   ['loginTime', undef, undef, 1],
   ['lastActiveTime', undef, undef, 1],
   ['locale', undef, undef, 1],
   ['messageLocale', undef, undef, 1],
   ['extensionSession', 'boolean', undef, 0],
   ['ipAddress', undef, undef, 0],
   ['userAgent', undef, undef, 0],
   ['callCount', undef, undef, 0],
);


VIMRuntime::make_get_set('UserSession', 'key', 'userName', 'fullName', 'loginTime', 'lastActiveTime', 'locale', 'messageLocale', 'extensionSession', 'ipAddress', 'userAgent', 'callCount');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfUserSession;
our @ISA = qw(ComplexType);

our @property_list = (
   ['UserSession', 'UserSession', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfUserSession', 'UserSession');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VrpResourceAllocationInfo;
our @ISA = qw(ResourceAllocationInfo);

our @property_list = (
   ['reservationLimit', undef, undef, 0],
);


VIMRuntime::make_get_set('VrpResourceAllocationInfo', 'reservationLimit');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualResourcePoolSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vrpId', undef, undef, 0],
   ['vrpName', undef, undef, 0],
   ['description', undef, undef, 0],
   ['cpuAllocation', 'VrpResourceAllocationInfo', undef, 1],
   ['memoryAllocation', 'VrpResourceAllocationInfo', undef, 1],
   ['rpList', 'ManagedObjectReference', 1, 0],
   ['hubList', 'ManagedObjectReference', 1, 0],
   ['rootVRP', 'boolean', undef, 0],
   ['staticVRP', 'boolean', undef, 0],
   ['changeVersion', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualResourcePoolSpec', 'vrpId', 'vrpName', 'description', 'cpuAllocation', 'memoryAllocation', 'rpList', 'hubList', 'rootVRP', 'staticVRP', 'changeVersion');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VRPEditSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vrpId', undef, undef, 1],
   ['description', undef, undef, 0],
   ['cpuAllocation', 'VrpResourceAllocationInfo', undef, 0],
   ['memoryAllocation', 'VrpResourceAllocationInfo', undef, 0],
   ['addedHubs', 'ManagedObjectReference', 1, 0],
   ['removedHubs', 'ManagedObjectReference', 1, 0],
   ['changeVersion', undef, undef, 0],
);


VIMRuntime::make_get_set('VRPEditSpec', 'vrpId', 'description', 'cpuAllocation', 'memoryAllocation', 'addedHubs', 'removedHubs', 'changeVersion');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualResourcePoolUsage;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vrpId', undef, undef, 1],
   ['cpuReservationMhz', undef, undef, 1],
   ['memReservationMB', undef, undef, 1],
   ['cpuReservationUsedMhz', undef, undef, 1],
   ['memReservationUsedMB', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualResourcePoolUsage', 'vrpId', 'cpuReservationMhz', 'memReservationMB', 'cpuReservationUsedMhz', 'memReservationUsedMB');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VVolVmConfigFileUpdateResultFailedVmConfigFileInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['targetConfigVVolId', undef, undef, 1],
   ['fault', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('VVolVmConfigFileUpdateResultFailedVmConfigFileInfo', 'targetConfigVVolId', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVVolVmConfigFileUpdateResultFailedVmConfigFileInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VVolVmConfigFileUpdateResultFailedVmConfigFileInfo', 'VVolVmConfigFileUpdateResultFailedVmConfigFileInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVVolVmConfigFileUpdateResultFailedVmConfigFileInfo', 'VVolVmConfigFileUpdateResultFailedVmConfigFileInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VVolVmConfigFileUpdateResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['succeededVmConfigFile', 'KeyValue', 1, 0],
   ['failedVmConfigFile', 'VVolVmConfigFileUpdateResultFailedVmConfigFileInfo', 1, 0],
);


VIMRuntime::make_get_set('VVolVmConfigFileUpdateResult', 'succeededVmConfigFile', 'failedVmConfigFile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VASAStorageArray;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['uuid', undef, undef, 1],
   ['vendorId', undef, undef, 1],
   ['modelId', undef, undef, 1],
);


VIMRuntime::make_get_set('VASAStorageArray', 'name', 'uuid', 'vendorId', 'modelId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVASAStorageArray;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VASAStorageArray', 'VASAStorageArray', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVASAStorageArray', 'VASAStorageArray');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VasaProviderContainerSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vasaProviderInfo', 'VimVasaProviderInfo', 1, 0],
   ['scId', undef, undef, 1],
   ['deleted', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('VasaProviderContainerSpec', 'vasaProviderInfo', 'scId', 'deleted');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VimVasaProviderStatePerArray;
our @ISA = qw(DynamicData);

our @property_list = (
   ['priority', undef, undef, 1],
   ['arrayId', undef, undef, 1],
   ['active', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('VimVasaProviderStatePerArray', 'priority', 'arrayId', 'active');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVimVasaProviderStatePerArray;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VimVasaProviderStatePerArray', 'VimVasaProviderStatePerArray', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVimVasaProviderStatePerArray', 'VimVasaProviderStatePerArray');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VimVasaProvider;
our @ISA = qw(DynamicData);

our @property_list = (
   ['url', undef, undef, 1],
   ['name', undef, undef, 0],
   ['selfSignedCertificate', undef, undef, 0],
);


VIMRuntime::make_get_set('VimVasaProvider', 'url', 'name', 'selfSignedCertificate');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VimVasaProviderInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['provider', 'VimVasaProvider', undef, 1],
   ['arrayState', 'VimVasaProviderStatePerArray', 1, 0],
);


VIMRuntime::make_get_set('VimVasaProviderInfo', 'provider', 'arrayState');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVimVasaProviderInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VimVasaProviderInfo', 'VimVasaProviderInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVimVasaProviderInfo', 'VimVasaProviderInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualAppSummary;
our @ISA = qw(ResourcePoolSummary);

our @property_list = (
   ['product', 'VAppProductInfo', undef, 0],
   ['vAppState', 'VirtualAppVAppState', undef, 0],
   ['suspended', 'boolean', undef, 0],
   ['installBootRequired', 'boolean', undef, 0],
   ['instanceUuid', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualAppSummary', 'product', 'vAppState', 'suspended', 'installBootRequired', 'instanceUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualAppLinkInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', 'ManagedObjectReference', undef, 1],
   ['destroyWithParent', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VirtualAppLinkInfo', 'key', 'destroyWithParent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualAppLinkInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualAppLinkInfo', 'VirtualAppLinkInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualAppLinkInfo', 'VirtualAppLinkInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['diskType', undef, undef, 1],
   ['adapterType', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualDiskSpec', 'diskType', 'adapterType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FileBackedVirtualDiskSpec;
our @ISA = qw(VirtualDiskSpec);

our @property_list = (
   ['capacityKb', undef, undef, 1],
   ['profile', 'VirtualMachineProfileSpec', 1, 0],
   ['crypto', 'CryptoSpec', undef, 0],
);


VIMRuntime::make_get_set('FileBackedVirtualDiskSpec', 'capacityKb', 'profile', 'crypto');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SeSparseVirtualDiskSpec;
our @ISA = qw(FileBackedVirtualDiskSpec);

our @property_list = (
   ['grainSizeKb', undef, undef, 0],
);


VIMRuntime::make_get_set('SeSparseVirtualDiskSpec', 'grainSizeKb');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DeviceBackedVirtualDiskSpec;
our @ISA = qw(VirtualDiskSpec);

our @property_list = (
   ['device', undef, undef, 1],
);


VIMRuntime::make_get_set('DeviceBackedVirtualDiskSpec', 'device');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageRequirement;
our @ISA = qw(DynamicData);

our @property_list = (
   ['datastore', 'ManagedObjectReference', undef, 1],
   ['freeSpaceRequiredInKb', undef, undef, 1],
);


VIMRuntime::make_get_set('StorageRequirement', 'datastore', 'freeSpaceRequiredInKb');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfStorageRequirement;
our @ISA = qw(ComplexType);

our @property_list = (
   ['StorageRequirement', 'StorageRequirement', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfStorageRequirement', 'StorageRequirement');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineTicket;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ticket', undef, undef, 1],
   ['cfgFile', undef, undef, 1],
   ['host', undef, undef, 0],
   ['port', undef, undef, 0],
   ['sslThumbprint', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineTicket', 'ticket', 'cfgFile', 'host', 'port', 'sslThumbprint');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineMksTicket;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ticket', undef, undef, 1],
   ['cfgFile', undef, undef, 1],
   ['host', undef, undef, 0],
   ['port', undef, undef, 0],
   ['sslThumbprint', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineMksTicket', 'ticket', 'cfgFile', 'host', 'port', 'sslThumbprint');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineDisplayTopology;
our @ISA = qw(DynamicData);

our @property_list = (
   ['x', undef, undef, 1],
   ['y', undef, undef, 1],
   ['width', undef, undef, 1],
   ['height', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualMachineDisplayTopology', 'x', 'y', 'width', 'height');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineDisplayTopology;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineDisplayTopology', 'VirtualMachineDisplayTopology', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineDisplayTopology', 'VirtualMachineDisplayTopology');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DiskChangeExtent;
our @ISA = qw(DynamicData);

our @property_list = (
   ['start', undef, undef, 1],
   ['length', undef, undef, 1],
);


VIMRuntime::make_get_set('DiskChangeExtent', 'start', 'length');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDiskChangeExtent;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DiskChangeExtent', 'DiskChangeExtent', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDiskChangeExtent', 'DiskChangeExtent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DiskChangeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['startOffset', undef, undef, 1],
   ['length', undef, undef, 1],
   ['changedArea', 'DiskChangeExtent', 1, 0],
);


VIMRuntime::make_get_set('DiskChangeInfo', 'startOffset', 'length', 'changedArea');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineWipeResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['diskId', undef, undef, 1],
   ['shrinkableDiskSpace', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualMachineWipeResult', 'diskId', 'shrinkableDiskSpace');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanUpgradeSystemPreflightCheckIssue;
our @ISA = qw(DynamicData);

our @property_list = (
   ['msg', undef, undef, 1],
);


VIMRuntime::make_get_set('VsanUpgradeSystemPreflightCheckIssue', 'msg');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVsanUpgradeSystemPreflightCheckIssue;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VsanUpgradeSystemPreflightCheckIssue', 'VsanUpgradeSystemPreflightCheckIssue', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVsanUpgradeSystemPreflightCheckIssue', 'VsanUpgradeSystemPreflightCheckIssue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanUpgradeSystemHostsDisconnectedIssue;
our @ISA = qw(VsanUpgradeSystemPreflightCheckIssue);

our @property_list = (
   ['hosts', 'ManagedObjectReference', 1, 1],
);


VIMRuntime::make_get_set('VsanUpgradeSystemHostsDisconnectedIssue', 'hosts');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanUpgradeSystemMissingHostsInClusterIssue;
our @ISA = qw(VsanUpgradeSystemPreflightCheckIssue);

our @property_list = (
   ['hosts', 'ManagedObjectReference', 1, 1],
);


VIMRuntime::make_get_set('VsanUpgradeSystemMissingHostsInClusterIssue', 'hosts');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanUpgradeSystemRogueHostsInClusterIssue;
our @ISA = qw(VsanUpgradeSystemPreflightCheckIssue);

our @property_list = (
   ['uuids', undef, 1, 1],
);


VIMRuntime::make_get_set('VsanUpgradeSystemRogueHostsInClusterIssue', 'uuids');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanUpgradeSystemWrongEsxVersionIssue;
our @ISA = qw(VsanUpgradeSystemPreflightCheckIssue);

our @property_list = (
   ['hosts', 'ManagedObjectReference', 1, 1],
);


VIMRuntime::make_get_set('VsanUpgradeSystemWrongEsxVersionIssue', 'hosts');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanUpgradeSystemAutoClaimEnabledOnHostsIssue;
our @ISA = qw(VsanUpgradeSystemPreflightCheckIssue);

our @property_list = (
   ['hosts', 'ManagedObjectReference', 1, 1],
);


VIMRuntime::make_get_set('VsanUpgradeSystemAutoClaimEnabledOnHostsIssue', 'hosts');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanUpgradeSystemAPIBrokenIssue;
our @ISA = qw(VsanUpgradeSystemPreflightCheckIssue);

our @property_list = (
   ['hosts', 'ManagedObjectReference', 1, 1],
);


VIMRuntime::make_get_set('VsanUpgradeSystemAPIBrokenIssue', 'hosts');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue;
our @ISA = qw(VsanUpgradeSystemPreflightCheckIssue);

our @property_list = (
   ['uuids', undef, 1, 1],
);


VIMRuntime::make_get_set('VsanUpgradeSystemV2ObjectsPresentDuringDowngradeIssue', 'uuids');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanUpgradeSystemNotEnoughFreeCapacityIssue;
our @ISA = qw(VsanUpgradeSystemPreflightCheckIssue);

our @property_list = (
   ['reducedRedundancyUpgradePossible', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('VsanUpgradeSystemNotEnoughFreeCapacityIssue', 'reducedRedundancyUpgradePossible');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanUpgradeSystemNetworkPartitionInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['hosts', 'ManagedObjectReference', 1, 1],
);


VIMRuntime::make_get_set('VsanUpgradeSystemNetworkPartitionInfo', 'hosts');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVsanUpgradeSystemNetworkPartitionInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VsanUpgradeSystemNetworkPartitionInfo', 'VsanUpgradeSystemNetworkPartitionInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVsanUpgradeSystemNetworkPartitionInfo', 'VsanUpgradeSystemNetworkPartitionInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanUpgradeSystemNetworkPartitionIssue;
our @ISA = qw(VsanUpgradeSystemPreflightCheckIssue);

our @property_list = (
   ['partitions', 'VsanUpgradeSystemNetworkPartitionInfo', 1, 1],
);


VIMRuntime::make_get_set('VsanUpgradeSystemNetworkPartitionIssue', 'partitions');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanUpgradeSystemPreflightCheckResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['issues', 'VsanUpgradeSystemPreflightCheckIssue', 1, 0],
   ['diskMappingToRestore', 'VsanHostDiskMapping', undef, 0],
);


VIMRuntime::make_get_set('VsanUpgradeSystemPreflightCheckResult', 'issues', 'diskMappingToRestore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanUpgradeSystemUpgradeHistoryItem;
our @ISA = qw(DynamicData);

our @property_list = (
   ['timestamp', undef, undef, 1],
   ['host', 'ManagedObjectReference', undef, 0],
   ['message', undef, undef, 1],
   ['task', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('VsanUpgradeSystemUpgradeHistoryItem', 'timestamp', 'host', 'message', 'task');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVsanUpgradeSystemUpgradeHistoryItem;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VsanUpgradeSystemUpgradeHistoryItem', 'VsanUpgradeSystemUpgradeHistoryItem', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVsanUpgradeSystemUpgradeHistoryItem', 'VsanUpgradeSystemUpgradeHistoryItem');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanUpgradeSystemUpgradeHistoryDiskGroupOp;
our @ISA = qw(VsanUpgradeSystemUpgradeHistoryItem);

our @property_list = (
   ['operation', undef, undef, 1],
   ['diskMapping', 'VsanHostDiskMapping', undef, 1],
);


VIMRuntime::make_get_set('VsanUpgradeSystemUpgradeHistoryDiskGroupOp', 'operation', 'diskMapping');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanUpgradeSystemUpgradeHistoryPreflightFail;
our @ISA = qw(VsanUpgradeSystemUpgradeHistoryItem);

our @property_list = (
   ['preflightResult', 'VsanUpgradeSystemPreflightCheckResult', undef, 1],
);


VIMRuntime::make_get_set('VsanUpgradeSystemUpgradeHistoryPreflightFail', 'preflightResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanUpgradeSystemUpgradeStatus;
our @ISA = qw(DynamicData);

our @property_list = (
   ['inProgress', 'boolean', undef, 1],
   ['history', 'VsanUpgradeSystemUpgradeHistoryItem', 1, 0],
   ['aborted', 'boolean', undef, 0],
   ['completed', 'boolean', undef, 0],
   ['progress', undef, undef, 0],
);


VIMRuntime::make_get_set('VsanUpgradeSystemUpgradeStatus', 'inProgress', 'history', 'aborted', 'completed', 'progress');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package Action;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('Action');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MethodActionArgument;
our @ISA = qw(DynamicData);

our @property_list = (
   ['value', 'anyType', undef, 0],
);


VIMRuntime::make_get_set('MethodActionArgument', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfMethodActionArgument;
our @ISA = qw(ComplexType);

our @property_list = (
   ['MethodActionArgument', 'MethodActionArgument', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfMethodActionArgument', 'MethodActionArgument');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MethodAction;
our @ISA = qw(Action);

our @property_list = (
   ['name', undef, undef, 1],
   ['argument', 'MethodActionArgument', 1, 0],
);


VIMRuntime::make_get_set('MethodAction', 'name', 'argument');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SendEmailAction;
our @ISA = qw(Action);

our @property_list = (
   ['toList', undef, undef, 1],
   ['ccList', undef, undef, 1],
   ['subject', undef, undef, 1],
   ['body', undef, undef, 1],
);


VIMRuntime::make_get_set('SendEmailAction', 'toList', 'ccList', 'subject', 'body');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SendSNMPAction;
our @ISA = qw(Action);

our @property_list = (
);


VIMRuntime::make_get_set('SendSNMPAction');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RunScriptAction;
our @ISA = qw(Action);

our @property_list = (
   ['script', undef, undef, 1],
);


VIMRuntime::make_get_set('RunScriptAction', 'script');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CreateTaskAction;
our @ISA = qw(Action);

our @property_list = (
   ['taskTypeId', undef, undef, 1],
   ['cancelable', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('CreateTaskAction', 'taskTypeId', 'cancelable');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmAction;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('AlarmAction');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfAlarmAction;
our @ISA = qw(ComplexType);

our @property_list = (
   ['AlarmAction', 'AlarmAction', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfAlarmAction', 'AlarmAction');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmTriggeringActionTransitionSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['startState', 'ManagedEntityStatus', undef, 1],
   ['finalState', 'ManagedEntityStatus', undef, 1],
   ['repeats', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('AlarmTriggeringActionTransitionSpec', 'startState', 'finalState', 'repeats');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfAlarmTriggeringActionTransitionSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['AlarmTriggeringActionTransitionSpec', 'AlarmTriggeringActionTransitionSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfAlarmTriggeringActionTransitionSpec', 'AlarmTriggeringActionTransitionSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmTriggeringAction;
our @ISA = qw(AlarmAction);

our @property_list = (
   ['action', 'Action', undef, 1],
   ['transitionSpecs', 'AlarmTriggeringActionTransitionSpec', 1, 0],
   ['green2yellow', 'boolean', undef, 1],
   ['yellow2red', 'boolean', undef, 1],
   ['red2yellow', 'boolean', undef, 1],
   ['yellow2green', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('AlarmTriggeringAction', 'action', 'transitionSpecs', 'green2yellow', 'yellow2red', 'red2yellow', 'yellow2green');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GroupAlarmAction;
our @ISA = qw(AlarmAction);

our @property_list = (
   ['action', 'AlarmAction', 1, 1],
);


VIMRuntime::make_get_set('GroupAlarmAction', 'action');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmDescription;
our @ISA = qw(DynamicData);

our @property_list = (
   ['expr', 'TypeDescription', 1, 1],
   ['stateOperator', 'ElementDescription', 1, 1],
   ['metricOperator', 'ElementDescription', 1, 1],
   ['hostSystemConnectionState', 'ElementDescription', 1, 1],
   ['virtualMachinePowerState', 'ElementDescription', 1, 1],
   ['datastoreConnectionState', 'ElementDescription', 1, 0],
   ['hostSystemPowerState', 'ElementDescription', 1, 0],
   ['virtualMachineGuestHeartbeatStatus', 'ElementDescription', 1, 0],
   ['entityStatus', 'ElementDescription', 1, 1],
   ['action', 'TypeDescription', 1, 1],
);


VIMRuntime::make_get_set('AlarmDescription', 'expr', 'stateOperator', 'metricOperator', 'hostSystemConnectionState', 'virtualMachinePowerState', 'datastoreConnectionState', 'hostSystemPowerState', 'virtualMachineGuestHeartbeatStatus', 'entityStatus', 'action');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmExpression;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('AlarmExpression');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfAlarmExpression;
our @ISA = qw(ComplexType);

our @property_list = (
   ['AlarmExpression', 'AlarmExpression', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfAlarmExpression', 'AlarmExpression');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AndAlarmExpression;
our @ISA = qw(AlarmExpression);

our @property_list = (
   ['expression', 'AlarmExpression', 1, 1],
);


VIMRuntime::make_get_set('AndAlarmExpression', 'expression');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OrAlarmExpression;
our @ISA = qw(AlarmExpression);

our @property_list = (
   ['expression', 'AlarmExpression', 1, 1],
);


VIMRuntime::make_get_set('OrAlarmExpression', 'expression');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StateAlarmExpression;
our @ISA = qw(AlarmExpression);

our @property_list = (
   ['operator', 'StateAlarmOperator', undef, 1],
   ['type', undef, undef, 1],
   ['statePath', undef, undef, 1],
   ['yellow', undef, undef, 0],
   ['red', undef, undef, 0],
);


VIMRuntime::make_get_set('StateAlarmExpression', 'operator', 'type', 'statePath', 'yellow', 'red');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EventAlarmExpressionComparison;
our @ISA = qw(DynamicData);

our @property_list = (
   ['attributeName', undef, undef, 1],
   ['operator', undef, undef, 1],
   ['value', undef, undef, 1],
);


VIMRuntime::make_get_set('EventAlarmExpressionComparison', 'attributeName', 'operator', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfEventAlarmExpressionComparison;
our @ISA = qw(ComplexType);

our @property_list = (
   ['EventAlarmExpressionComparison', 'EventAlarmExpressionComparison', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfEventAlarmExpressionComparison', 'EventAlarmExpressionComparison');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EventAlarmExpression;
our @ISA = qw(AlarmExpression);

our @property_list = (
   ['comparisons', 'EventAlarmExpressionComparison', 1, 0],
   ['eventType', undef, undef, 1],
   ['eventTypeId', undef, undef, 0],
   ['objectType', undef, undef, 0],
   ['status', 'ManagedEntityStatus', undef, 0],
);


VIMRuntime::make_get_set('EventAlarmExpression', 'comparisons', 'eventType', 'eventTypeId', 'objectType', 'status');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MetricAlarmExpression;
our @ISA = qw(AlarmExpression);

our @property_list = (
   ['operator', 'MetricAlarmOperator', undef, 1],
   ['type', undef, undef, 1],
   ['metric', 'PerfMetricId', undef, 1],
   ['yellow', undef, undef, 0],
   ['yellowInterval', undef, undef, 0],
   ['red', undef, undef, 0],
   ['redInterval', undef, undef, 0],
);


VIMRuntime::make_get_set('MetricAlarmExpression', 'operator', 'type', 'metric', 'yellow', 'yellowInterval', 'red', 'redInterval');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmInfo;
our @ISA = qw(AlarmSpec);

our @property_list = (
   ['key', undef, undef, 1],
   ['alarm', 'ManagedObjectReference', undef, 1],
   ['entity', 'ManagedObjectReference', undef, 1],
   ['lastModifiedTime', undef, undef, 1],
   ['lastModifiedUser', undef, undef, 1],
   ['creationEventId', undef, undef, 1],
);


VIMRuntime::make_get_set('AlarmInfo', 'key', 'alarm', 'entity', 'lastModifiedTime', 'lastModifiedUser', 'creationEventId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmSetting;
our @ISA = qw(DynamicData);

our @property_list = (
   ['toleranceRange', undef, undef, 1],
   ['reportingFrequency', undef, undef, 1],
);


VIMRuntime::make_get_set('AlarmSetting', 'toleranceRange', 'reportingFrequency');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['systemName', undef, undef, 0],
   ['description', undef, undef, 1],
   ['enabled', 'boolean', undef, 1],
   ['expression', 'AlarmExpression', undef, 1],
   ['action', 'AlarmAction', undef, 0],
   ['actionFrequency', undef, undef, 0],
   ['setting', 'AlarmSetting', undef, 0],
);


VIMRuntime::make_get_set('AlarmSpec', 'name', 'systemName', 'description', 'enabled', 'expression', 'action', 'actionFrequency', 'setting');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmState;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['entity', 'ManagedObjectReference', undef, 1],
   ['alarm', 'ManagedObjectReference', undef, 1],
   ['overallStatus', 'ManagedEntityStatus', undef, 1],
   ['time', undef, undef, 1],
   ['acknowledged', 'boolean', undef, 0],
   ['acknowledgedByUser', undef, undef, 0],
   ['acknowledgedTime', undef, undef, 0],
   ['eventKey', undef, undef, 0],
);


VIMRuntime::make_get_set('AlarmState', 'key', 'entity', 'alarm', 'overallStatus', 'time', 'acknowledged', 'acknowledgedByUser', 'acknowledgedTime', 'eventKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfAlarmState;
our @ISA = qw(ComplexType);

our @property_list = (
   ['AlarmState', 'AlarmState', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfAlarmState', 'AlarmState');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterAction;
our @ISA = qw(DynamicData);

our @property_list = (
   ['type', undef, undef, 1],
   ['target', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('ClusterAction', 'type', 'target');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterAction;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterAction', 'ClusterAction', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterAction', 'ClusterAction');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterActionHistory;
our @ISA = qw(DynamicData);

our @property_list = (
   ['action', 'ClusterAction', undef, 1],
   ['time', undef, undef, 1],
);


VIMRuntime::make_get_set('ClusterActionHistory', 'action', 'time');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterActionHistory;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterActionHistory', 'ClusterActionHistory', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterActionHistory', 'ClusterActionHistory');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterAffinityRuleSpec;
our @ISA = qw(ClusterRuleInfo);

our @property_list = (
   ['vm', 'ManagedObjectReference', 1, 1],
);


VIMRuntime::make_get_set('ClusterAffinityRuleSpec', 'vm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterAntiAffinityRuleSpec;
our @ISA = qw(ClusterRuleInfo);

our @property_list = (
   ['vm', 'ManagedObjectReference', 1, 1],
);


VIMRuntime::make_get_set('ClusterAntiAffinityRuleSpec', 'vm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterAttemptedVmInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 1],
   ['task', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('ClusterAttemptedVmInfo', 'vm', 'task');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterAttemptedVmInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterAttemptedVmInfo', 'ClusterAttemptedVmInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterAttemptedVmInfo', 'ClusterAttemptedVmInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['dasConfig', 'ClusterDasConfigInfo', undef, 1],
   ['dasVmConfig', 'ClusterDasVmConfigInfo', 1, 0],
   ['drsConfig', 'ClusterDrsConfigInfo', undef, 1],
   ['drsVmConfig', 'ClusterDrsVmConfigInfo', 1, 0],
   ['rule', 'ClusterRuleInfo', 1, 0],
);


VIMRuntime::make_get_set('ClusterConfigInfo', 'dasConfig', 'dasVmConfig', 'drsConfig', 'drsVmConfig', 'rule');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDrsConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['enabled', 'boolean', undef, 0],
   ['enableVmBehaviorOverrides', 'boolean', undef, 0],
   ['defaultVmBehavior', 'DrsBehavior', undef, 0],
   ['vmotionRate', undef, undef, 0],
   ['option', 'OptionValue', 1, 0],
);


VIMRuntime::make_get_set('ClusterDrsConfigInfo', 'enabled', 'enableVmBehaviorOverrides', 'defaultVmBehavior', 'vmotionRate', 'option');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDrsVmConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', 'ManagedObjectReference', undef, 1],
   ['enabled', 'boolean', undef, 0],
   ['behavior', 'DrsBehavior', undef, 0],
);


VIMRuntime::make_get_set('ClusterDrsVmConfigInfo', 'key', 'enabled', 'behavior');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterDrsVmConfigInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterDrsVmConfigInfo', 'ClusterDrsVmConfigInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterDrsVmConfigInfo', 'ClusterDrsVmConfigInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterConfigInfoEx;
our @ISA = qw(ComputeResourceConfigInfo);

our @property_list = (
   ['dasConfig', 'ClusterDasConfigInfo', undef, 1],
   ['dasVmConfig', 'ClusterDasVmConfigInfo', 1, 0],
   ['drsConfig', 'ClusterDrsConfigInfo', undef, 1],
   ['drsVmConfig', 'ClusterDrsVmConfigInfo', 1, 0],
   ['rule', 'ClusterRuleInfo', 1, 0],
   ['orchestration', 'ClusterOrchestrationInfo', undef, 0],
   ['vmOrchestration', 'ClusterVmOrchestrationInfo', 1, 0],
   ['dpmConfigInfo', 'ClusterDpmConfigInfo', undef, 0],
   ['dpmHostConfig', 'ClusterDpmHostConfigInfo', 1, 0],
   ['vsanConfigInfo', 'VsanClusterConfigInfo', undef, 0],
   ['vsanHostConfig', 'VsanHostConfigInfo', 1, 0],
   ['group', 'ClusterGroupInfo', 1, 0],
   ['infraUpdateHaConfig', 'ClusterInfraUpdateHaConfigInfo', undef, 0],
   ['proactiveDrsConfig', 'ClusterProactiveDrsConfigInfo', undef, 0],
);


VIMRuntime::make_get_set('ClusterConfigInfoEx', 'dasConfig', 'dasVmConfig', 'drsConfig', 'drsVmConfig', 'rule', 'orchestration', 'vmOrchestration', 'dpmConfigInfo', 'dpmHostConfig', 'vsanConfigInfo', 'vsanHostConfig', 'group', 'infraUpdateHaConfig', 'proactiveDrsConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDpmConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['enabled', 'boolean', undef, 0],
   ['defaultDpmBehavior', 'DpmBehavior', undef, 0],
   ['hostPowerActionRate', undef, undef, 0],
   ['option', 'OptionValue', 1, 0],
);


VIMRuntime::make_get_set('ClusterDpmConfigInfo', 'enabled', 'defaultDpmBehavior', 'hostPowerActionRate', 'option');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDpmHostConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', 'ManagedObjectReference', undef, 1],
   ['enabled', 'boolean', undef, 0],
   ['behavior', 'DpmBehavior', undef, 0],
);


VIMRuntime::make_get_set('ClusterDpmHostConfigInfo', 'key', 'enabled', 'behavior');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterDpmHostConfigInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterDpmHostConfigInfo', 'ClusterDpmHostConfigInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterDpmHostConfigInfo', 'ClusterDpmHostConfigInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterInfraUpdateHaConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['enabled', 'boolean', undef, 0],
   ['behavior', undef, undef, 0],
   ['moderateRemediation', undef, undef, 0],
   ['severeRemediation', undef, undef, 0],
   ['providers', undef, 1, 0],
);


VIMRuntime::make_get_set('ClusterInfraUpdateHaConfigInfo', 'enabled', 'behavior', 'moderateRemediation', 'severeRemediation', 'providers');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterProactiveDrsConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['enabled', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('ClusterProactiveDrsConfigInfo', 'enabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['dasConfig', 'ClusterDasConfigInfo', undef, 0],
   ['dasVmConfigSpec', 'ClusterDasVmConfigSpec', 1, 0],
   ['drsConfig', 'ClusterDrsConfigInfo', undef, 0],
   ['drsVmConfigSpec', 'ClusterDrsVmConfigSpec', 1, 0],
   ['rulesSpec', 'ClusterRuleSpec', 1, 0],
);


VIMRuntime::make_get_set('ClusterConfigSpec', 'dasConfig', 'dasVmConfigSpec', 'drsConfig', 'drsVmConfigSpec', 'rulesSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDasVmConfigSpec;
our @ISA = qw(ArrayUpdateSpec);

our @property_list = (
   ['info', 'ClusterDasVmConfigInfo', undef, 0],
);


VIMRuntime::make_get_set('ClusterDasVmConfigSpec', 'info');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterDasVmConfigSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterDasVmConfigSpec', 'ClusterDasVmConfigSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterDasVmConfigSpec', 'ClusterDasVmConfigSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDrsVmConfigSpec;
our @ISA = qw(ArrayUpdateSpec);

our @property_list = (
   ['info', 'ClusterDrsVmConfigInfo', undef, 0],
);


VIMRuntime::make_get_set('ClusterDrsVmConfigSpec', 'info');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterDrsVmConfigSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterDrsVmConfigSpec', 'ClusterDrsVmConfigSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterDrsVmConfigSpec', 'ClusterDrsVmConfigSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterConfigSpecEx;
our @ISA = qw(ComputeResourceConfigSpec);

our @property_list = (
   ['dasConfig', 'ClusterDasConfigInfo', undef, 0],
   ['dasVmConfigSpec', 'ClusterDasVmConfigSpec', 1, 0],
   ['drsConfig', 'ClusterDrsConfigInfo', undef, 0],
   ['drsVmConfigSpec', 'ClusterDrsVmConfigSpec', 1, 0],
   ['rulesSpec', 'ClusterRuleSpec', 1, 0],
   ['orchestration', 'ClusterOrchestrationInfo', undef, 0],
   ['vmOrchestrationSpec', 'ClusterVmOrchestrationSpec', 1, 0],
   ['dpmConfig', 'ClusterDpmConfigInfo', undef, 0],
   ['dpmHostConfigSpec', 'ClusterDpmHostConfigSpec', 1, 0],
   ['vsanConfig', 'VsanClusterConfigInfo', undef, 0],
   ['vsanHostConfigSpec', 'VsanHostConfigInfo', 1, 0],
   ['groupSpec', 'ClusterGroupSpec', 1, 0],
   ['infraUpdateHaConfig', 'ClusterInfraUpdateHaConfigInfo', undef, 0],
   ['proactiveDrsConfig', 'ClusterProactiveDrsConfigInfo', undef, 0],
);


VIMRuntime::make_get_set('ClusterConfigSpecEx', 'dasConfig', 'dasVmConfigSpec', 'drsConfig', 'drsVmConfigSpec', 'rulesSpec', 'orchestration', 'vmOrchestrationSpec', 'dpmConfig', 'dpmHostConfigSpec', 'vsanConfig', 'vsanHostConfigSpec', 'groupSpec', 'infraUpdateHaConfig', 'proactiveDrsConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDpmHostConfigSpec;
our @ISA = qw(ArrayUpdateSpec);

our @property_list = (
   ['info', 'ClusterDpmHostConfigInfo', undef, 0],
);


VIMRuntime::make_get_set('ClusterDpmHostConfigSpec', 'info');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterDpmHostConfigSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterDpmHostConfigSpec', 'ClusterDpmHostConfigSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterDpmHostConfigSpec', 'ClusterDpmHostConfigSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterGroupSpec;
our @ISA = qw(ArrayUpdateSpec);

our @property_list = (
   ['info', 'ClusterGroupInfo', undef, 0],
);


VIMRuntime::make_get_set('ClusterGroupSpec', 'info');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterGroupSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterGroupSpec', 'ClusterGroupSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterGroupSpec', 'ClusterGroupSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterVmOrchestrationSpec;
our @ISA = qw(ArrayUpdateSpec);

our @property_list = (
   ['info', 'ClusterVmOrchestrationInfo', undef, 0],
);


VIMRuntime::make_get_set('ClusterVmOrchestrationSpec', 'info');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterVmOrchestrationSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterVmOrchestrationSpec', 'ClusterVmOrchestrationSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterVmOrchestrationSpec', 'ClusterVmOrchestrationSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDasAamHostInfo;
our @ISA = qw(ClusterDasHostInfo);

our @property_list = (
   ['hostDasState', 'ClusterDasAamNodeState', 1, 0],
   ['primaryHosts', undef, 1, 0],
);


VIMRuntime::make_get_set('ClusterDasAamHostInfo', 'hostDasState', 'primaryHosts');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDasAamNodeState;
our @ISA = qw(DynamicData);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
   ['name', undef, undef, 1],
   ['configState', undef, undef, 1],
   ['runtimeState', undef, undef, 1],
);


VIMRuntime::make_get_set('ClusterDasAamNodeState', 'host', 'name', 'configState', 'runtimeState');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterDasAamNodeState;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterDasAamNodeState', 'ClusterDasAamNodeState', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterDasAamNodeState', 'ClusterDasAamNodeState');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDasAdmissionControlInfo;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('ClusterDasAdmissionControlInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDasAdmissionControlPolicy;
our @ISA = qw(DynamicData);

our @property_list = (
   ['resourceReductionToToleratePercent', undef, undef, 0],
);


VIMRuntime::make_get_set('ClusterDasAdmissionControlPolicy', 'resourceReductionToToleratePercent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['storageAPDSupported', 'boolean', undef, 1],
   ['storagePDLSupported', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('ClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo', 'storageAPDSupported', 'storagePDLSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DasHeartbeatDatastoreInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['datastore', 'ManagedObjectReference', undef, 1],
   ['hosts', 'ManagedObjectReference', 1, 1],
);


VIMRuntime::make_get_set('DasHeartbeatDatastoreInfo', 'datastore', 'hosts');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDasHeartbeatDatastoreInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DasHeartbeatDatastoreInfo', 'DasHeartbeatDatastoreInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDasHeartbeatDatastoreInfo', 'DasHeartbeatDatastoreInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDasAdvancedRuntimeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['dasHostInfo', 'ClusterDasHostInfo', undef, 0],
   ['vmcpSupported', 'ClusterDasAdvancedRuntimeInfoVmcpCapabilityInfo', undef, 0],
   ['heartbeatDatastoreInfo', 'DasHeartbeatDatastoreInfo', 1, 0],
);


VIMRuntime::make_get_set('ClusterDasAdvancedRuntimeInfo', 'dasHostInfo', 'vmcpSupported', 'heartbeatDatastoreInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDasConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['enabled', 'boolean', undef, 0],
   ['vmMonitoring', undef, undef, 0],
   ['hostMonitoring', undef, undef, 0],
   ['vmComponentProtecting', undef, undef, 0],
   ['failoverLevel', undef, undef, 0],
   ['admissionControlPolicy', 'ClusterDasAdmissionControlPolicy', undef, 0],
   ['admissionControlEnabled', 'boolean', undef, 0],
   ['defaultVmSettings', 'ClusterDasVmSettings', undef, 0],
   ['option', 'OptionValue', 1, 0],
   ['heartbeatDatastore', 'ManagedObjectReference', 1, 0],
   ['hBDatastoreCandidatePolicy', undef, undef, 0],
);


VIMRuntime::make_get_set('ClusterDasConfigInfo', 'enabled', 'vmMonitoring', 'hostMonitoring', 'vmComponentProtecting', 'failoverLevel', 'admissionControlPolicy', 'admissionControlEnabled', 'defaultVmSettings', 'option', 'heartbeatDatastore', 'hBDatastoreCandidatePolicy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDasData;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('ClusterDasData');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDasDataSummary;
our @ISA = qw(ClusterDasData);

our @property_list = (
   ['hostListVersion', undef, undef, 1],
   ['clusterConfigVersion', undef, undef, 1],
   ['compatListVersion', undef, undef, 1],
);


VIMRuntime::make_get_set('ClusterDasDataSummary', 'hostListVersion', 'clusterConfigVersion', 'compatListVersion');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['numVcpus', undef, undef, 1],
   ['cpuMHz', undef, undef, 1],
   ['memoryMB', undef, undef, 1],
);


VIMRuntime::make_get_set('ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo', 'numVcpus', 'cpuMHz', 'memoryMB');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots;
our @ISA = qw(DynamicData);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
   ['slots', undef, undef, 1],
);


VIMRuntime::make_get_set('ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots', 'host', 'slots');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots', 'ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots', 'ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 1],
   ['slots', undef, undef, 1],
);


VIMRuntime::make_get_set('ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots', 'vm', 'slots');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots', 'ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots', 'ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDasFailoverLevelAdvancedRuntimeInfo;
our @ISA = qw(ClusterDasAdvancedRuntimeInfo);

our @property_list = (
   ['slotInfo', 'ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo', undef, 1],
   ['totalSlots', undef, undef, 1],
   ['usedSlots', undef, undef, 1],
   ['unreservedSlots', undef, undef, 1],
   ['totalVms', undef, undef, 1],
   ['totalHosts', undef, undef, 1],
   ['totalGoodHosts', undef, undef, 1],
   ['hostSlots', 'ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots', 1, 0],
   ['vmsRequiringMultipleSlots', 'ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots', 1, 0],
);


VIMRuntime::make_get_set('ClusterDasFailoverLevelAdvancedRuntimeInfo', 'slotInfo', 'totalSlots', 'usedSlots', 'unreservedSlots', 'totalVms', 'totalHosts', 'totalGoodHosts', 'hostSlots', 'vmsRequiringMultipleSlots');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDasFdmHostState;
our @ISA = qw(DynamicData);

our @property_list = (
   ['state', undef, undef, 1],
   ['stateReporter', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('ClusterDasFdmHostState', 'state', 'stateReporter');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDasHostInfo;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('ClusterDasHostInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDasHostRecommendation;
our @ISA = qw(DynamicData);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
   ['drsRating', undef, undef, 0],
);


VIMRuntime::make_get_set('ClusterDasHostRecommendation', 'host', 'drsRating');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDasVmConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', 'ManagedObjectReference', undef, 1],
   ['restartPriority', 'DasVmPriority', undef, 0],
   ['powerOffOnIsolation', 'boolean', undef, 0],
   ['dasSettings', 'ClusterDasVmSettings', undef, 0],
);


VIMRuntime::make_get_set('ClusterDasVmConfigInfo', 'key', 'restartPriority', 'powerOffOnIsolation', 'dasSettings');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterDasVmConfigInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterDasVmConfigInfo', 'ClusterDasVmConfigInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterDasVmConfigInfo', 'ClusterDasVmConfigInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDasVmSettings;
our @ISA = qw(DynamicData);

our @property_list = (
   ['restartPriority', undef, undef, 0],
   ['restartPriorityTimeout', undef, undef, 0],
   ['isolationResponse', undef, undef, 0],
   ['vmToolsMonitoringSettings', 'ClusterVmToolsMonitoringSettings', undef, 0],
   ['vmComponentProtectionSettings', 'ClusterVmComponentProtectionSettings', undef, 0],
);


VIMRuntime::make_get_set('ClusterDasVmSettings', 'restartPriority', 'restartPriorityTimeout', 'isolationResponse', 'vmToolsMonitoringSettings', 'vmComponentProtectionSettings');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDependencyRuleInfo;
our @ISA = qw(ClusterRuleInfo);

our @property_list = (
   ['vmGroup', undef, undef, 1],
   ['dependsOnVmGroup', undef, undef, 1],
);


VIMRuntime::make_get_set('ClusterDependencyRuleInfo', 'vmGroup', 'dependsOnVmGroup');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDrsFaultsFaultsByVm;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 0],
   ['fault', 'LocalizedMethodFault', 1, 1],
);


VIMRuntime::make_get_set('ClusterDrsFaultsFaultsByVm', 'vm', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterDrsFaultsFaultsByVm;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterDrsFaultsFaultsByVm', 'ClusterDrsFaultsFaultsByVm', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterDrsFaultsFaultsByVm', 'ClusterDrsFaultsFaultsByVm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDrsFaultsFaultsByVirtualDisk;
our @ISA = qw(ClusterDrsFaultsFaultsByVm);

our @property_list = (
   ['disk', 'VirtualDiskId', undef, 0],
);


VIMRuntime::make_get_set('ClusterDrsFaultsFaultsByVirtualDisk', 'disk');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDrsFaults;
our @ISA = qw(DynamicData);

our @property_list = (
   ['reason', undef, undef, 1],
   ['faultsByVm', 'ClusterDrsFaultsFaultsByVm', 1, 1],
);


VIMRuntime::make_get_set('ClusterDrsFaults', 'reason', 'faultsByVm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterDrsFaults;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterDrsFaults', 'ClusterDrsFaults', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterDrsFaults', 'ClusterDrsFaults');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDrsMigration;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['time', undef, undef, 1],
   ['vm', 'ManagedObjectReference', undef, 1],
   ['cpuLoad', undef, undef, 0],
   ['memoryLoad', undef, undef, 0],
   ['source', 'ManagedObjectReference', undef, 1],
   ['sourceCpuLoad', undef, undef, 0],
   ['sourceMemoryLoad', undef, undef, 0],
   ['destination', 'ManagedObjectReference', undef, 1],
   ['destinationCpuLoad', undef, undef, 0],
   ['destinationMemoryLoad', undef, undef, 0],
);


VIMRuntime::make_get_set('ClusterDrsMigration', 'key', 'time', 'vm', 'cpuLoad', 'memoryLoad', 'source', 'sourceCpuLoad', 'sourceMemoryLoad', 'destination', 'destinationCpuLoad', 'destinationMemoryLoad');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterDrsMigration;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterDrsMigration', 'ClusterDrsMigration', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterDrsMigration', 'ClusterDrsMigration');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDrsRecommendation;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['rating', undef, undef, 1],
   ['reason', undef, undef, 1],
   ['reasonText', undef, undef, 1],
   ['migrationList', 'ClusterDrsMigration', 1, 1],
);


VIMRuntime::make_get_set('ClusterDrsRecommendation', 'key', 'rating', 'reason', 'reasonText', 'migrationList');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterDrsRecommendation;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterDrsRecommendation', 'ClusterDrsRecommendation', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterDrsRecommendation', 'ClusterDrsRecommendation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterEVCManagerEVCState;
our @ISA = qw(DynamicData);

our @property_list = (
   ['supportedEVCMode', 'EVCMode', 1, 1],
   ['currentEVCModeKey', undef, undef, 0],
   ['guaranteedCPUFeatures', 'HostCpuIdInfo', 1, 0],
   ['featureCapability', 'HostFeatureCapability', 1, 0],
   ['featureMask', 'HostFeatureMask', 1, 0],
   ['featureRequirement', 'VirtualMachineFeatureRequirement', 1, 0],
);


VIMRuntime::make_get_set('ClusterEVCManagerEVCState', 'supportedEVCMode', 'currentEVCModeKey', 'guaranteedCPUFeatures', 'featureCapability', 'featureMask', 'featureRequirement');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterEVCManagerCheckResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['evcModeKey', undef, undef, 1],
   ['error', 'LocalizedMethodFault', undef, 1],
   ['host', 'ManagedObjectReference', 1, 0],
);


VIMRuntime::make_get_set('ClusterEVCManagerCheckResult', 'evcModeKey', 'error', 'host');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterEVCManagerCheckResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterEVCManagerCheckResult', 'ClusterEVCManagerCheckResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterEVCManagerCheckResult', 'ClusterEVCManagerCheckResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterEnterMaintenanceResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['recommendations', 'ClusterRecommendation', 1, 0],
   ['fault', 'ClusterDrsFaults', undef, 0],
);


VIMRuntime::make_get_set('ClusterEnterMaintenanceResult', 'recommendations', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterFailoverHostAdmissionControlInfoHostStatus;
our @ISA = qw(DynamicData);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
   ['status', 'ManagedEntityStatus', undef, 1],
);


VIMRuntime::make_get_set('ClusterFailoverHostAdmissionControlInfoHostStatus', 'host', 'status');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterFailoverHostAdmissionControlInfoHostStatus', 'ClusterFailoverHostAdmissionControlInfoHostStatus', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus', 'ClusterFailoverHostAdmissionControlInfoHostStatus');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterFailoverHostAdmissionControlInfo;
our @ISA = qw(ClusterDasAdmissionControlInfo);

our @property_list = (
   ['hostStatus', 'ClusterFailoverHostAdmissionControlInfoHostStatus', 1, 0],
);


VIMRuntime::make_get_set('ClusterFailoverHostAdmissionControlInfo', 'hostStatus');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterFailoverHostAdmissionControlPolicy;
our @ISA = qw(ClusterDasAdmissionControlPolicy);

our @property_list = (
   ['failoverHosts', 'ManagedObjectReference', 1, 0],
   ['failoverLevel', undef, undef, 0],
);


VIMRuntime::make_get_set('ClusterFailoverHostAdmissionControlPolicy', 'failoverHosts', 'failoverLevel');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterFailoverLevelAdmissionControlInfo;
our @ISA = qw(ClusterDasAdmissionControlInfo);

our @property_list = (
   ['currentFailoverLevel', undef, undef, 1],
);


VIMRuntime::make_get_set('ClusterFailoverLevelAdmissionControlInfo', 'currentFailoverLevel');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterFailoverLevelAdmissionControlPolicy;
our @ISA = qw(ClusterDasAdmissionControlPolicy);

our @property_list = (
   ['failoverLevel', undef, undef, 1],
   ['slotPolicy', 'ClusterSlotPolicy', undef, 0],
);


VIMRuntime::make_get_set('ClusterFailoverLevelAdmissionControlPolicy', 'failoverLevel', 'slotPolicy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterFailoverResourcesAdmissionControlInfo;
our @ISA = qw(ClusterDasAdmissionControlInfo);

our @property_list = (
   ['currentCpuFailoverResourcesPercent', undef, undef, 1],
   ['currentMemoryFailoverResourcesPercent', undef, undef, 1],
);


VIMRuntime::make_get_set('ClusterFailoverResourcesAdmissionControlInfo', 'currentCpuFailoverResourcesPercent', 'currentMemoryFailoverResourcesPercent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterFailoverResourcesAdmissionControlPolicy;
our @ISA = qw(ClusterDasAdmissionControlPolicy);

our @property_list = (
   ['cpuFailoverResourcesPercent', undef, undef, 1],
   ['memoryFailoverResourcesPercent', undef, undef, 1],
   ['failoverLevel', undef, undef, 0],
   ['autoComputePercentages', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('ClusterFailoverResourcesAdmissionControlPolicy', 'cpuFailoverResourcesPercent', 'memoryFailoverResourcesPercent', 'failoverLevel', 'autoComputePercentages');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterGroupInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['userCreated', 'boolean', undef, 0],
   ['uniqueID', undef, undef, 0],
);


VIMRuntime::make_get_set('ClusterGroupInfo', 'name', 'userCreated', 'uniqueID');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterGroupInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterGroupInfo', 'ClusterGroupInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterGroupInfo', 'ClusterGroupInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterHostGroup;
our @ISA = qw(ClusterGroupInfo);

our @property_list = (
   ['host', 'ManagedObjectReference', 1, 0],
);


VIMRuntime::make_get_set('ClusterHostGroup', 'host');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterHostInfraUpdateHaModeAction;
our @ISA = qw(ClusterAction);

our @property_list = (
   ['operationType', undef, undef, 1],
);


VIMRuntime::make_get_set('ClusterHostInfraUpdateHaModeAction', 'operationType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterHostPowerAction;
our @ISA = qw(ClusterAction);

our @property_list = (
   ['operationType', 'HostPowerOperationType', undef, 1],
   ['powerConsumptionWatt', undef, undef, 0],
   ['cpuCapacityMHz', undef, undef, 0],
   ['memCapacityMB', undef, undef, 0],
);


VIMRuntime::make_get_set('ClusterHostPowerAction', 'operationType', 'powerConsumptionWatt', 'cpuCapacityMHz', 'memCapacityMB');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterHostRecommendation;
our @ISA = qw(DynamicData);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
   ['rating', undef, undef, 1],
);


VIMRuntime::make_get_set('ClusterHostRecommendation', 'host', 'rating');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterHostRecommendation;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterHostRecommendation', 'ClusterHostRecommendation', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterHostRecommendation', 'ClusterHostRecommendation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterInitialPlacementAction;
our @ISA = qw(ClusterAction);

our @property_list = (
   ['targetHost', 'ManagedObjectReference', undef, 1],
   ['pool', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('ClusterInitialPlacementAction', 'targetHost', 'pool');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterMigrationAction;
our @ISA = qw(ClusterAction);

our @property_list = (
   ['drsMigration', 'ClusterDrsMigration', undef, 0],
);


VIMRuntime::make_get_set('ClusterMigrationAction', 'drsMigration');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterNotAttemptedVmInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 1],
   ['fault', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('ClusterNotAttemptedVmInfo', 'vm', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterNotAttemptedVmInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterNotAttemptedVmInfo', 'ClusterNotAttemptedVmInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterNotAttemptedVmInfo', 'ClusterNotAttemptedVmInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterOrchestrationInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['defaultVmReadiness', 'ClusterVmReadiness', undef, 0],
);


VIMRuntime::make_get_set('ClusterOrchestrationInfo', 'defaultVmReadiness');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PlacementAction;
our @ISA = qw(ClusterAction);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 0],
   ['targetHost', 'ManagedObjectReference', undef, 0],
   ['relocateSpec', 'VirtualMachineRelocateSpec', undef, 0],
);


VIMRuntime::make_get_set('PlacementAction', 'vm', 'targetHost', 'relocateSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PlacementResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['recommendations', 'ClusterRecommendation', 1, 0],
   ['drsFault', 'ClusterDrsFaults', undef, 0],
);


VIMRuntime::make_get_set('PlacementResult', 'recommendations', 'drsFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PlacementSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['priority', 'VirtualMachineMovePriority', undef, 0],
   ['vm', 'ManagedObjectReference', undef, 0],
   ['configSpec', 'VirtualMachineConfigSpec', undef, 0],
   ['relocateSpec', 'VirtualMachineRelocateSpec', undef, 0],
   ['hosts', 'ManagedObjectReference', 1, 0],
   ['datastores', 'ManagedObjectReference', 1, 0],
   ['storagePods', 'ManagedObjectReference', 1, 0],
   ['disallowPrerequisiteMoves', 'boolean', undef, 0],
   ['rules', 'ClusterRuleInfo', 1, 0],
   ['key', undef, undef, 0],
   ['placementType', undef, undef, 0],
   ['cloneSpec', 'VirtualMachineCloneSpec', undef, 0],
   ['cloneName', undef, undef, 0],
);


VIMRuntime::make_get_set('PlacementSpec', 'priority', 'vm', 'configSpec', 'relocateSpec', 'hosts', 'datastores', 'storagePods', 'disallowPrerequisiteMoves', 'rules', 'key', 'placementType', 'cloneSpec', 'cloneName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPlacementSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PlacementSpec', 'PlacementSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPlacementSpec', 'PlacementSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterPowerOnVmResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['attempted', 'ClusterAttemptedVmInfo', 1, 0],
   ['notAttempted', 'ClusterNotAttemptedVmInfo', 1, 0],
   ['recommendations', 'ClusterRecommendation', 1, 0],
);


VIMRuntime::make_get_set('ClusterPowerOnVmResult', 'attempted', 'notAttempted', 'recommendations');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterRecommendation;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['type', undef, undef, 1],
   ['time', undef, undef, 1],
   ['rating', undef, undef, 1],
   ['reason', undef, undef, 1],
   ['reasonText', undef, undef, 1],
   ['warningText', undef, undef, 0],
   ['warningDetails', 'LocalizableMessage', undef, 0],
   ['prerequisite', undef, 1, 0],
   ['action', 'ClusterAction', 1, 0],
   ['target', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('ClusterRecommendation', 'key', 'type', 'time', 'rating', 'reason', 'reasonText', 'warningText', 'warningDetails', 'prerequisite', 'action', 'target');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterRecommendation;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterRecommendation', 'ClusterRecommendation', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterRecommendation', 'ClusterRecommendation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterResourceUsageSummary;
our @ISA = qw(DynamicData);

our @property_list = (
   ['cpuUsedMHz', undef, undef, 1],
   ['cpuCapacityMHz', undef, undef, 1],
   ['memUsedMB', undef, undef, 1],
   ['memCapacityMB', undef, undef, 1],
   ['storageUsedMB', undef, undef, 1],
   ['storageCapacityMB', undef, undef, 1],
);


VIMRuntime::make_get_set('ClusterResourceUsageSummary', 'cpuUsedMHz', 'cpuCapacityMHz', 'memUsedMB', 'memCapacityMB', 'storageUsedMB', 'storageCapacityMB');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterRuleInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 0],
   ['status', 'ManagedEntityStatus', undef, 0],
   ['enabled', 'boolean', undef, 0],
   ['name', undef, undef, 0],
   ['mandatory', 'boolean', undef, 0],
   ['userCreated', 'boolean', undef, 0],
   ['inCompliance', 'boolean', undef, 0],
   ['ruleUuid', undef, undef, 0],
);


VIMRuntime::make_get_set('ClusterRuleInfo', 'key', 'status', 'enabled', 'name', 'mandatory', 'userCreated', 'inCompliance', 'ruleUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterRuleInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterRuleInfo', 'ClusterRuleInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterRuleInfo', 'ClusterRuleInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterRuleSpec;
our @ISA = qw(ArrayUpdateSpec);

our @property_list = (
   ['info', 'ClusterRuleInfo', undef, 0],
);


VIMRuntime::make_get_set('ClusterRuleSpec', 'info');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterRuleSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterRuleSpec', 'ClusterRuleSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterRuleSpec', 'ClusterRuleSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterSlotPolicy;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('ClusterSlotPolicy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterFixedSizeSlotPolicy;
our @ISA = qw(ClusterSlotPolicy);

our @property_list = (
   ['cpu', undef, undef, 1],
   ['memory', undef, undef, 1],
);


VIMRuntime::make_get_set('ClusterFixedSizeSlotPolicy', 'cpu', 'memory');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterUsageSummary;
our @ISA = qw(DynamicData);

our @property_list = (
   ['totalCpuCapacityMhz', undef, undef, 1],
   ['totalMemCapacityMB', undef, undef, 1],
   ['cpuReservationMhz', undef, undef, 1],
   ['memReservationMB', undef, undef, 1],
   ['poweredOffCpuReservationMhz', undef, undef, 0],
   ['poweredOffMemReservationMB', undef, undef, 0],
   ['cpuDemandMhz', undef, undef, 1],
   ['memDemandMB', undef, undef, 1],
   ['statsGenNumber', undef, undef, 1],
   ['cpuEntitledMhz', undef, undef, 1],
   ['memEntitledMB', undef, undef, 1],
   ['poweredOffVmCount', undef, undef, 1],
   ['totalVmCount', undef, undef, 1],
);


VIMRuntime::make_get_set('ClusterUsageSummary', 'totalCpuCapacityMhz', 'totalMemCapacityMB', 'cpuReservationMhz', 'memReservationMB', 'poweredOffCpuReservationMhz', 'poweredOffMemReservationMB', 'cpuDemandMhz', 'memDemandMB', 'statsGenNumber', 'cpuEntitledMhz', 'memEntitledMB', 'poweredOffVmCount', 'totalVmCount');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterVmComponentProtectionSettings;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vmStorageProtectionForAPD', undef, undef, 0],
   ['enableAPDTimeoutForHosts', 'boolean', undef, 0],
   ['vmTerminateDelayForAPDSec', undef, undef, 0],
   ['vmReactionOnAPDCleared', undef, undef, 0],
   ['vmStorageProtectionForPDL', undef, undef, 0],
);


VIMRuntime::make_get_set('ClusterVmComponentProtectionSettings', 'vmStorageProtectionForAPD', 'enableAPDTimeoutForHosts', 'vmTerminateDelayForAPDSec', 'vmReactionOnAPDCleared', 'vmStorageProtectionForPDL');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterVmGroup;
our @ISA = qw(ClusterGroupInfo);

our @property_list = (
   ['vm', 'ManagedObjectReference', 1, 0],
);


VIMRuntime::make_get_set('ClusterVmGroup', 'vm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterVmHostRuleInfo;
our @ISA = qw(ClusterRuleInfo);

our @property_list = (
   ['vmGroupName', undef, undef, 0],
   ['affineHostGroupName', undef, undef, 0],
   ['antiAffineHostGroupName', undef, undef, 0],
);


VIMRuntime::make_get_set('ClusterVmHostRuleInfo', 'vmGroupName', 'affineHostGroupName', 'antiAffineHostGroupName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterVmOrchestrationInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 1],
   ['vmReadiness', 'ClusterVmReadiness', undef, 1],
);


VIMRuntime::make_get_set('ClusterVmOrchestrationInfo', 'vm', 'vmReadiness');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfClusterVmOrchestrationInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ClusterVmOrchestrationInfo', 'ClusterVmOrchestrationInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfClusterVmOrchestrationInfo', 'ClusterVmOrchestrationInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterVmReadiness;
our @ISA = qw(DynamicData);

our @property_list = (
   ['readyCondition', undef, undef, 0],
   ['postReadyDelay', undef, undef, 0],
);


VIMRuntime::make_get_set('ClusterVmReadiness', 'readyCondition', 'postReadyDelay');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterVmToolsMonitoringSettings;
our @ISA = qw(DynamicData);

our @property_list = (
   ['enabled', 'boolean', undef, 0],
   ['vmMonitoring', undef, undef, 0],
   ['clusterSettings', 'boolean', undef, 0],
   ['failureInterval', undef, undef, 0],
   ['minUpTime', undef, undef, 0],
   ['maxFailures', undef, undef, 0],
   ['maxFailureWindow', undef, undef, 0],
);


VIMRuntime::make_get_set('ClusterVmToolsMonitoringSettings', 'enabled', 'vmMonitoring', 'clusterSettings', 'failureInterval', 'minUpTime', 'maxFailures', 'maxFailureWindow');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVPortConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['operation', undef, undef, 1],
   ['key', undef, undef, 0],
   ['name', undef, undef, 0],
   ['scope', 'ManagedObjectReference', 1, 0],
   ['description', undef, undef, 0],
   ['setting', 'DVPortSetting', undef, 0],
   ['configVersion', undef, undef, 0],
);


VIMRuntime::make_get_set('DVPortConfigSpec', 'operation', 'key', 'name', 'scope', 'description', 'setting', 'configVersion');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDVPortConfigSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DVPortConfigSpec', 'DVPortConfigSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDVPortConfigSpec', 'DVPortConfigSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVPortConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 0],
   ['scope', 'ManagedObjectReference', 1, 0],
   ['description', undef, undef, 0],
   ['setting', 'DVPortSetting', undef, 0],
   ['configVersion', undef, undef, 1],
);


VIMRuntime::make_get_set('DVPortConfigInfo', 'name', 'scope', 'description', 'setting', 'configVersion');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSTrafficShapingPolicy;
our @ISA = qw(InheritablePolicy);

our @property_list = (
   ['enabled', 'BoolPolicy', undef, 0],
   ['averageBandwidth', 'LongPolicy', undef, 0],
   ['peakBandwidth', 'LongPolicy', undef, 0],
   ['burstSize', 'LongPolicy', undef, 0],
);


VIMRuntime::make_get_set('DVSTrafficShapingPolicy', 'enabled', 'averageBandwidth', 'peakBandwidth', 'burstSize');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSHostLocalPortInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['switchUuid', undef, undef, 1],
   ['portKey', undef, undef, 1],
   ['setting', 'DVPortSetting', undef, 1],
   ['vnic', undef, undef, 1],
);


VIMRuntime::make_get_set('DVSHostLocalPortInfo', 'switchUuid', 'portKey', 'setting', 'vnic');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSVendorSpecificConfig;
our @ISA = qw(InheritablePolicy);

our @property_list = (
   ['keyValue', 'DistributedVirtualSwitchKeyedOpaqueBlob', 1, 0],
);


VIMRuntime::make_get_set('DVSVendorSpecificConfig', 'keyValue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsFilterParameter;
our @ISA = qw(DynamicData);

our @property_list = (
   ['parameters', undef, 1, 0],
);


VIMRuntime::make_get_set('DvsFilterParameter', 'parameters');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsFilterConfig;
our @ISA = qw(InheritablePolicy);

our @property_list = (
   ['key', undef, undef, 0],
   ['agentName', undef, undef, 0],
   ['slotNumber', undef, undef, 0],
   ['parameters', 'DvsFilterParameter', undef, 0],
   ['onFailure', undef, undef, 0],
);


VIMRuntime::make_get_set('DvsFilterConfig', 'key', 'agentName', 'slotNumber', 'parameters', 'onFailure');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDvsFilterConfig;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DvsFilterConfig', 'DvsFilterConfig', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDvsFilterConfig', 'DvsFilterConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsTrafficFilterConfig;
our @ISA = qw(DvsFilterConfig);

our @property_list = (
   ['trafficRuleset', 'DvsTrafficRuleset', undef, 0],
);


VIMRuntime::make_get_set('DvsTrafficFilterConfig', 'trafficRuleset');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsFilterConfigSpec;
our @ISA = qw(DvsFilterConfig);

our @property_list = (
   ['operation', undef, undef, 1],
);


VIMRuntime::make_get_set('DvsFilterConfigSpec', 'operation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsTrafficFilterConfigSpec;
our @ISA = qw(DvsTrafficFilterConfig);

our @property_list = (
   ['operation', undef, undef, 1],
);


VIMRuntime::make_get_set('DvsTrafficFilterConfigSpec', 'operation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsFilterPolicy;
our @ISA = qw(InheritablePolicy);

our @property_list = (
   ['filterConfig', 'DvsFilterConfig', 1, 0],
);


VIMRuntime::make_get_set('DvsFilterPolicy', 'filterConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVPortSetting;
our @ISA = qw(DynamicData);

our @property_list = (
   ['blocked', 'BoolPolicy', undef, 0],
   ['vmDirectPathGen2Allowed', 'BoolPolicy', undef, 0],
   ['inShapingPolicy', 'DVSTrafficShapingPolicy', undef, 0],
   ['outShapingPolicy', 'DVSTrafficShapingPolicy', undef, 0],
   ['vendorSpecificConfig', 'DVSVendorSpecificConfig', undef, 0],
   ['networkResourcePoolKey', 'StringPolicy', undef, 0],
   ['filterPolicy', 'DvsFilterPolicy', undef, 0],
);


VIMRuntime::make_get_set('DVPortSetting', 'blocked', 'vmDirectPathGen2Allowed', 'inShapingPolicy', 'outShapingPolicy', 'vendorSpecificConfig', 'networkResourcePoolKey', 'filterPolicy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVPortStatus;
our @ISA = qw(DynamicData);

our @property_list = (
   ['linkUp', 'boolean', undef, 1],
   ['blocked', 'boolean', undef, 1],
   ['vlanIds', 'NumericRange', 1, 0],
   ['trunkingMode', 'boolean', undef, 0],
   ['mtu', undef, undef, 0],
   ['linkPeer', undef, undef, 0],
   ['macAddress', undef, undef, 0],
   ['statusDetail', undef, undef, 0],
   ['vmDirectPathGen2Active', 'boolean', undef, 0],
   ['vmDirectPathGen2InactiveReasonNetwork', undef, 1, 0],
   ['vmDirectPathGen2InactiveReasonOther', undef, 1, 0],
   ['vmDirectPathGen2InactiveReasonExtended', undef, undef, 0],
);


VIMRuntime::make_get_set('DVPortStatus', 'linkUp', 'blocked', 'vlanIds', 'trunkingMode', 'mtu', 'linkPeer', 'macAddress', 'statusDetail', 'vmDirectPathGen2Active', 'vmDirectPathGen2InactiveReasonNetwork', 'vmDirectPathGen2InactiveReasonOther', 'vmDirectPathGen2InactiveReasonExtended');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVPortState;
our @ISA = qw(DynamicData);

our @property_list = (
   ['runtimeInfo', 'DVPortStatus', undef, 0],
   ['stats', 'DistributedVirtualSwitchPortStatistics', undef, 1],
   ['vendorSpecificState', 'DistributedVirtualSwitchKeyedOpaqueBlob', 1, 0],
);


VIMRuntime::make_get_set('DVPortState', 'runtimeInfo', 'stats', 'vendorSpecificState');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualPort;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['config', 'DVPortConfigInfo', undef, 1],
   ['dvsUuid', undef, undef, 1],
   ['portgroupKey', undef, undef, 0],
   ['proxyHost', 'ManagedObjectReference', undef, 0],
   ['connectee', 'DistributedVirtualSwitchPortConnectee', undef, 0],
   ['conflict', 'boolean', undef, 1],
   ['conflictPortKey', undef, undef, 0],
   ['state', 'DVPortState', undef, 0],
   ['connectionCookie', undef, undef, 0],
   ['lastStatusChange', undef, undef, 1],
   ['hostLocalPort', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('DistributedVirtualPort', 'key', 'config', 'dvsUuid', 'portgroupKey', 'proxyHost', 'connectee', 'conflict', 'conflictPortKey', 'state', 'connectionCookie', 'lastStatusChange', 'hostLocalPort');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDistributedVirtualPort;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DistributedVirtualPort', 'DistributedVirtualPort', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDistributedVirtualPort', 'DistributedVirtualPort');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVPortgroupPolicy;
our @ISA = qw(DynamicData);

our @property_list = (
   ['blockOverrideAllowed', 'boolean', undef, 1],
   ['shapingOverrideAllowed', 'boolean', undef, 1],
   ['vendorConfigOverrideAllowed', 'boolean', undef, 1],
   ['livePortMovingAllowed', 'boolean', undef, 1],
   ['portConfigResetAtDisconnect', 'boolean', undef, 1],
   ['networkResourcePoolOverrideAllowed', 'boolean', undef, 0],
   ['trafficFilterOverrideAllowed', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('DVPortgroupPolicy', 'blockOverrideAllowed', 'shapingOverrideAllowed', 'vendorConfigOverrideAllowed', 'livePortMovingAllowed', 'portConfigResetAtDisconnect', 'networkResourcePoolOverrideAllowed', 'trafficFilterOverrideAllowed');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVPortgroupConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['configVersion', undef, undef, 0],
   ['name', undef, undef, 0],
   ['numPorts', undef, undef, 0],
   ['portNameFormat', undef, undef, 0],
   ['defaultPortConfig', 'DVPortSetting', undef, 0],
   ['description', undef, undef, 0],
   ['type', undef, undef, 0],
   ['scope', 'ManagedObjectReference', 1, 0],
   ['policy', 'DVPortgroupPolicy', undef, 0],
   ['vendorSpecificConfig', 'DistributedVirtualSwitchKeyedOpaqueBlob', 1, 0],
   ['autoExpand', 'boolean', undef, 0],
   ['vmVnicNetworkResourcePoolKey', undef, undef, 0],
);


VIMRuntime::make_get_set('DVPortgroupConfigSpec', 'configVersion', 'name', 'numPorts', 'portNameFormat', 'defaultPortConfig', 'description', 'type', 'scope', 'policy', 'vendorSpecificConfig', 'autoExpand', 'vmVnicNetworkResourcePoolKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDVPortgroupConfigSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DVPortgroupConfigSpec', 'DVPortgroupConfigSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDVPortgroupConfigSpec', 'DVPortgroupConfigSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVPortgroupConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['name', undef, undef, 1],
   ['numPorts', undef, undef, 1],
   ['distributedVirtualSwitch', 'ManagedObjectReference', undef, 0],
   ['defaultPortConfig', 'DVPortSetting', undef, 0],
   ['description', undef, undef, 0],
   ['type', undef, undef, 1],
   ['policy', 'DVPortgroupPolicy', undef, 1],
   ['portNameFormat', undef, undef, 0],
   ['scope', 'ManagedObjectReference', 1, 0],
   ['vendorSpecificConfig', 'DistributedVirtualSwitchKeyedOpaqueBlob', 1, 0],
   ['configVersion', undef, undef, 0],
   ['autoExpand', 'boolean', undef, 0],
   ['vmVnicNetworkResourcePoolKey', undef, undef, 0],
   ['uplink', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('DVPortgroupConfigInfo', 'key', 'name', 'numPorts', 'distributedVirtualSwitch', 'defaultPortConfig', 'description', 'type', 'policy', 'portNameFormat', 'scope', 'vendorSpecificConfig', 'configVersion', 'autoExpand', 'vmVnicNetworkResourcePoolKey', 'uplink');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualPortgroupInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['switchName', undef, undef, 1],
   ['switchUuid', undef, undef, 1],
   ['portgroupName', undef, undef, 1],
   ['portgroupKey', undef, undef, 1],
   ['portgroupType', undef, undef, 1],
   ['uplinkPortgroup', 'boolean', undef, 1],
   ['portgroup', 'ManagedObjectReference', undef, 1],
   ['networkReservationSupported', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('DistributedVirtualPortgroupInfo', 'switchName', 'switchUuid', 'portgroupName', 'portgroupKey', 'portgroupType', 'uplinkPortgroup', 'portgroup', 'networkReservationSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDistributedVirtualPortgroupInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DistributedVirtualPortgroupInfo', 'DistributedVirtualPortgroupInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDistributedVirtualPortgroupInfo', 'DistributedVirtualPortgroupInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVPortgroupSelection;
our @ISA = qw(SelectionSet);

our @property_list = (
   ['dvsUuid', undef, undef, 1],
   ['portgroupKey', undef, 1, 1],
);


VIMRuntime::make_get_set('DVPortgroupSelection', 'dvsUuid', 'portgroupKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['switchName', undef, undef, 1],
   ['switchUuid', undef, undef, 1],
   ['distributedVirtualSwitch', 'ManagedObjectReference', undef, 1],
   ['networkReservationSupported', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('DistributedVirtualSwitchInfo', 'switchName', 'switchUuid', 'distributedVirtualSwitch', 'networkReservationSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDistributedVirtualSwitchInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DistributedVirtualSwitchInfo', 'DistributedVirtualSwitchInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDistributedVirtualSwitchInfo', 'DistributedVirtualSwitchInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSManagerDvsConfigTarget;
our @ISA = qw(DynamicData);

our @property_list = (
   ['distributedVirtualPortgroup', 'DistributedVirtualPortgroupInfo', 1, 0],
   ['distributedVirtualSwitch', 'DistributedVirtualSwitchInfo', 1, 0],
);


VIMRuntime::make_get_set('DVSManagerDvsConfigTarget', 'distributedVirtualPortgroup', 'distributedVirtualSwitch');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchManagerCompatibilityResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
   ['error', 'LocalizedMethodFault', 1, 0],
);


VIMRuntime::make_get_set('DistributedVirtualSwitchManagerCompatibilityResult', 'host', 'error');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDistributedVirtualSwitchManagerCompatibilityResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DistributedVirtualSwitchManagerCompatibilityResult', 'DistributedVirtualSwitchManagerCompatibilityResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDistributedVirtualSwitchManagerCompatibilityResult', 'DistributedVirtualSwitchManagerCompatibilityResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchManagerHostContainer;
our @ISA = qw(DynamicData);

our @property_list = (
   ['container', 'ManagedObjectReference', undef, 1],
   ['recursive', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('DistributedVirtualSwitchManagerHostContainer', 'container', 'recursive');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchManagerHostDvsFilterSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['inclusive', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('DistributedVirtualSwitchManagerHostDvsFilterSpec', 'inclusive');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DistributedVirtualSwitchManagerHostDvsFilterSpec', 'DistributedVirtualSwitchManagerHostDvsFilterSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec', 'DistributedVirtualSwitchManagerHostDvsFilterSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchManagerHostArrayFilter;
our @ISA = qw(DistributedVirtualSwitchManagerHostDvsFilterSpec);

our @property_list = (
   ['host', 'ManagedObjectReference', 1, 1],
);


VIMRuntime::make_get_set('DistributedVirtualSwitchManagerHostArrayFilter', 'host');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchManagerHostContainerFilter;
our @ISA = qw(DistributedVirtualSwitchManagerHostDvsFilterSpec);

our @property_list = (
   ['hostContainer', 'DistributedVirtualSwitchManagerHostContainer', undef, 1],
);


VIMRuntime::make_get_set('DistributedVirtualSwitchManagerHostContainerFilter', 'hostContainer');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchManagerHostDvsMembershipFilter;
our @ISA = qw(DistributedVirtualSwitchManagerHostDvsFilterSpec);

our @property_list = (
   ['distributedVirtualSwitch', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('DistributedVirtualSwitchManagerHostDvsMembershipFilter', 'distributedVirtualSwitch');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchManagerDvsProductSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['newSwitchProductSpec', 'DistributedVirtualSwitchProductSpec', undef, 0],
   ['distributedVirtualSwitch', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('DistributedVirtualSwitchManagerDvsProductSpec', 'newSwitchProductSpec', 'distributedVirtualSwitch');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchManagerImportResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['distributedVirtualSwitch', 'ManagedObjectReference', 1, 0],
   ['distributedVirtualPortgroup', 'ManagedObjectReference', 1, 0],
   ['importFault', 'ImportOperationBulkFaultFaultOnImport', 1, 0],
);


VIMRuntime::make_get_set('DistributedVirtualSwitchManagerImportResult', 'distributedVirtualSwitch', 'distributedVirtualPortgroup', 'importFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSSelection;
our @ISA = qw(SelectionSet);

our @property_list = (
   ['dvsUuid', undef, undef, 1],
);


VIMRuntime::make_get_set('DVSSelection', 'dvsUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EntityBackupConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['entityType', undef, undef, 1],
   ['configBlob', undef, undef, 1],
   ['key', undef, undef, 0],
   ['name', undef, undef, 0],
   ['container', 'ManagedObjectReference', undef, 0],
   ['configVersion', undef, undef, 0],
);


VIMRuntime::make_get_set('EntityBackupConfig', 'entityType', 'configBlob', 'key', 'name', 'container', 'configVersion');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfEntityBackupConfig;
our @ISA = qw(ComplexType);

our @property_list = (
   ['EntityBackupConfig', 'EntityBackupConfig', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfEntityBackupConfig', 'EntityBackupConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EntityBackup;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('EntityBackup');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchHostMemberConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['operation', undef, undef, 1],
   ['host', 'ManagedObjectReference', undef, 1],
   ['backing', 'DistributedVirtualSwitchHostMemberBacking', undef, 0],
   ['maxProxySwitchPorts', undef, undef, 0],
   ['vendorSpecificConfig', 'DistributedVirtualSwitchKeyedOpaqueBlob', 1, 0],
);


VIMRuntime::make_get_set('DistributedVirtualSwitchHostMemberConfigSpec', 'operation', 'host', 'backing', 'maxProxySwitchPorts', 'vendorSpecificConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDistributedVirtualSwitchHostMemberConfigSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DistributedVirtualSwitchHostMemberConfigSpec', 'DistributedVirtualSwitchHostMemberConfigSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDistributedVirtualSwitchHostMemberConfigSpec', 'DistributedVirtualSwitchHostMemberConfigSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchHostMemberPnicSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['pnicDevice', undef, undef, 1],
   ['uplinkPortKey', undef, undef, 0],
   ['uplinkPortgroupKey', undef, undef, 0],
   ['connectionCookie', undef, undef, 0],
);


VIMRuntime::make_get_set('DistributedVirtualSwitchHostMemberPnicSpec', 'pnicDevice', 'uplinkPortKey', 'uplinkPortgroupKey', 'connectionCookie');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDistributedVirtualSwitchHostMemberPnicSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DistributedVirtualSwitchHostMemberPnicSpec', 'DistributedVirtualSwitchHostMemberPnicSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDistributedVirtualSwitchHostMemberPnicSpec', 'DistributedVirtualSwitchHostMemberPnicSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchHostMemberBacking;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('DistributedVirtualSwitchHostMemberBacking');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchHostMemberPnicBacking;
our @ISA = qw(DistributedVirtualSwitchHostMemberBacking);

our @property_list = (
   ['pnicSpec', 'DistributedVirtualSwitchHostMemberPnicSpec', 1, 0],
);


VIMRuntime::make_get_set('DistributedVirtualSwitchHostMemberPnicBacking', 'pnicSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchHostMemberRuntimeState;
our @ISA = qw(DynamicData);

our @property_list = (
   ['currentMaxProxySwitchPorts', undef, undef, 1],
);


VIMRuntime::make_get_set('DistributedVirtualSwitchHostMemberRuntimeState', 'currentMaxProxySwitchPorts');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchHostMemberConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 0],
   ['maxProxySwitchPorts', undef, undef, 1],
   ['vendorSpecificConfig', 'DistributedVirtualSwitchKeyedOpaqueBlob', 1, 0],
   ['backing', 'DistributedVirtualSwitchHostMemberBacking', undef, 1],
);


VIMRuntime::make_get_set('DistributedVirtualSwitchHostMemberConfigInfo', 'host', 'maxProxySwitchPorts', 'vendorSpecificConfig', 'backing');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostMemberRuntimeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
   ['status', undef, undef, 0],
   ['statusDetail', undef, undef, 0],
   ['healthCheckResult', 'HostMemberHealthCheckResult', 1, 0],
);


VIMRuntime::make_get_set('HostMemberRuntimeInfo', 'host', 'status', 'statusDetail', 'healthCheckResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostMemberRuntimeInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostMemberRuntimeInfo', 'HostMemberRuntimeInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostMemberRuntimeInfo', 'HostMemberRuntimeInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostMemberHealthCheckResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['summary', undef, undef, 0],
);


VIMRuntime::make_get_set('HostMemberHealthCheckResult', 'summary');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostMemberHealthCheckResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostMemberHealthCheckResult', 'HostMemberHealthCheckResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostMemberHealthCheckResult', 'HostMemberHealthCheckResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostMemberUplinkHealthCheckResult;
our @ISA = qw(HostMemberHealthCheckResult);

our @property_list = (
   ['uplinkPortKey', undef, undef, 1],
);


VIMRuntime::make_get_set('HostMemberUplinkHealthCheckResult', 'uplinkPortKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchHostMember;
our @ISA = qw(DynamicData);

our @property_list = (
   ['runtimeState', 'DistributedVirtualSwitchHostMemberRuntimeState', undef, 0],
   ['config', 'DistributedVirtualSwitchHostMemberConfigInfo', undef, 1],
   ['productInfo', 'DistributedVirtualSwitchProductSpec', undef, 0],
   ['uplinkPortKey', undef, 1, 0],
   ['status', undef, undef, 1],
   ['statusDetail', undef, undef, 0],
);


VIMRuntime::make_get_set('DistributedVirtualSwitchHostMember', 'runtimeState', 'config', 'productInfo', 'uplinkPortKey', 'status', 'statusDetail');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDistributedVirtualSwitchHostMember;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DistributedVirtualSwitchHostMember', 'DistributedVirtualSwitchHostMember', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDistributedVirtualSwitchHostMember', 'DistributedVirtualSwitchHostMember');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchHostProductSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['productLineId', undef, undef, 0],
   ['version', undef, undef, 0],
);


VIMRuntime::make_get_set('DistributedVirtualSwitchHostProductSpec', 'productLineId', 'version');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDistributedVirtualSwitchHostProductSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DistributedVirtualSwitchHostProductSpec', 'DistributedVirtualSwitchHostProductSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDistributedVirtualSwitchHostProductSpec', 'DistributedVirtualSwitchHostProductSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchKeyedOpaqueBlob;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['opaqueData', undef, undef, 1],
);


VIMRuntime::make_get_set('DistributedVirtualSwitchKeyedOpaqueBlob', 'key', 'opaqueData');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DistributedVirtualSwitchKeyedOpaqueBlob', 'DistributedVirtualSwitchKeyedOpaqueBlob', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob', 'DistributedVirtualSwitchKeyedOpaqueBlob');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSNetworkResourcePoolAllocationInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['limit', undef, undef, 0],
   ['shares', 'SharesInfo', undef, 0],
   ['priorityTag', undef, undef, 0],
);


VIMRuntime::make_get_set('DVSNetworkResourcePoolAllocationInfo', 'limit', 'shares', 'priorityTag');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSNetworkResourcePoolConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['configVersion', undef, undef, 0],
   ['allocationInfo', 'DVSNetworkResourcePoolAllocationInfo', undef, 0],
   ['name', undef, undef, 0],
   ['description', undef, undef, 0],
);


VIMRuntime::make_get_set('DVSNetworkResourcePoolConfigSpec', 'key', 'configVersion', 'allocationInfo', 'name', 'description');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDVSNetworkResourcePoolConfigSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DVSNetworkResourcePoolConfigSpec', 'DVSNetworkResourcePoolConfigSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDVSNetworkResourcePoolConfigSpec', 'DVSNetworkResourcePoolConfigSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSNetworkResourcePool;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['name', undef, undef, 0],
   ['description', undef, undef, 0],
   ['configVersion', undef, undef, 1],
   ['allocationInfo', 'DVSNetworkResourcePoolAllocationInfo', undef, 1],
);


VIMRuntime::make_get_set('DVSNetworkResourcePool', 'key', 'name', 'description', 'configVersion', 'allocationInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDVSNetworkResourcePool;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DVSNetworkResourcePool', 'DVSNetworkResourcePool', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDVSNetworkResourcePool', 'DVSNetworkResourcePool');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchPortConnectee;
our @ISA = qw(DynamicData);

our @property_list = (
   ['connectedEntity', 'ManagedObjectReference', undef, 0],
   ['nicKey', undef, undef, 0],
   ['type', undef, undef, 0],
   ['addressHint', undef, undef, 0],
);


VIMRuntime::make_get_set('DistributedVirtualSwitchPortConnectee', 'connectedEntity', 'nicKey', 'type', 'addressHint');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchPortConnection;
our @ISA = qw(DynamicData);

our @property_list = (
   ['switchUuid', undef, undef, 1],
   ['portgroupKey', undef, undef, 0],
   ['portKey', undef, undef, 0],
   ['connectionCookie', undef, undef, 0],
);


VIMRuntime::make_get_set('DistributedVirtualSwitchPortConnection', 'switchUuid', 'portgroupKey', 'portKey', 'connectionCookie');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchPortCriteria;
our @ISA = qw(DynamicData);

our @property_list = (
   ['connected', 'boolean', undef, 0],
   ['active', 'boolean', undef, 0],
   ['uplinkPort', 'boolean', undef, 0],
   ['scope', 'ManagedObjectReference', undef, 0],
   ['portgroupKey', undef, 1, 0],
   ['inside', 'boolean', undef, 0],
   ['portKey', undef, 1, 0],
   ['host', 'ManagedObjectReference', 1, 0],
);


VIMRuntime::make_get_set('DistributedVirtualSwitchPortCriteria', 'connected', 'active', 'uplinkPort', 'scope', 'portgroupKey', 'inside', 'portKey', 'host');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchPortStatistics;
our @ISA = qw(DynamicData);

our @property_list = (
   ['packetsInMulticast', undef, undef, 1],
   ['packetsOutMulticast', undef, undef, 1],
   ['bytesInMulticast', undef, undef, 1],
   ['bytesOutMulticast', undef, undef, 1],
   ['packetsInUnicast', undef, undef, 1],
   ['packetsOutUnicast', undef, undef, 1],
   ['bytesInUnicast', undef, undef, 1],
   ['bytesOutUnicast', undef, undef, 1],
   ['packetsInBroadcast', undef, undef, 1],
   ['packetsOutBroadcast', undef, undef, 1],
   ['bytesInBroadcast', undef, undef, 1],
   ['bytesOutBroadcast', undef, undef, 1],
   ['packetsInDropped', undef, undef, 1],
   ['packetsOutDropped', undef, undef, 1],
   ['packetsInException', undef, undef, 1],
   ['packetsOutException', undef, undef, 1],
   ['bytesInFromPnic', undef, undef, 0],
   ['bytesOutToPnic', undef, undef, 0],
);


VIMRuntime::make_get_set('DistributedVirtualSwitchPortStatistics', 'packetsInMulticast', 'packetsOutMulticast', 'bytesInMulticast', 'bytesOutMulticast', 'packetsInUnicast', 'packetsOutUnicast', 'bytesInUnicast', 'bytesOutUnicast', 'packetsInBroadcast', 'packetsOutBroadcast', 'bytesInBroadcast', 'bytesOutBroadcast', 'packetsInDropped', 'packetsOutDropped', 'packetsInException', 'packetsOutException', 'bytesInFromPnic', 'bytesOutToPnic');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchProductSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 0],
   ['vendor', undef, undef, 0],
   ['version', undef, undef, 0],
   ['build', undef, undef, 0],
   ['forwardingClass', undef, undef, 0],
   ['bundleId', undef, undef, 0],
   ['bundleUrl', undef, undef, 0],
);


VIMRuntime::make_get_set('DistributedVirtualSwitchProductSpec', 'name', 'vendor', 'version', 'build', 'forwardingClass', 'bundleId', 'bundleUrl');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDistributedVirtualSwitchProductSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DistributedVirtualSwitchProductSpec', 'DistributedVirtualSwitchProductSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDistributedVirtualSwitchProductSpec', 'DistributedVirtualSwitchProductSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsNetworkRuleQualifier;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 0],
);


VIMRuntime::make_get_set('DvsNetworkRuleQualifier', 'key');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDvsNetworkRuleQualifier;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DvsNetworkRuleQualifier', 'DvsNetworkRuleQualifier', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDvsNetworkRuleQualifier', 'DvsNetworkRuleQualifier');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsNetworkRuleAction;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('DvsNetworkRuleAction');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsIpNetworkRuleQualifier;
our @ISA = qw(DvsNetworkRuleQualifier);

our @property_list = (
   ['sourceAddress', 'IpAddress', undef, 0],
   ['destinationAddress', 'IpAddress', undef, 0],
   ['protocol', 'IntExpression', undef, 0],
   ['sourceIpPort', 'DvsIpPort', undef, 0],
   ['destinationIpPort', 'DvsIpPort', undef, 0],
   ['tcpFlags', 'IntExpression', undef, 0],
);


VIMRuntime::make_get_set('DvsIpNetworkRuleQualifier', 'sourceAddress', 'destinationAddress', 'protocol', 'sourceIpPort', 'destinationIpPort', 'tcpFlags');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsIpPort;
our @ISA = qw(NegatableExpression);

our @property_list = (
);


VIMRuntime::make_get_set('DvsIpPort');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsSingleIpPort;
our @ISA = qw(DvsIpPort);

our @property_list = (
   ['portNumber', undef, undef, 1],
);


VIMRuntime::make_get_set('DvsSingleIpPort', 'portNumber');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsIpPortRange;
our @ISA = qw(DvsIpPort);

our @property_list = (
   ['startPortNumber', undef, undef, 1],
   ['endPortNumber', undef, undef, 1],
);


VIMRuntime::make_get_set('DvsIpPortRange', 'startPortNumber', 'endPortNumber');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsMacNetworkRuleQualifier;
our @ISA = qw(DvsNetworkRuleQualifier);

our @property_list = (
   ['sourceAddress', 'MacAddress', undef, 0],
   ['destinationAddress', 'MacAddress', undef, 0],
   ['protocol', 'IntExpression', undef, 0],
   ['vlanId', 'IntExpression', undef, 0],
);


VIMRuntime::make_get_set('DvsMacNetworkRuleQualifier', 'sourceAddress', 'destinationAddress', 'protocol', 'vlanId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsSystemTrafficNetworkRuleQualifier;
our @ISA = qw(DvsNetworkRuleQualifier);

our @property_list = (
   ['typeOfSystemTraffic', 'StringExpression', undef, 0],
);


VIMRuntime::make_get_set('DvsSystemTrafficNetworkRuleQualifier', 'typeOfSystemTraffic');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsDropNetworkRuleAction;
our @ISA = qw(DvsNetworkRuleAction);

our @property_list = (
);


VIMRuntime::make_get_set('DvsDropNetworkRuleAction');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsAcceptNetworkRuleAction;
our @ISA = qw(DvsNetworkRuleAction);

our @property_list = (
);


VIMRuntime::make_get_set('DvsAcceptNetworkRuleAction');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsUpdateTagNetworkRuleAction;
our @ISA = qw(DvsNetworkRuleAction);

our @property_list = (
   ['qosTag', undef, undef, 0],
   ['dscpTag', undef, undef, 0],
);


VIMRuntime::make_get_set('DvsUpdateTagNetworkRuleAction', 'qosTag', 'dscpTag');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsRateLimitNetworkRuleAction;
our @ISA = qw(DvsNetworkRuleAction);

our @property_list = (
   ['packetsPerSecond', undef, undef, 1],
);


VIMRuntime::make_get_set('DvsRateLimitNetworkRuleAction', 'packetsPerSecond');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsLogNetworkRuleAction;
our @ISA = qw(DvsNetworkRuleAction);

our @property_list = (
);


VIMRuntime::make_get_set('DvsLogNetworkRuleAction');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsGreEncapNetworkRuleAction;
our @ISA = qw(DvsNetworkRuleAction);

our @property_list = (
   ['encapsulationIp', 'SingleIp', undef, 1],
);


VIMRuntime::make_get_set('DvsGreEncapNetworkRuleAction', 'encapsulationIp');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsMacRewriteNetworkRuleAction;
our @ISA = qw(DvsNetworkRuleAction);

our @property_list = (
   ['rewriteMac', undef, undef, 1],
);


VIMRuntime::make_get_set('DvsMacRewriteNetworkRuleAction', 'rewriteMac');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsPuntNetworkRuleAction;
our @ISA = qw(DvsNetworkRuleAction);

our @property_list = (
);


VIMRuntime::make_get_set('DvsPuntNetworkRuleAction');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsCopyNetworkRuleAction;
our @ISA = qw(DvsNetworkRuleAction);

our @property_list = (
);


VIMRuntime::make_get_set('DvsCopyNetworkRuleAction');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsTrafficRule;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 0],
   ['description', undef, undef, 0],
   ['sequence', undef, undef, 0],
   ['qualifier', 'DvsNetworkRuleQualifier', 1, 0],
   ['action', 'DvsNetworkRuleAction', undef, 0],
   ['direction', undef, undef, 0],
);


VIMRuntime::make_get_set('DvsTrafficRule', 'key', 'description', 'sequence', 'qualifier', 'action', 'direction');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDvsTrafficRule;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DvsTrafficRule', 'DvsTrafficRule', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDvsTrafficRule', 'DvsTrafficRule');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsTrafficRuleset;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 0],
   ['enabled', 'boolean', undef, 0],
   ['precedence', undef, undef, 0],
   ['rules', 'DvsTrafficRule', 1, 0],
);


VIMRuntime::make_get_set('DvsTrafficRuleset', 'key', 'enabled', 'precedence', 'rules');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsVmVnicResourceAllocation;
our @ISA = qw(DynamicData);

our @property_list = (
   ['reservationQuota', undef, undef, 0],
);


VIMRuntime::make_get_set('DvsVmVnicResourceAllocation', 'reservationQuota');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsVmVnicResourcePoolConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['operation', undef, undef, 1],
   ['key', undef, undef, 0],
   ['configVersion', undef, undef, 0],
   ['allocationInfo', 'DvsVmVnicResourceAllocation', undef, 0],
   ['name', undef, undef, 0],
   ['description', undef, undef, 0],
);


VIMRuntime::make_get_set('DvsVmVnicResourcePoolConfigSpec', 'operation', 'key', 'configVersion', 'allocationInfo', 'name', 'description');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDvsVmVnicResourcePoolConfigSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DvsVmVnicResourcePoolConfigSpec', 'DvsVmVnicResourcePoolConfigSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDvsVmVnicResourcePoolConfigSpec', 'DvsVmVnicResourcePoolConfigSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsVnicAllocatedResource;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 1],
   ['vnicKey', undef, undef, 1],
   ['reservation', undef, undef, 0],
);


VIMRuntime::make_get_set('DvsVnicAllocatedResource', 'vm', 'vnicKey', 'reservation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDvsVnicAllocatedResource;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DvsVnicAllocatedResource', 'DvsVnicAllocatedResource', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDvsVnicAllocatedResource', 'DvsVnicAllocatedResource');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsVmVnicNetworkResourcePoolRuntimeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['name', undef, undef, 0],
   ['capacity', undef, undef, 0],
   ['usage', undef, undef, 0],
   ['available', undef, undef, 0],
   ['status', undef, undef, 1],
   ['allocatedResource', 'DvsVnicAllocatedResource', 1, 0],
);


VIMRuntime::make_get_set('DvsVmVnicNetworkResourcePoolRuntimeInfo', 'key', 'name', 'capacity', 'usage', 'available', 'status', 'allocatedResource');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDvsVmVnicNetworkResourcePoolRuntimeInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DvsVmVnicNetworkResourcePoolRuntimeInfo', 'DvsVmVnicNetworkResourcePoolRuntimeInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDvsVmVnicNetworkResourcePoolRuntimeInfo', 'DvsVmVnicNetworkResourcePoolRuntimeInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSVmVnicNetworkResourcePool;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['name', undef, undef, 0],
   ['description', undef, undef, 0],
   ['configVersion', undef, undef, 1],
   ['allocationInfo', 'DvsVmVnicResourceAllocation', undef, 0],
);


VIMRuntime::make_get_set('DVSVmVnicNetworkResourcePool', 'key', 'name', 'description', 'configVersion', 'allocationInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDVSVmVnicNetworkResourcePool;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DVSVmVnicNetworkResourcePool', 'DVSVmVnicNetworkResourcePool', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDVSVmVnicNetworkResourcePool', 'DVSVmVnicNetworkResourcePool');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareDVSFeatureCapability;
our @ISA = qw(DVSFeatureCapability);

our @property_list = (
   ['vspanSupported', 'boolean', undef, 0],
   ['lldpSupported', 'boolean', undef, 0],
   ['ipfixSupported', 'boolean', undef, 0],
   ['ipfixCapability', 'VMwareDvsIpfixCapability', undef, 0],
   ['multicastSnoopingSupported', 'boolean', undef, 0],
   ['vspanCapability', 'VMwareDVSVspanCapability', undef, 0],
   ['lacpCapability', 'VMwareDvsLacpCapability', undef, 0],
);


VIMRuntime::make_get_set('VMwareDVSFeatureCapability', 'vspanSupported', 'lldpSupported', 'ipfixSupported', 'ipfixCapability', 'multicastSnoopingSupported', 'vspanCapability', 'lacpCapability');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareDvsIpfixCapability;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipfixSupported', 'boolean', undef, 0],
   ['ipv6ForIpfixSupported', 'boolean', undef, 0],
   ['observationDomainIdSupported', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VMwareDvsIpfixCapability', 'ipfixSupported', 'ipv6ForIpfixSupported', 'observationDomainIdSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareDvsLacpCapability;
our @ISA = qw(DynamicData);

our @property_list = (
   ['lacpSupported', 'boolean', undef, 0],
   ['multiLacpGroupSupported', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VMwareDvsLacpCapability', 'lacpSupported', 'multiLacpGroupSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareDVSHealthCheckCapability;
our @ISA = qw(DVSHealthCheckCapability);

our @property_list = (
   ['vlanMtuSupported', 'boolean', undef, 1],
   ['teamingSupported', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('VMwareDVSHealthCheckCapability', 'vlanMtuSupported', 'teamingSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareDVSVspanCapability;
our @ISA = qw(DynamicData);

our @property_list = (
   ['mixedDestSupported', 'boolean', undef, 1],
   ['dvportSupported', 'boolean', undef, 1],
   ['remoteSourceSupported', 'boolean', undef, 1],
   ['remoteDestSupported', 'boolean', undef, 1],
   ['encapRemoteSourceSupported', 'boolean', undef, 1],
   ['erspanProtocolSupported', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VMwareDVSVspanCapability', 'mixedDestSupported', 'dvportSupported', 'remoteSourceSupported', 'remoteDestSupported', 'encapRemoteSourceSupported', 'erspanProtocolSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareVspanPort;
our @ISA = qw(DynamicData);

our @property_list = (
   ['portKey', undef, 1, 0],
   ['uplinkPortName', undef, 1, 0],
   ['wildcardPortConnecteeType', undef, 1, 0],
   ['vlans', undef, 1, 0],
   ['ipAddress', undef, 1, 0],
);


VIMRuntime::make_get_set('VMwareVspanPort', 'portKey', 'uplinkPortName', 'wildcardPortConnecteeType', 'vlans', 'ipAddress');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareVspanSession;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 0],
   ['name', undef, undef, 0],
   ['description', undef, undef, 0],
   ['enabled', 'boolean', undef, 1],
   ['sourcePortTransmitted', 'VMwareVspanPort', undef, 0],
   ['sourcePortReceived', 'VMwareVspanPort', undef, 0],
   ['destinationPort', 'VMwareVspanPort', undef, 0],
   ['encapsulationVlanId', undef, undef, 0],
   ['stripOriginalVlan', 'boolean', undef, 1],
   ['mirroredPacketLength', undef, undef, 0],
   ['normalTrafficAllowed', 'boolean', undef, 1],
   ['sessionType', undef, undef, 0],
   ['samplingRate', undef, undef, 0],
   ['encapType', undef, undef, 0],
   ['erspanId', undef, undef, 0],
   ['erspanCOS', undef, undef, 0],
   ['erspanGraNanosec', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VMwareVspanSession', 'key', 'name', 'description', 'enabled', 'sourcePortTransmitted', 'sourcePortReceived', 'destinationPort', 'encapsulationVlanId', 'stripOriginalVlan', 'mirroredPacketLength', 'normalTrafficAllowed', 'sessionType', 'samplingRate', 'encapType', 'erspanId', 'erspanCOS', 'erspanGraNanosec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVMwareVspanSession;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VMwareVspanSession', 'VMwareVspanSession', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVMwareVspanSession', 'VMwareVspanSession');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareIpfixConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['collectorIpAddress', undef, undef, 0],
   ['collectorPort', undef, undef, 0],
   ['observationDomainId', undef, undef, 0],
   ['activeFlowTimeout', undef, undef, 1],
   ['idleFlowTimeout', undef, undef, 1],
   ['samplingRate', undef, undef, 1],
   ['internalFlowsOnly', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('VMwareIpfixConfig', 'collectorIpAddress', 'collectorPort', 'observationDomainId', 'activeFlowTimeout', 'idleFlowTimeout', 'samplingRate', 'internalFlowsOnly');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareDVSConfigInfo;
our @ISA = qw(DVSConfigInfo);

our @property_list = (
   ['vspanSession', 'VMwareVspanSession', 1, 0],
   ['pvlanConfig', 'VMwareDVSPvlanMapEntry', 1, 0],
   ['maxMtu', undef, undef, 1],
   ['linkDiscoveryProtocolConfig', 'LinkDiscoveryProtocolConfig', undef, 0],
   ['ipfixConfig', 'VMwareIpfixConfig', undef, 0],
   ['lacpGroupConfig', 'VMwareDvsLacpGroupConfig', 1, 0],
   ['lacpApiVersion', undef, undef, 0],
   ['multicastFilteringMode', undef, undef, 0],
);


VIMRuntime::make_get_set('VMwareDVSConfigInfo', 'vspanSession', 'pvlanConfig', 'maxMtu', 'linkDiscoveryProtocolConfig', 'ipfixConfig', 'lacpGroupConfig', 'lacpApiVersion', 'multicastFilteringMode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareDVSConfigSpec;
our @ISA = qw(DVSConfigSpec);

our @property_list = (
   ['pvlanConfigSpec', 'VMwareDVSPvlanConfigSpec', 1, 0],
   ['vspanConfigSpec', 'VMwareDVSVspanConfigSpec', 1, 0],
   ['maxMtu', undef, undef, 0],
   ['linkDiscoveryProtocolConfig', 'LinkDiscoveryProtocolConfig', undef, 0],
   ['ipfixConfig', 'VMwareIpfixConfig', undef, 0],
   ['lacpApiVersion', undef, undef, 0],
   ['multicastFilteringMode', undef, undef, 0],
);


VIMRuntime::make_get_set('VMwareDVSConfigSpec', 'pvlanConfigSpec', 'vspanConfigSpec', 'maxMtu', 'linkDiscoveryProtocolConfig', 'ipfixConfig', 'lacpApiVersion', 'multicastFilteringMode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareUplinkPortOrderPolicy;
our @ISA = qw(InheritablePolicy);

our @property_list = (
   ['activeUplinkPort', undef, 1, 0],
   ['standbyUplinkPort', undef, 1, 0],
);


VIMRuntime::make_get_set('VMwareUplinkPortOrderPolicy', 'activeUplinkPort', 'standbyUplinkPort');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSFailureCriteria;
our @ISA = qw(InheritablePolicy);

our @property_list = (
   ['checkSpeed', 'StringPolicy', undef, 0],
   ['speed', 'IntPolicy', undef, 0],
   ['checkDuplex', 'BoolPolicy', undef, 0],
   ['fullDuplex', 'BoolPolicy', undef, 0],
   ['checkErrorPercent', 'BoolPolicy', undef, 0],
   ['percentage', 'IntPolicy', undef, 0],
   ['checkBeacon', 'BoolPolicy', undef, 0],
);


VIMRuntime::make_get_set('DVSFailureCriteria', 'checkSpeed', 'speed', 'checkDuplex', 'fullDuplex', 'checkErrorPercent', 'percentage', 'checkBeacon');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmwareUplinkPortTeamingPolicy;
our @ISA = qw(InheritablePolicy);

our @property_list = (
   ['policy', 'StringPolicy', undef, 0],
   ['reversePolicy', 'BoolPolicy', undef, 0],
   ['notifySwitches', 'BoolPolicy', undef, 0],
   ['rollingOrder', 'BoolPolicy', undef, 0],
   ['failureCriteria', 'DVSFailureCriteria', undef, 0],
   ['uplinkPortOrder', 'VMwareUplinkPortOrderPolicy', undef, 0],
);


VIMRuntime::make_get_set('VmwareUplinkPortTeamingPolicy', 'policy', 'reversePolicy', 'notifySwitches', 'rollingOrder', 'failureCriteria', 'uplinkPortOrder');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmwareDistributedVirtualSwitchVlanSpec;
our @ISA = qw(InheritablePolicy);

our @property_list = (
);


VIMRuntime::make_get_set('VmwareDistributedVirtualSwitchVlanSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmwareDistributedVirtualSwitchPvlanSpec;
our @ISA = qw(VmwareDistributedVirtualSwitchVlanSpec);

our @property_list = (
   ['pvlanId', undef, undef, 1],
);


VIMRuntime::make_get_set('VmwareDistributedVirtualSwitchPvlanSpec', 'pvlanId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmwareDistributedVirtualSwitchVlanIdSpec;
our @ISA = qw(VmwareDistributedVirtualSwitchVlanSpec);

our @property_list = (
   ['vlanId', undef, undef, 1],
);


VIMRuntime::make_get_set('VmwareDistributedVirtualSwitchVlanIdSpec', 'vlanId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmwareDistributedVirtualSwitchTrunkVlanSpec;
our @ISA = qw(VmwareDistributedVirtualSwitchVlanSpec);

our @property_list = (
   ['vlanId', 'NumericRange', 1, 1],
);


VIMRuntime::make_get_set('VmwareDistributedVirtualSwitchTrunkVlanSpec', 'vlanId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVSSecurityPolicy;
our @ISA = qw(InheritablePolicy);

our @property_list = (
   ['allowPromiscuous', 'BoolPolicy', undef, 0],
   ['macChanges', 'BoolPolicy', undef, 0],
   ['forgedTransmits', 'BoolPolicy', undef, 0],
);


VIMRuntime::make_get_set('DVSSecurityPolicy', 'allowPromiscuous', 'macChanges', 'forgedTransmits');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareDVSPortSetting;
our @ISA = qw(DVPortSetting);

our @property_list = (
   ['vlan', 'VmwareDistributedVirtualSwitchVlanSpec', undef, 0],
   ['qosTag', 'IntPolicy', undef, 0],
   ['uplinkTeamingPolicy', 'VmwareUplinkPortTeamingPolicy', undef, 0],
   ['securityPolicy', 'DVSSecurityPolicy', undef, 0],
   ['ipfixEnabled', 'BoolPolicy', undef, 0],
   ['txUplink', 'BoolPolicy', undef, 0],
   ['lacpPolicy', 'VMwareUplinkLacpPolicy', undef, 0],
);


VIMRuntime::make_get_set('VMwareDVSPortSetting', 'vlan', 'qosTag', 'uplinkTeamingPolicy', 'securityPolicy', 'ipfixEnabled', 'txUplink', 'lacpPolicy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareDVSPortgroupPolicy;
our @ISA = qw(DVPortgroupPolicy);

our @property_list = (
   ['vlanOverrideAllowed', 'boolean', undef, 1],
   ['uplinkTeamingOverrideAllowed', 'boolean', undef, 1],
   ['securityPolicyOverrideAllowed', 'boolean', undef, 1],
   ['ipfixOverrideAllowed', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VMwareDVSPortgroupPolicy', 'vlanOverrideAllowed', 'uplinkTeamingOverrideAllowed', 'securityPolicyOverrideAllowed', 'ipfixOverrideAllowed');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareDVSPvlanConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['pvlanEntry', 'VMwareDVSPvlanMapEntry', undef, 1],
   ['operation', undef, undef, 1],
);


VIMRuntime::make_get_set('VMwareDVSPvlanConfigSpec', 'pvlanEntry', 'operation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVMwareDVSPvlanConfigSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VMwareDVSPvlanConfigSpec', 'VMwareDVSPvlanConfigSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVMwareDVSPvlanConfigSpec', 'VMwareDVSPvlanConfigSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareDVSPvlanMapEntry;
our @ISA = qw(DynamicData);

our @property_list = (
   ['primaryVlanId', undef, undef, 1],
   ['secondaryVlanId', undef, undef, 1],
   ['pvlanType', undef, undef, 1],
);


VIMRuntime::make_get_set('VMwareDVSPvlanMapEntry', 'primaryVlanId', 'secondaryVlanId', 'pvlanType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVMwareDVSPvlanMapEntry;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VMwareDVSPvlanMapEntry', 'VMwareDVSPvlanMapEntry', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVMwareDVSPvlanMapEntry', 'VMwareDVSPvlanMapEntry');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareDVSVspanConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vspanSession', 'VMwareVspanSession', undef, 1],
   ['operation', undef, undef, 1],
);


VIMRuntime::make_get_set('VMwareDVSVspanConfigSpec', 'vspanSession', 'operation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVMwareDVSVspanConfigSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VMwareDVSVspanConfigSpec', 'VMwareDVSVspanConfigSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVMwareDVSVspanConfigSpec', 'VMwareDVSVspanConfigSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareDVSHealthCheckConfig;
our @ISA = qw(DVSHealthCheckConfig);

our @property_list = (
);


VIMRuntime::make_get_set('VMwareDVSHealthCheckConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareDVSVlanMtuHealthCheckConfig;
our @ISA = qw(VMwareDVSHealthCheckConfig);

our @property_list = (
);


VIMRuntime::make_get_set('VMwareDVSVlanMtuHealthCheckConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareDVSTeamingHealthCheckConfig;
our @ISA = qw(VMwareDVSHealthCheckConfig);

our @property_list = (
);


VIMRuntime::make_get_set('VMwareDVSTeamingHealthCheckConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareDVSVlanHealthCheckResult;
our @ISA = qw(HostMemberUplinkHealthCheckResult);

our @property_list = (
   ['trunkedVlan', 'NumericRange', 1, 0],
   ['untrunkedVlan', 'NumericRange', 1, 0],
);


VIMRuntime::make_get_set('VMwareDVSVlanHealthCheckResult', 'trunkedVlan', 'untrunkedVlan');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareDVSMtuHealthCheckResult;
our @ISA = qw(HostMemberUplinkHealthCheckResult);

our @property_list = (
   ['mtuMismatch', 'boolean', undef, 1],
   ['vlanSupportSwitchMtu', 'NumericRange', 1, 0],
   ['vlanNotSupportSwitchMtu', 'NumericRange', 1, 0],
);


VIMRuntime::make_get_set('VMwareDVSMtuHealthCheckResult', 'mtuMismatch', 'vlanSupportSwitchMtu', 'vlanNotSupportSwitchMtu');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareDVSTeamingHealthCheckResult;
our @ISA = qw(HostMemberHealthCheckResult);

our @property_list = (
   ['teamingStatus', undef, undef, 1],
);


VIMRuntime::make_get_set('VMwareDVSTeamingHealthCheckResult', 'teamingStatus');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareUplinkLacpPolicy;
our @ISA = qw(InheritablePolicy);

our @property_list = (
   ['enable', 'BoolPolicy', undef, 0],
   ['mode', 'StringPolicy', undef, 0],
);


VIMRuntime::make_get_set('VMwareUplinkLacpPolicy', 'enable', 'mode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareDvsLacpGroupConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 0],
   ['name', undef, undef, 0],
   ['mode', undef, undef, 0],
   ['uplinkNum', undef, undef, 0],
   ['loadbalanceAlgorithm', undef, undef, 0],
   ['vlan', 'VMwareDvsLagVlanConfig', undef, 0],
   ['ipfix', 'VMwareDvsLagIpfixConfig', undef, 0],
   ['uplinkName', undef, 1, 0],
   ['uplinkPortKey', undef, 1, 0],
);


VIMRuntime::make_get_set('VMwareDvsLacpGroupConfig', 'key', 'name', 'mode', 'uplinkNum', 'loadbalanceAlgorithm', 'vlan', 'ipfix', 'uplinkName', 'uplinkPortKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVMwareDvsLacpGroupConfig;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VMwareDvsLacpGroupConfig', 'VMwareDvsLacpGroupConfig', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVMwareDvsLacpGroupConfig', 'VMwareDvsLacpGroupConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareDvsLagVlanConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vlanId', 'NumericRange', 1, 0],
);


VIMRuntime::make_get_set('VMwareDvsLagVlanConfig', 'vlanId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareDvsLagIpfixConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipfixEnabled', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VMwareDvsLagIpfixConfig', 'ipfixEnabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMwareDvsLacpGroupSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['lacpGroupConfig', 'VMwareDvsLacpGroupConfig', undef, 1],
   ['operation', undef, undef, 1],
);


VIMRuntime::make_get_set('VMwareDvsLacpGroupSpec', 'lacpGroupConfig', 'operation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVMwareDvsLacpGroupSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VMwareDvsLacpGroupSpec', 'VMwareDvsLacpGroupSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVMwareDvsLacpGroupSpec', 'VMwareDvsLacpGroupSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CryptoKeyId;
our @ISA = qw(DynamicData);

our @property_list = (
   ['keyId', undef, undef, 1],
   ['providerId', 'KeyProviderId', undef, 0],
);


VIMRuntime::make_get_set('CryptoKeyId', 'keyId', 'providerId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfCryptoKeyId;
our @ISA = qw(ComplexType);

our @property_list = (
   ['CryptoKeyId', 'CryptoKeyId', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfCryptoKeyId', 'CryptoKeyId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CryptoKeyPlain;
our @ISA = qw(DynamicData);

our @property_list = (
   ['keyId', 'CryptoKeyId', undef, 1],
   ['algorithm', undef, undef, 1],
   ['keyData', undef, undef, 1],
);


VIMRuntime::make_get_set('CryptoKeyPlain', 'keyId', 'algorithm', 'keyData');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfCryptoKeyPlain;
our @ISA = qw(ComplexType);

our @property_list = (
   ['CryptoKeyPlain', 'CryptoKeyPlain', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfCryptoKeyPlain', 'CryptoKeyPlain');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CryptoKeyResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['keyId', 'CryptoKeyId', undef, 1],
   ['success', 'boolean', undef, 1],
   ['reason', undef, undef, 0],
);


VIMRuntime::make_get_set('CryptoKeyResult', 'keyId', 'success', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfCryptoKeyResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['CryptoKeyResult', 'CryptoKeyResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfCryptoKeyResult', 'CryptoKeyResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CryptoManagerKmipCertificateInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['subject', undef, undef, 1],
   ['issuer', undef, undef, 1],
   ['serialNumber', undef, undef, 1],
   ['notBefore', undef, undef, 1],
   ['notAfter', undef, undef, 1],
   ['fingerprint', undef, undef, 1],
   ['checkTime', undef, undef, 1],
   ['secondsSinceValid', undef, undef, 0],
   ['secondsBeforeExpire', undef, undef, 0],
);


VIMRuntime::make_get_set('CryptoManagerKmipCertificateInfo', 'subject', 'issuer', 'serialNumber', 'notBefore', 'notAfter', 'fingerprint', 'checkTime', 'secondsSinceValid', 'secondsBeforeExpire');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CryptoManagerKmipServerStatus;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['status', 'ManagedEntityStatus', undef, 1],
   ['connectionStatus', undef, undef, 1],
   ['certInfo', 'CryptoManagerKmipCertificateInfo', undef, 0],
   ['clientTrustServer', 'boolean', undef, 0],
   ['serverTrustClient', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('CryptoManagerKmipServerStatus', 'name', 'status', 'connectionStatus', 'certInfo', 'clientTrustServer', 'serverTrustClient');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfCryptoManagerKmipServerStatus;
our @ISA = qw(ComplexType);

our @property_list = (
   ['CryptoManagerKmipServerStatus', 'CryptoManagerKmipServerStatus', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfCryptoManagerKmipServerStatus', 'CryptoManagerKmipServerStatus');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CryptoManagerKmipClusterStatus;
our @ISA = qw(DynamicData);

our @property_list = (
   ['clusterId', 'KeyProviderId', undef, 1],
   ['servers', 'CryptoManagerKmipServerStatus', 1, 1],
   ['clientCertInfo', 'CryptoManagerKmipCertificateInfo', undef, 0],
);


VIMRuntime::make_get_set('CryptoManagerKmipClusterStatus', 'clusterId', 'servers', 'clientCertInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfCryptoManagerKmipClusterStatus;
our @ISA = qw(ComplexType);

our @property_list = (
   ['CryptoManagerKmipClusterStatus', 'CryptoManagerKmipClusterStatus', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfCryptoManagerKmipClusterStatus', 'CryptoManagerKmipClusterStatus');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CryptoManagerKmipServerCertInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['certificate', undef, undef, 1],
   ['certInfo', 'CryptoManagerKmipCertificateInfo', undef, 0],
   ['clientTrustServer', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('CryptoManagerKmipServerCertInfo', 'certificate', 'certInfo', 'clientTrustServer');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CryptoSpec;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('CryptoSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CryptoSpecDecrypt;
our @ISA = qw(CryptoSpec);

our @property_list = (
);


VIMRuntime::make_get_set('CryptoSpecDecrypt');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CryptoSpecDeepRecrypt;
our @ISA = qw(CryptoSpec);

our @property_list = (
   ['newKeyId', 'CryptoKeyId', undef, 1],
);


VIMRuntime::make_get_set('CryptoSpecDeepRecrypt', 'newKeyId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CryptoSpecEncrypt;
our @ISA = qw(CryptoSpec);

our @property_list = (
   ['cryptoKeyId', 'CryptoKeyId', undef, 1],
);


VIMRuntime::make_get_set('CryptoSpecEncrypt', 'cryptoKeyId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CryptoSpecNoOp;
our @ISA = qw(CryptoSpec);

our @property_list = (
);


VIMRuntime::make_get_set('CryptoSpecNoOp');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CryptoSpecRegister;
our @ISA = qw(CryptoSpecNoOp);

our @property_list = (
   ['cryptoKeyId', 'CryptoKeyId', undef, 1],
);


VIMRuntime::make_get_set('CryptoSpecRegister', 'cryptoKeyId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CryptoSpecShallowRecrypt;
our @ISA = qw(CryptoSpec);

our @property_list = (
   ['newKeyId', 'CryptoKeyId', undef, 1],
);


VIMRuntime::make_get_set('CryptoSpecShallowRecrypt', 'newKeyId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package KeyProviderId;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
);


VIMRuntime::make_get_set('KeyProviderId', 'id');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package KmipClusterInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['clusterId', 'KeyProviderId', undef, 1],
   ['servers', 'KmipServerInfo', 1, 0],
   ['useAsDefault', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('KmipClusterInfo', 'clusterId', 'servers', 'useAsDefault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfKmipClusterInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['KmipClusterInfo', 'KmipClusterInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfKmipClusterInfo', 'KmipClusterInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package KmipServerInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['address', undef, undef, 1],
   ['port', undef, undef, 1],
   ['proxyAddress', undef, undef, 0],
   ['proxyPort', undef, undef, 0],
   ['reconnect', undef, undef, 0],
   ['protocol', undef, undef, 0],
   ['nbio', undef, undef, 0],
   ['timeout', undef, undef, 0],
   ['userName', undef, undef, 0],
);


VIMRuntime::make_get_set('KmipServerInfo', 'name', 'address', 'port', 'proxyAddress', 'proxyPort', 'reconnect', 'protocol', 'nbio', 'timeout', 'userName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfKmipServerInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['KmipServerInfo', 'KmipServerInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfKmipServerInfo', 'KmipServerInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package KmipServerSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['clusterId', 'KeyProviderId', undef, 1],
   ['info', 'KmipServerInfo', undef, 1],
   ['password', undef, undef, 0],
);


VIMRuntime::make_get_set('KmipServerSpec', 'clusterId', 'info', 'password');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package KmipServerStatus;
our @ISA = qw(DynamicData);

our @property_list = (
   ['clusterId', 'KeyProviderId', undef, 1],
   ['name', undef, undef, 1],
   ['status', 'ManagedEntityStatus', undef, 1],
   ['description', undef, undef, 1],
);


VIMRuntime::make_get_set('KmipServerStatus', 'clusterId', 'name', 'status', 'description');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package Event;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['chainId', undef, undef, 1],
   ['createdTime', undef, undef, 1],
   ['userName', undef, undef, 1],
   ['datacenter', 'DatacenterEventArgument', undef, 0],
   ['computeResource', 'ComputeResourceEventArgument', undef, 0],
   ['host', 'HostEventArgument', undef, 0],
   ['vm', 'VmEventArgument', undef, 0],
   ['ds', 'DatastoreEventArgument', undef, 0],
   ['net', 'NetworkEventArgument', undef, 0],
   ['dvs', 'DvsEventArgument', undef, 0],
   ['fullFormattedMessage', undef, undef, 0],
   ['changeTag', undef, undef, 0],
);


VIMRuntime::make_get_set('Event', 'key', 'chainId', 'createdTime', 'userName', 'datacenter', 'computeResource', 'host', 'vm', 'ds', 'net', 'dvs', 'fullFormattedMessage', 'changeTag');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfEvent;
our @ISA = qw(ComplexType);

our @property_list = (
   ['Event', 'Event', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfEvent', 'Event');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GeneralEvent;
our @ISA = qw(Event);

our @property_list = (
   ['message', undef, undef, 1],
);


VIMRuntime::make_get_set('GeneralEvent', 'message');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GeneralHostInfoEvent;
our @ISA = qw(GeneralEvent);

our @property_list = (
);


VIMRuntime::make_get_set('GeneralHostInfoEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GeneralHostWarningEvent;
our @ISA = qw(GeneralEvent);

our @property_list = (
);


VIMRuntime::make_get_set('GeneralHostWarningEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GeneralHostErrorEvent;
our @ISA = qw(GeneralEvent);

our @property_list = (
);


VIMRuntime::make_get_set('GeneralHostErrorEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GeneralVmInfoEvent;
our @ISA = qw(GeneralEvent);

our @property_list = (
);


VIMRuntime::make_get_set('GeneralVmInfoEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GeneralVmWarningEvent;
our @ISA = qw(GeneralEvent);

our @property_list = (
);


VIMRuntime::make_get_set('GeneralVmWarningEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GeneralVmErrorEvent;
our @ISA = qw(GeneralEvent);

our @property_list = (
);


VIMRuntime::make_get_set('GeneralVmErrorEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GeneralUserEvent;
our @ISA = qw(GeneralEvent);

our @property_list = (
   ['entity', 'ManagedEntityEventArgument', undef, 0],
);


VIMRuntime::make_get_set('GeneralUserEvent', 'entity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExtendedEventPair;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['value', undef, undef, 1],
);


VIMRuntime::make_get_set('ExtendedEventPair', 'key', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfExtendedEventPair;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ExtendedEventPair', 'ExtendedEventPair', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfExtendedEventPair', 'ExtendedEventPair');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExtendedEvent;
our @ISA = qw(GeneralEvent);

our @property_list = (
   ['eventTypeId', undef, undef, 1],
   ['managedObject', 'ManagedObjectReference', undef, 1],
   ['data', 'ExtendedEventPair', 1, 0],
);


VIMRuntime::make_get_set('ExtendedEvent', 'eventTypeId', 'managedObject', 'data');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HealthStatusChangedEvent;
our @ISA = qw(Event);

our @property_list = (
   ['componentId', undef, undef, 1],
   ['oldStatus', undef, undef, 1],
   ['newStatus', undef, undef, 1],
   ['componentName', undef, undef, 1],
   ['serviceId', undef, undef, 0],
);


VIMRuntime::make_get_set('HealthStatusChangedEvent', 'componentId', 'oldStatus', 'newStatus', 'componentName', 'serviceId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostInventoryUnreadableEvent;
our @ISA = qw(Event);

our @property_list = (
);


VIMRuntime::make_get_set('HostInventoryUnreadableEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatacenterEvent;
our @ISA = qw(Event);

our @property_list = (
);


VIMRuntime::make_get_set('DatacenterEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatacenterCreatedEvent;
our @ISA = qw(DatacenterEvent);

our @property_list = (
   ['parent', 'FolderEventArgument', undef, 1],
);


VIMRuntime::make_get_set('DatacenterCreatedEvent', 'parent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatacenterRenamedEvent;
our @ISA = qw(DatacenterEvent);

our @property_list = (
   ['oldName', undef, undef, 1],
   ['newName', undef, undef, 1],
);


VIMRuntime::make_get_set('DatacenterRenamedEvent', 'oldName', 'newName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SessionEvent;
our @ISA = qw(Event);

our @property_list = (
);


VIMRuntime::make_get_set('SessionEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ServerStartedSessionEvent;
our @ISA = qw(SessionEvent);

our @property_list = (
);


VIMRuntime::make_get_set('ServerStartedSessionEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UserLoginSessionEvent;
our @ISA = qw(SessionEvent);

our @property_list = (
   ['ipAddress', undef, undef, 1],
   ['userAgent', undef, undef, 0],
   ['locale', undef, undef, 1],
   ['sessionId', undef, undef, 1],
);


VIMRuntime::make_get_set('UserLoginSessionEvent', 'ipAddress', 'userAgent', 'locale', 'sessionId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UserLogoutSessionEvent;
our @ISA = qw(SessionEvent);

our @property_list = (
   ['ipAddress', undef, undef, 0],
   ['userAgent', undef, undef, 0],
   ['callCount', undef, undef, 0],
   ['sessionId', undef, undef, 0],
   ['loginTime', undef, undef, 0],
);


VIMRuntime::make_get_set('UserLogoutSessionEvent', 'ipAddress', 'userAgent', 'callCount', 'sessionId', 'loginTime');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package BadUsernameSessionEvent;
our @ISA = qw(SessionEvent);

our @property_list = (
   ['ipAddress', undef, undef, 1],
);


VIMRuntime::make_get_set('BadUsernameSessionEvent', 'ipAddress');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlreadyAuthenticatedSessionEvent;
our @ISA = qw(SessionEvent);

our @property_list = (
);


VIMRuntime::make_get_set('AlreadyAuthenticatedSessionEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoAccessUserEvent;
our @ISA = qw(SessionEvent);

our @property_list = (
   ['ipAddress', undef, undef, 1],
);


VIMRuntime::make_get_set('NoAccessUserEvent', 'ipAddress');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SessionTerminatedEvent;
our @ISA = qw(SessionEvent);

our @property_list = (
   ['sessionId', undef, undef, 1],
   ['terminatedUsername', undef, undef, 1],
);


VIMRuntime::make_get_set('SessionTerminatedEvent', 'sessionId', 'terminatedUsername');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GlobalMessageChangedEvent;
our @ISA = qw(SessionEvent);

our @property_list = (
   ['message', undef, undef, 1],
   ['prevMessage', undef, undef, 0],
);


VIMRuntime::make_get_set('GlobalMessageChangedEvent', 'message', 'prevMessage');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UpgradeEvent;
our @ISA = qw(Event);

our @property_list = (
   ['message', undef, undef, 1],
);


VIMRuntime::make_get_set('UpgradeEvent', 'message');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InfoUpgradeEvent;
our @ISA = qw(UpgradeEvent);

our @property_list = (
);


VIMRuntime::make_get_set('InfoUpgradeEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package WarningUpgradeEvent;
our @ISA = qw(UpgradeEvent);

our @property_list = (
);


VIMRuntime::make_get_set('WarningUpgradeEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ErrorUpgradeEvent;
our @ISA = qw(UpgradeEvent);

our @property_list = (
);


VIMRuntime::make_get_set('ErrorUpgradeEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UserUpgradeEvent;
our @ISA = qw(UpgradeEvent);

our @property_list = (
);


VIMRuntime::make_get_set('UserUpgradeEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostEvent;
our @ISA = qw(Event);

our @property_list = (
);


VIMRuntime::make_get_set('HostEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDasEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostDasEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostConnectedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostConnectedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDisconnectedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['reason', undef, undef, 0],
);


VIMRuntime::make_get_set('HostDisconnectedEvent', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSyncFailedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['reason', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('HostSyncFailedEvent', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostConnectionLostEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostConnectionLostEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostReconnectionFailedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostReconnectionFailedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostCnxFailedNoConnectionEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostCnxFailedNoConnectionEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostCnxFailedBadUsernameEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostCnxFailedBadUsernameEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostCnxFailedBadVersionEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostCnxFailedBadVersionEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostCnxFailedAlreadyManagedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['serverName', undef, undef, 1],
);


VIMRuntime::make_get_set('HostCnxFailedAlreadyManagedEvent', 'serverName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostCnxFailedNoLicenseEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostCnxFailedNoLicenseEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostCnxFailedNetworkErrorEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostCnxFailedNetworkErrorEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostRemovedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostRemovedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostCnxFailedCcagentUpgradeEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostCnxFailedCcagentUpgradeEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostCnxFailedBadCcagentEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostCnxFailedBadCcagentEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostCnxFailedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostCnxFailedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostCnxFailedAccountFailedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostCnxFailedAccountFailedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostCnxFailedNoAccessEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostCnxFailedNoAccessEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostShutdownEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['reason', undef, undef, 1],
);


VIMRuntime::make_get_set('HostShutdownEvent', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostCnxFailedNotFoundEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostCnxFailedNotFoundEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostCnxFailedTimeoutEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostCnxFailedTimeoutEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostUpgradeFailedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostUpgradeFailedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EnteringMaintenanceModeEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('EnteringMaintenanceModeEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EnteredMaintenanceModeEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('EnteredMaintenanceModeEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExitMaintenanceModeEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('ExitMaintenanceModeEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CanceledHostOperationEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('CanceledHostOperationEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TimedOutHostOperationEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('TimedOutHostOperationEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDasEnabledEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostDasEnabledEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDasDisabledEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostDasDisabledEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDasEnablingEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostDasEnablingEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDasDisablingEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostDasDisablingEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDasErrorEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['message', undef, undef, 0],
   ['reason', undef, undef, 0],
);


VIMRuntime::make_get_set('HostDasErrorEvent', 'message', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDasOkEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostDasOkEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VcAgentUpgradedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VcAgentUpgradedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VcAgentUninstalledEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VcAgentUninstalledEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VcAgentUpgradeFailedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['reason', undef, undef, 0],
);


VIMRuntime::make_get_set('VcAgentUpgradeFailedEvent', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VcAgentUninstallFailedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['reason', undef, undef, 0],
);


VIMRuntime::make_get_set('VcAgentUninstallFailedEvent', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostAddedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostAddedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostAddFailedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['hostname', undef, undef, 1],
);


VIMRuntime::make_get_set('HostAddFailedEvent', 'hostname');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostIpChangedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['oldIP', undef, undef, 1],
   ['newIP', undef, undef, 1],
);


VIMRuntime::make_get_set('HostIpChangedEvent', 'oldIP', 'newIP');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EnteringStandbyModeEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('EnteringStandbyModeEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DrsEnteringStandbyModeEvent;
our @ISA = qw(EnteringStandbyModeEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DrsEnteringStandbyModeEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EnteredStandbyModeEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('EnteredStandbyModeEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DrsEnteredStandbyModeEvent;
our @ISA = qw(EnteredStandbyModeEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DrsEnteredStandbyModeEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExitingStandbyModeEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('ExitingStandbyModeEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DrsExitingStandbyModeEvent;
our @ISA = qw(ExitingStandbyModeEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DrsExitingStandbyModeEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExitedStandbyModeEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('ExitedStandbyModeEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DrsExitedStandbyModeEvent;
our @ISA = qw(ExitedStandbyModeEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DrsExitedStandbyModeEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExitStandbyModeFailedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('ExitStandbyModeFailedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DrsExitStandbyModeFailedEvent;
our @ISA = qw(ExitStandbyModeFailedEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DrsExitStandbyModeFailedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UpdatedAgentBeingRestartedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('UpdatedAgentBeingRestartedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AccountCreatedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['spec', 'HostAccountSpec', undef, 1],
   ['group', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('AccountCreatedEvent', 'spec', 'group');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AccountRemovedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['account', undef, undef, 1],
   ['group', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('AccountRemovedEvent', 'account', 'group');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UserPasswordChanged;
our @ISA = qw(HostEvent);

our @property_list = (
   ['userLogin', undef, undef, 1],
);


VIMRuntime::make_get_set('UserPasswordChanged', 'userLogin');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AccountUpdatedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['spec', 'HostAccountSpec', undef, 1],
   ['group', 'boolean', undef, 1],
   ['prevDescription', undef, undef, 0],
);


VIMRuntime::make_get_set('AccountUpdatedEvent', 'spec', 'group', 'prevDescription');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UserAssignedToGroup;
our @ISA = qw(HostEvent);

our @property_list = (
   ['userLogin', undef, undef, 1],
   ['group', undef, undef, 1],
);


VIMRuntime::make_get_set('UserAssignedToGroup', 'userLogin', 'group');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UserUnassignedFromGroup;
our @ISA = qw(HostEvent);

our @property_list = (
   ['userLogin', undef, undef, 1],
   ['group', undef, undef, 1],
);


VIMRuntime::make_get_set('UserUnassignedFromGroup', 'userLogin', 'group');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatastorePrincipalConfigured;
our @ISA = qw(HostEvent);

our @property_list = (
   ['datastorePrincipal', undef, undef, 1],
);


VIMRuntime::make_get_set('DatastorePrincipalConfigured', 'datastorePrincipal');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMFSDatastoreCreatedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['datastore', 'DatastoreEventArgument', undef, 1],
   ['datastoreUrl', undef, undef, 0],
);


VIMRuntime::make_get_set('VMFSDatastoreCreatedEvent', 'datastore', 'datastoreUrl');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NASDatastoreCreatedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['datastore', 'DatastoreEventArgument', undef, 1],
   ['datastoreUrl', undef, undef, 0],
);


VIMRuntime::make_get_set('NASDatastoreCreatedEvent', 'datastore', 'datastoreUrl');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LocalDatastoreCreatedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['datastore', 'DatastoreEventArgument', undef, 1],
   ['datastoreUrl', undef, undef, 0],
);


VIMRuntime::make_get_set('LocalDatastoreCreatedEvent', 'datastore', 'datastoreUrl');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMFSDatastoreExtendedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['datastore', 'DatastoreEventArgument', undef, 1],
);


VIMRuntime::make_get_set('VMFSDatastoreExtendedEvent', 'datastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMFSDatastoreExpandedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['datastore', 'DatastoreEventArgument', undef, 1],
);


VIMRuntime::make_get_set('VMFSDatastoreExpandedEvent', 'datastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatastoreRemovedOnHostEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['datastore', 'DatastoreEventArgument', undef, 1],
);


VIMRuntime::make_get_set('DatastoreRemovedOnHostEvent', 'datastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatastoreRenamedOnHostEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['oldName', undef, undef, 1],
   ['newName', undef, undef, 1],
);


VIMRuntime::make_get_set('DatastoreRenamedOnHostEvent', 'oldName', 'newName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DuplicateIpDetectedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['duplicateIP', undef, undef, 1],
   ['macAddress', undef, undef, 1],
);


VIMRuntime::make_get_set('DuplicateIpDetectedEvent', 'duplicateIP', 'macAddress');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatastoreDiscoveredEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['datastore', 'DatastoreEventArgument', undef, 1],
);


VIMRuntime::make_get_set('DatastoreDiscoveredEvent', 'datastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DrsResourceConfigureFailedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['reason', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('DrsResourceConfigureFailedEvent', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DrsResourceConfigureSyncedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DrsResourceConfigureSyncedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostGetShortNameFailedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostGetShortNameFailedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostShortNameToIpFailedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['shortName', undef, undef, 1],
);


VIMRuntime::make_get_set('HostShortNameToIpFailedEvent', 'shortName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostIpToShortNameFailedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostIpToShortNameFailedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPrimaryAgentNotShortNameEvent;
our @ISA = qw(HostDasEvent);

our @property_list = (
   ['primaryAgent', undef, undef, 1],
);


VIMRuntime::make_get_set('HostPrimaryAgentNotShortNameEvent', 'primaryAgent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNotInClusterEvent;
our @ISA = qw(HostDasEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostNotInClusterEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostIsolationIpPingFailedEvent;
our @ISA = qw(HostDasEvent);

our @property_list = (
   ['isolationIp', undef, undef, 1],
);


VIMRuntime::make_get_set('HostIsolationIpPingFailedEvent', 'isolationIp');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostIpInconsistentEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['ipAddress', undef, undef, 1],
   ['ipAddress2', undef, undef, 1],
);


VIMRuntime::make_get_set('HostIpInconsistentEvent', 'ipAddress', 'ipAddress2');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostUserWorldSwapNotEnabledEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostUserWorldSwapNotEnabledEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNonCompliantEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostNonCompliantEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostCompliantEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostCompliantEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostComplianceCheckedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['profile', 'ProfileEventArgument', undef, 1],
);


VIMRuntime::make_get_set('HostComplianceCheckedEvent', 'profile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterComplianceCheckedEvent;
our @ISA = qw(ClusterEvent);

our @property_list = (
   ['profile', 'ProfileEventArgument', undef, 1],
);


VIMRuntime::make_get_set('ClusterComplianceCheckedEvent', 'profile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileEvent;
our @ISA = qw(Event);

our @property_list = (
   ['profile', 'ProfileEventArgument', undef, 1],
);


VIMRuntime::make_get_set('ProfileEvent', 'profile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileCreatedEvent;
our @ISA = qw(ProfileEvent);

our @property_list = (
);


VIMRuntime::make_get_set('ProfileCreatedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileRemovedEvent;
our @ISA = qw(ProfileEvent);

our @property_list = (
);


VIMRuntime::make_get_set('ProfileRemovedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileAssociatedEvent;
our @ISA = qw(ProfileEvent);

our @property_list = (
);


VIMRuntime::make_get_set('ProfileAssociatedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileDissociatedEvent;
our @ISA = qw(ProfileEvent);

our @property_list = (
);


VIMRuntime::make_get_set('ProfileDissociatedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostConfigAppliedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostConfigAppliedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileReferenceHostChangedEvent;
our @ISA = qw(ProfileEvent);

our @property_list = (
   ['referenceHost', 'ManagedObjectReference', undef, 0],
   ['referenceHostName', undef, undef, 0],
   ['prevReferenceHostName', undef, undef, 0],
);


VIMRuntime::make_get_set('ProfileReferenceHostChangedEvent', 'referenceHost', 'referenceHostName', 'prevReferenceHostName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileChangedEvent;
our @ISA = qw(ProfileEvent);

our @property_list = (
);


VIMRuntime::make_get_set('ProfileChangedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostProfileAppliedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['profile', 'ProfileEventArgument', undef, 1],
);


VIMRuntime::make_get_set('HostProfileAppliedEvent', 'profile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostShortNameInconsistentEvent;
our @ISA = qw(HostDasEvent);

our @property_list = (
   ['shortName', undef, undef, 1],
   ['shortName2', undef, undef, 1],
);


VIMRuntime::make_get_set('HostShortNameInconsistentEvent', 'shortName', 'shortName2');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNoRedundantManagementNetworkEvent;
our @ISA = qw(HostDasEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostNoRedundantManagementNetworkEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNoAvailableNetworksEvent;
our @ISA = qw(HostDasEvent);

our @property_list = (
   ['ips', undef, undef, 0],
);


VIMRuntime::make_get_set('HostNoAvailableNetworksEvent', 'ips');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostExtraNetworksEvent;
our @ISA = qw(HostDasEvent);

our @property_list = (
   ['ips', undef, undef, 0],
);


VIMRuntime::make_get_set('HostExtraNetworksEvent', 'ips');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNoHAEnabledPortGroupsEvent;
our @ISA = qw(HostDasEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostNoHAEnabledPortGroupsEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostMissingNetworksEvent;
our @ISA = qw(HostDasEvent);

our @property_list = (
   ['ips', undef, undef, 0],
);


VIMRuntime::make_get_set('HostMissingNetworksEvent', 'ips');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VnicPortArgument;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vnic', undef, undef, 1],
   ['port', 'DistributedVirtualSwitchPortConnection', undef, 1],
);


VIMRuntime::make_get_set('VnicPortArgument', 'vnic', 'port');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVnicPortArgument;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VnicPortArgument', 'VnicPortArgument', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVnicPortArgument', 'VnicPortArgument');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVnicConnectedToCustomizedDVPortEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['vnic', 'VnicPortArgument', undef, 1],
   ['prevPortKey', undef, undef, 0],
);


VIMRuntime::make_get_set('HostVnicConnectedToCustomizedDVPortEvent', 'vnic', 'prevPortKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GhostDvsProxySwitchDetectedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['switchUuid', undef, 1, 1],
);


VIMRuntime::make_get_set('GhostDvsProxySwitchDetectedEvent', 'switchUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GhostDvsProxySwitchRemovedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['switchUuid', undef, 1, 1],
);


VIMRuntime::make_get_set('GhostDvsProxySwitchRemovedEvent', 'switchUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmEvent;
our @ISA = qw(Event);

our @property_list = (
   ['template', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('VmEvent', 'template');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmPoweredOffEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmPoweredOffEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmPoweredOnEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmPoweredOnEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmSuspendedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmSuspendedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmStartingEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmStartingEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmStoppingEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmStoppingEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmSuspendingEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmSuspendingEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmResumingEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmResumingEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmDisconnectedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmDisconnectedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmRemoteConsoleConnectedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmRemoteConsoleConnectedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmRemoteConsoleDisconnectedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmRemoteConsoleDisconnectedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmDiscoveredEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmDiscoveredEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmOrphanedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmOrphanedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmBeingCreatedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['configSpec', 'VirtualMachineConfigSpec', undef, 0],
);


VIMRuntime::make_get_set('VmBeingCreatedEvent', 'configSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmCreatedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmCreatedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmStartRecordingEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmStartRecordingEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmEndRecordingEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmEndRecordingEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmStartReplayingEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmStartReplayingEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmEndReplayingEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmEndReplayingEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmRegisteredEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmRegisteredEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmAutoRenameEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['oldName', undef, undef, 1],
   ['newName', undef, undef, 1],
);


VIMRuntime::make_get_set('VmAutoRenameEvent', 'oldName', 'newName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmBeingHotMigratedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['destHost', 'HostEventArgument', undef, 1],
   ['destDatacenter', 'DatacenterEventArgument', undef, 0],
   ['destDatastore', 'DatastoreEventArgument', undef, 0],
);


VIMRuntime::make_get_set('VmBeingHotMigratedEvent', 'destHost', 'destDatacenter', 'destDatastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmResettingEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmResettingEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmStaticMacConflictEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['conflictedVm', 'VmEventArgument', undef, 1],
   ['mac', undef, undef, 1],
);


VIMRuntime::make_get_set('VmStaticMacConflictEvent', 'conflictedVm', 'mac');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmMacConflictEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['conflictedVm', 'VmEventArgument', undef, 1],
   ['mac', undef, undef, 1],
);


VIMRuntime::make_get_set('VmMacConflictEvent', 'conflictedVm', 'mac');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmBeingDeployedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['srcTemplate', 'VmEventArgument', undef, 1],
);


VIMRuntime::make_get_set('VmBeingDeployedEvent', 'srcTemplate');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmDeployFailedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['destDatastore', 'EntityEventArgument', undef, 1],
   ['reason', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('VmDeployFailedEvent', 'destDatastore', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmDeployedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['srcTemplate', 'VmEventArgument', undef, 1],
);


VIMRuntime::make_get_set('VmDeployedEvent', 'srcTemplate');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmMacChangedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['adapter', undef, undef, 1],
   ['oldMac', undef, undef, 1],
   ['newMac', undef, undef, 1],
);


VIMRuntime::make_get_set('VmMacChangedEvent', 'adapter', 'oldMac', 'newMac');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmMacAssignedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['adapter', undef, undef, 1],
   ['mac', undef, undef, 1],
);


VIMRuntime::make_get_set('VmMacAssignedEvent', 'adapter', 'mac');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmUuidConflictEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['conflictedVm', 'VmEventArgument', undef, 1],
   ['uuid', undef, undef, 1],
);


VIMRuntime::make_get_set('VmUuidConflictEvent', 'conflictedVm', 'uuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmInstanceUuidConflictEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['conflictedVm', 'VmEventArgument', undef, 1],
   ['instanceUuid', undef, undef, 1],
);


VIMRuntime::make_get_set('VmInstanceUuidConflictEvent', 'conflictedVm', 'instanceUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmBeingMigratedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['destHost', 'HostEventArgument', undef, 1],
   ['destDatacenter', 'DatacenterEventArgument', undef, 0],
   ['destDatastore', 'DatastoreEventArgument', undef, 0],
);


VIMRuntime::make_get_set('VmBeingMigratedEvent', 'destHost', 'destDatacenter', 'destDatastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmFailedMigrateEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['destHost', 'HostEventArgument', undef, 1],
   ['reason', 'LocalizedMethodFault', undef, 1],
   ['destDatacenter', 'DatacenterEventArgument', undef, 0],
   ['destDatastore', 'DatastoreEventArgument', undef, 0],
);


VIMRuntime::make_get_set('VmFailedMigrateEvent', 'destHost', 'reason', 'destDatacenter', 'destDatastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmMigratedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['sourceHost', 'HostEventArgument', undef, 1],
   ['sourceDatacenter', 'DatacenterEventArgument', undef, 0],
   ['sourceDatastore', 'DatastoreEventArgument', undef, 0],
);


VIMRuntime::make_get_set('VmMigratedEvent', 'sourceHost', 'sourceDatacenter', 'sourceDatastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmUnsupportedStartingEvent;
our @ISA = qw(VmStartingEvent);

our @property_list = (
   ['guestId', undef, undef, 1],
);


VIMRuntime::make_get_set('VmUnsupportedStartingEvent', 'guestId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DrsVmMigratedEvent;
our @ISA = qw(VmMigratedEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DrsVmMigratedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DrsVmPoweredOnEvent;
our @ISA = qw(VmPoweredOnEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DrsVmPoweredOnEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DrsRuleViolationEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DrsRuleViolationEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DrsSoftRuleViolationEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DrsSoftRuleViolationEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DrsRuleComplianceEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DrsRuleComplianceEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmRelocateSpecEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmRelocateSpecEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmBeingRelocatedEvent;
our @ISA = qw(VmRelocateSpecEvent);

our @property_list = (
   ['destHost', 'HostEventArgument', undef, 1],
   ['destDatacenter', 'DatacenterEventArgument', undef, 0],
   ['destDatastore', 'DatastoreEventArgument', undef, 0],
);


VIMRuntime::make_get_set('VmBeingRelocatedEvent', 'destHost', 'destDatacenter', 'destDatastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmRelocatedEvent;
our @ISA = qw(VmRelocateSpecEvent);

our @property_list = (
   ['sourceHost', 'HostEventArgument', undef, 1],
   ['sourceDatacenter', 'DatacenterEventArgument', undef, 0],
   ['sourceDatastore', 'DatastoreEventArgument', undef, 0],
);


VIMRuntime::make_get_set('VmRelocatedEvent', 'sourceHost', 'sourceDatacenter', 'sourceDatastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmRelocateFailedEvent;
our @ISA = qw(VmRelocateSpecEvent);

our @property_list = (
   ['destHost', 'HostEventArgument', undef, 1],
   ['reason', 'LocalizedMethodFault', undef, 1],
   ['destDatacenter', 'DatacenterEventArgument', undef, 0],
   ['destDatastore', 'DatastoreEventArgument', undef, 0],
);


VIMRuntime::make_get_set('VmRelocateFailedEvent', 'destHost', 'reason', 'destDatacenter', 'destDatastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmEmigratingEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmEmigratingEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmCloneEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmCloneEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmBeingClonedEvent;
our @ISA = qw(VmCloneEvent);

our @property_list = (
   ['destFolder', 'FolderEventArgument', undef, 1],
   ['destName', undef, undef, 1],
   ['destHost', 'HostEventArgument', undef, 1],
);


VIMRuntime::make_get_set('VmBeingClonedEvent', 'destFolder', 'destName', 'destHost');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmBeingClonedNoFolderEvent;
our @ISA = qw(VmCloneEvent);

our @property_list = (
   ['destName', undef, undef, 1],
   ['destHost', 'HostEventArgument', undef, 1],
);


VIMRuntime::make_get_set('VmBeingClonedNoFolderEvent', 'destName', 'destHost');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmCloneFailedEvent;
our @ISA = qw(VmCloneEvent);

our @property_list = (
   ['destFolder', 'FolderEventArgument', undef, 1],
   ['destName', undef, undef, 1],
   ['destHost', 'HostEventArgument', undef, 1],
   ['reason', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('VmCloneFailedEvent', 'destFolder', 'destName', 'destHost', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmClonedEvent;
our @ISA = qw(VmCloneEvent);

our @property_list = (
   ['sourceVm', 'VmEventArgument', undef, 1],
);


VIMRuntime::make_get_set('VmClonedEvent', 'sourceVm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmResourceReallocatedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['configChanges', 'ChangesInfoEventArgument', undef, 0],
);


VIMRuntime::make_get_set('VmResourceReallocatedEvent', 'configChanges');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmRenamedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['oldName', undef, undef, 1],
   ['newName', undef, undef, 1],
);


VIMRuntime::make_get_set('VmRenamedEvent', 'oldName', 'newName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmDateRolledBackEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmDateRolledBackEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmNoNetworkAccessEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['destHost', 'HostEventArgument', undef, 1],
);


VIMRuntime::make_get_set('VmNoNetworkAccessEvent', 'destHost');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmDiskFailedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['disk', undef, undef, 1],
   ['reason', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('VmDiskFailedEvent', 'disk', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmFailedToPowerOnEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['reason', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('VmFailedToPowerOnEvent', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmFailedToPowerOffEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['reason', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('VmFailedToPowerOffEvent', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmFailedToSuspendEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['reason', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('VmFailedToSuspendEvent', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmFailedToResetEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['reason', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('VmFailedToResetEvent', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmFailedToShutdownGuestEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['reason', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('VmFailedToShutdownGuestEvent', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmFailedToRebootGuestEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['reason', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('VmFailedToRebootGuestEvent', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmFailedToStandbyGuestEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['reason', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('VmFailedToStandbyGuestEvent', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmRemovedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmRemovedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmGuestShutdownEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmGuestShutdownEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmGuestRebootEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmGuestRebootEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmGuestStandbyEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmGuestStandbyEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmUpgradingEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['version', undef, undef, 1],
);


VIMRuntime::make_get_set('VmUpgradingEvent', 'version');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmUpgradeCompleteEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['version', undef, undef, 1],
);


VIMRuntime::make_get_set('VmUpgradeCompleteEvent', 'version');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmUpgradeFailedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmUpgradeFailedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmRestartedOnAlternateHostEvent;
our @ISA = qw(VmPoweredOnEvent);

our @property_list = (
   ['sourceHost', 'HostEventArgument', undef, 1],
);


VIMRuntime::make_get_set('VmRestartedOnAlternateHostEvent', 'sourceHost');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmReconfiguredEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['configSpec', 'VirtualMachineConfigSpec', undef, 1],
   ['configChanges', 'ChangesInfoEventArgument', undef, 0],
);


VIMRuntime::make_get_set('VmReconfiguredEvent', 'configSpec', 'configChanges');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmMessageEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['message', undef, undef, 1],
   ['messageInfo', 'VirtualMachineMessage', 1, 0],
);


VIMRuntime::make_get_set('VmMessageEvent', 'message', 'messageInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmMessageWarningEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['message', undef, undef, 1],
   ['messageInfo', 'VirtualMachineMessage', 1, 0],
);


VIMRuntime::make_get_set('VmMessageWarningEvent', 'message', 'messageInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmMessageErrorEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['message', undef, undef, 1],
   ['messageInfo', 'VirtualMachineMessage', 1, 0],
);


VIMRuntime::make_get_set('VmMessageErrorEvent', 'message', 'messageInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmConfigMissingEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmConfigMissingEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmPowerOffOnIsolationEvent;
our @ISA = qw(VmPoweredOffEvent);

our @property_list = (
   ['isolatedHost', 'HostEventArgument', undef, 1],
);


VIMRuntime::make_get_set('VmPowerOffOnIsolationEvent', 'isolatedHost');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmShutdownOnIsolationEvent;
our @ISA = qw(VmPoweredOffEvent);

our @property_list = (
   ['isolatedHost', 'HostEventArgument', undef, 1],
   ['shutdownResult', undef, undef, 0],
);


VIMRuntime::make_get_set('VmShutdownOnIsolationEvent', 'isolatedHost', 'shutdownResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmFailoverFailed;
our @ISA = qw(VmEvent);

our @property_list = (
   ['reason', 'LocalizedMethodFault', undef, 0],
);


VIMRuntime::make_get_set('VmFailoverFailed', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmDasBeingResetEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['reason', undef, undef, 0],
);


VIMRuntime::make_get_set('VmDasBeingResetEvent', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmDasResetFailedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmDasResetFailedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmMaxRestartCountReached;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmMaxRestartCountReached');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmMaxFTRestartCountReached;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmMaxFTRestartCountReached');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmDasBeingResetWithScreenshotEvent;
our @ISA = qw(VmDasBeingResetEvent);

our @property_list = (
   ['screenshotFilePath', undef, undef, 1],
);


VIMRuntime::make_get_set('VmDasBeingResetWithScreenshotEvent', 'screenshotFilePath');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NotEnoughResourcesToStartVmEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['reason', undef, undef, 0],
);


VIMRuntime::make_get_set('NotEnoughResourcesToStartVmEvent', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmUuidAssignedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['uuid', undef, undef, 1],
);


VIMRuntime::make_get_set('VmUuidAssignedEvent', 'uuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmInstanceUuidAssignedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['instanceUuid', undef, undef, 1],
);


VIMRuntime::make_get_set('VmInstanceUuidAssignedEvent', 'instanceUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmUuidChangedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['oldUuid', undef, undef, 1],
   ['newUuid', undef, undef, 1],
);


VIMRuntime::make_get_set('VmUuidChangedEvent', 'oldUuid', 'newUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmInstanceUuidChangedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['oldInstanceUuid', undef, undef, 1],
   ['newInstanceUuid', undef, undef, 1],
);


VIMRuntime::make_get_set('VmInstanceUuidChangedEvent', 'oldInstanceUuid', 'newInstanceUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmWwnConflictEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['conflictedVms', 'VmEventArgument', 1, 0],
   ['conflictedHosts', 'HostEventArgument', 1, 0],
   ['wwn', undef, undef, 1],
);


VIMRuntime::make_get_set('VmWwnConflictEvent', 'conflictedVms', 'conflictedHosts', 'wwn');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmAcquiredMksTicketEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmAcquiredMksTicketEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmAcquiredTicketEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['ticketType', undef, undef, 1],
);


VIMRuntime::make_get_set('VmAcquiredTicketEvent', 'ticketType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmGuestOSCrashedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmGuestOSCrashedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostWwnConflictEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['conflictedVms', 'VmEventArgument', 1, 0],
   ['conflictedHosts', 'HostEventArgument', 1, 0],
   ['wwn', undef, undef, 1],
);


VIMRuntime::make_get_set('HostWwnConflictEvent', 'conflictedVms', 'conflictedHosts', 'wwn');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmWwnAssignedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['nodeWwns', undef, 1, 1],
   ['portWwns', undef, 1, 1],
);


VIMRuntime::make_get_set('VmWwnAssignedEvent', 'nodeWwns', 'portWwns');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmWwnChangedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['oldNodeWwns', undef, 1, 0],
   ['oldPortWwns', undef, 1, 0],
   ['newNodeWwns', undef, 1, 0],
   ['newPortWwns', undef, 1, 0],
);


VIMRuntime::make_get_set('VmWwnChangedEvent', 'oldNodeWwns', 'oldPortWwns', 'newNodeWwns', 'newPortWwns');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmSecondaryAddedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmSecondaryAddedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmFaultToleranceTurnedOffEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmFaultToleranceTurnedOffEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmFaultToleranceStateChangedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['oldState', 'VirtualMachineFaultToleranceState', undef, 1],
   ['newState', 'VirtualMachineFaultToleranceState', undef, 1],
);


VIMRuntime::make_get_set('VmFaultToleranceStateChangedEvent', 'oldState', 'newState');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmSecondaryDisabledEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmSecondaryDisabledEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmSecondaryDisabledBySystemEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['reason', 'LocalizedMethodFault', undef, 0],
);


VIMRuntime::make_get_set('VmSecondaryDisabledBySystemEvent', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmSecondaryEnabledEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmSecondaryEnabledEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmStartingSecondaryEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmStartingSecondaryEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmSecondaryStartedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmSecondaryStartedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmFailedUpdatingSecondaryConfig;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmFailedUpdatingSecondaryConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmFailedStartingSecondaryEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['reason', undef, undef, 0],
);


VIMRuntime::make_get_set('VmFailedStartingSecondaryEvent', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmTimedoutStartingSecondaryEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['timeout', undef, undef, 0],
);


VIMRuntime::make_get_set('VmTimedoutStartingSecondaryEvent', 'timeout');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmNoCompatibleHostForSecondaryEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmNoCompatibleHostForSecondaryEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmPrimaryFailoverEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['reason', undef, undef, 0],
);


VIMRuntime::make_get_set('VmPrimaryFailoverEvent', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmFaultToleranceVmTerminatedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['reason', undef, undef, 0],
);


VIMRuntime::make_get_set('VmFaultToleranceVmTerminatedEvent', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostWwnChangedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['oldNodeWwns', undef, 1, 0],
   ['oldPortWwns', undef, 1, 0],
   ['newNodeWwns', undef, 1, 0],
   ['newPortWwns', undef, 1, 0],
);


VIMRuntime::make_get_set('HostWwnChangedEvent', 'oldNodeWwns', 'oldPortWwns', 'newNodeWwns', 'newPortWwns');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostAdminDisableEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostAdminDisableEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostAdminEnableEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostAdminEnableEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostEnableAdminFailedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['permissions', 'Permission', 1, 1],
);


VIMRuntime::make_get_set('HostEnableAdminFailedEvent', 'permissions');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmFailedRelayoutOnVmfs2DatastoreEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmFailedRelayoutOnVmfs2DatastoreEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmFailedRelayoutEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['reason', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('VmFailedRelayoutEvent', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmRelayoutSuccessfulEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmRelayoutSuccessfulEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmRelayoutUpToDateEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmRelayoutUpToDateEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmConnectedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmConnectedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmPoweringOnWithCustomizedDVPortEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['vnic', 'VnicPortArgument', 1, 1],
);


VIMRuntime::make_get_set('VmPoweringOnWithCustomizedDVPortEvent', 'vnic');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmDasUpdateErrorEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmDasUpdateErrorEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoMaintenanceModeDrsRecommendationForVM;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('NoMaintenanceModeDrsRecommendationForVM');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmDasUpdateOkEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmDasUpdateOkEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ScheduledTaskEvent;
our @ISA = qw(Event);

our @property_list = (
   ['scheduledTask', 'ScheduledTaskEventArgument', undef, 1],
   ['entity', 'ManagedEntityEventArgument', undef, 1],
);


VIMRuntime::make_get_set('ScheduledTaskEvent', 'scheduledTask', 'entity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ScheduledTaskCreatedEvent;
our @ISA = qw(ScheduledTaskEvent);

our @property_list = (
);


VIMRuntime::make_get_set('ScheduledTaskCreatedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ScheduledTaskStartedEvent;
our @ISA = qw(ScheduledTaskEvent);

our @property_list = (
);


VIMRuntime::make_get_set('ScheduledTaskStartedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ScheduledTaskRemovedEvent;
our @ISA = qw(ScheduledTaskEvent);

our @property_list = (
);


VIMRuntime::make_get_set('ScheduledTaskRemovedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ScheduledTaskReconfiguredEvent;
our @ISA = qw(ScheduledTaskEvent);

our @property_list = (
   ['configChanges', 'ChangesInfoEventArgument', undef, 0],
);


VIMRuntime::make_get_set('ScheduledTaskReconfiguredEvent', 'configChanges');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ScheduledTaskCompletedEvent;
our @ISA = qw(ScheduledTaskEvent);

our @property_list = (
);


VIMRuntime::make_get_set('ScheduledTaskCompletedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ScheduledTaskFailedEvent;
our @ISA = qw(ScheduledTaskEvent);

our @property_list = (
   ['reason', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('ScheduledTaskFailedEvent', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ScheduledTaskEmailCompletedEvent;
our @ISA = qw(ScheduledTaskEvent);

our @property_list = (
   ['to', undef, undef, 1],
);


VIMRuntime::make_get_set('ScheduledTaskEmailCompletedEvent', 'to');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ScheduledTaskEmailFailedEvent;
our @ISA = qw(ScheduledTaskEvent);

our @property_list = (
   ['to', undef, undef, 1],
   ['reason', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('ScheduledTaskEmailFailedEvent', 'to', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmEvent;
our @ISA = qw(Event);

our @property_list = (
   ['alarm', 'AlarmEventArgument', undef, 1],
);


VIMRuntime::make_get_set('AlarmEvent', 'alarm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmCreatedEvent;
our @ISA = qw(AlarmEvent);

our @property_list = (
   ['entity', 'ManagedEntityEventArgument', undef, 1],
);


VIMRuntime::make_get_set('AlarmCreatedEvent', 'entity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmStatusChangedEvent;
our @ISA = qw(AlarmEvent);

our @property_list = (
   ['source', 'ManagedEntityEventArgument', undef, 1],
   ['entity', 'ManagedEntityEventArgument', undef, 1],
   ['from', undef, undef, 1],
   ['to', undef, undef, 1],
);


VIMRuntime::make_get_set('AlarmStatusChangedEvent', 'source', 'entity', 'from', 'to');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmActionTriggeredEvent;
our @ISA = qw(AlarmEvent);

our @property_list = (
   ['source', 'ManagedEntityEventArgument', undef, 1],
   ['entity', 'ManagedEntityEventArgument', undef, 1],
);


VIMRuntime::make_get_set('AlarmActionTriggeredEvent', 'source', 'entity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmEmailCompletedEvent;
our @ISA = qw(AlarmEvent);

our @property_list = (
   ['entity', 'ManagedEntityEventArgument', undef, 1],
   ['to', undef, undef, 1],
);


VIMRuntime::make_get_set('AlarmEmailCompletedEvent', 'entity', 'to');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmEmailFailedEvent;
our @ISA = qw(AlarmEvent);

our @property_list = (
   ['entity', 'ManagedEntityEventArgument', undef, 1],
   ['to', undef, undef, 1],
   ['reason', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('AlarmEmailFailedEvent', 'entity', 'to', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmSnmpCompletedEvent;
our @ISA = qw(AlarmEvent);

our @property_list = (
   ['entity', 'ManagedEntityEventArgument', undef, 1],
);


VIMRuntime::make_get_set('AlarmSnmpCompletedEvent', 'entity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmSnmpFailedEvent;
our @ISA = qw(AlarmEvent);

our @property_list = (
   ['entity', 'ManagedEntityEventArgument', undef, 1],
   ['reason', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('AlarmSnmpFailedEvent', 'entity', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmScriptCompleteEvent;
our @ISA = qw(AlarmEvent);

our @property_list = (
   ['entity', 'ManagedEntityEventArgument', undef, 1],
   ['script', undef, undef, 1],
);


VIMRuntime::make_get_set('AlarmScriptCompleteEvent', 'entity', 'script');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmScriptFailedEvent;
our @ISA = qw(AlarmEvent);

our @property_list = (
   ['entity', 'ManagedEntityEventArgument', undef, 1],
   ['script', undef, undef, 1],
   ['reason', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('AlarmScriptFailedEvent', 'entity', 'script', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmRemovedEvent;
our @ISA = qw(AlarmEvent);

our @property_list = (
   ['entity', 'ManagedEntityEventArgument', undef, 1],
);


VIMRuntime::make_get_set('AlarmRemovedEvent', 'entity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmReconfiguredEvent;
our @ISA = qw(AlarmEvent);

our @property_list = (
   ['entity', 'ManagedEntityEventArgument', undef, 1],
   ['configChanges', 'ChangesInfoEventArgument', undef, 0],
);


VIMRuntime::make_get_set('AlarmReconfiguredEvent', 'entity', 'configChanges');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmAcknowledgedEvent;
our @ISA = qw(AlarmEvent);

our @property_list = (
   ['source', 'ManagedEntityEventArgument', undef, 1],
   ['entity', 'ManagedEntityEventArgument', undef, 1],
);


VIMRuntime::make_get_set('AlarmAcknowledgedEvent', 'source', 'entity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmClearedEvent;
our @ISA = qw(AlarmEvent);

our @property_list = (
   ['source', 'ManagedEntityEventArgument', undef, 1],
   ['entity', 'ManagedEntityEventArgument', undef, 1],
   ['from', undef, undef, 1],
);


VIMRuntime::make_get_set('AlarmClearedEvent', 'source', 'entity', 'from');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomFieldEvent;
our @ISA = qw(Event);

our @property_list = (
);


VIMRuntime::make_get_set('CustomFieldEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomFieldDefEvent;
our @ISA = qw(CustomFieldEvent);

our @property_list = (
   ['fieldKey', undef, undef, 1],
   ['name', undef, undef, 1],
);


VIMRuntime::make_get_set('CustomFieldDefEvent', 'fieldKey', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomFieldDefAddedEvent;
our @ISA = qw(CustomFieldDefEvent);

our @property_list = (
);


VIMRuntime::make_get_set('CustomFieldDefAddedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomFieldDefRemovedEvent;
our @ISA = qw(CustomFieldDefEvent);

our @property_list = (
);


VIMRuntime::make_get_set('CustomFieldDefRemovedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomFieldDefRenamedEvent;
our @ISA = qw(CustomFieldDefEvent);

our @property_list = (
   ['newName', undef, undef, 1],
);


VIMRuntime::make_get_set('CustomFieldDefRenamedEvent', 'newName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomFieldValueChangedEvent;
our @ISA = qw(CustomFieldEvent);

our @property_list = (
   ['entity', 'ManagedEntityEventArgument', undef, 1],
   ['fieldKey', undef, undef, 1],
   ['name', undef, undef, 1],
   ['value', undef, undef, 1],
   ['prevState', undef, undef, 0],
);


VIMRuntime::make_get_set('CustomFieldValueChangedEvent', 'entity', 'fieldKey', 'name', 'value', 'prevState');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AuthorizationEvent;
our @ISA = qw(Event);

our @property_list = (
);


VIMRuntime::make_get_set('AuthorizationEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PermissionEvent;
our @ISA = qw(AuthorizationEvent);

our @property_list = (
   ['entity', 'ManagedEntityEventArgument', undef, 1],
   ['principal', undef, undef, 1],
   ['group', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('PermissionEvent', 'entity', 'principal', 'group');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PermissionAddedEvent;
our @ISA = qw(PermissionEvent);

our @property_list = (
   ['role', 'RoleEventArgument', undef, 1],
   ['propagate', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('PermissionAddedEvent', 'role', 'propagate');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PermissionUpdatedEvent;
our @ISA = qw(PermissionEvent);

our @property_list = (
   ['role', 'RoleEventArgument', undef, 1],
   ['propagate', 'boolean', undef, 1],
   ['prevRole', 'RoleEventArgument', undef, 0],
   ['prevPropagate', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('PermissionUpdatedEvent', 'role', 'propagate', 'prevRole', 'prevPropagate');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PermissionRemovedEvent;
our @ISA = qw(PermissionEvent);

our @property_list = (
);


VIMRuntime::make_get_set('PermissionRemovedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RoleEvent;
our @ISA = qw(AuthorizationEvent);

our @property_list = (
   ['role', 'RoleEventArgument', undef, 1],
);


VIMRuntime::make_get_set('RoleEvent', 'role');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RoleAddedEvent;
our @ISA = qw(RoleEvent);

our @property_list = (
   ['privilegeList', undef, 1, 0],
);


VIMRuntime::make_get_set('RoleAddedEvent', 'privilegeList');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RoleUpdatedEvent;
our @ISA = qw(RoleEvent);

our @property_list = (
   ['privilegeList', undef, 1, 0],
   ['prevRoleName', undef, undef, 0],
   ['privilegesAdded', undef, 1, 0],
   ['privilegesRemoved', undef, 1, 0],
);


VIMRuntime::make_get_set('RoleUpdatedEvent', 'privilegeList', 'prevRoleName', 'privilegesAdded', 'privilegesRemoved');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RoleRemovedEvent;
our @ISA = qw(RoleEvent);

our @property_list = (
);


VIMRuntime::make_get_set('RoleRemovedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatastoreEvent;
our @ISA = qw(Event);

our @property_list = (
   ['datastore', 'DatastoreEventArgument', undef, 0],
);


VIMRuntime::make_get_set('DatastoreEvent', 'datastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatastoreDestroyedEvent;
our @ISA = qw(DatastoreEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DatastoreDestroyedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatastoreRenamedEvent;
our @ISA = qw(DatastoreEvent);

our @property_list = (
   ['oldName', undef, undef, 1],
   ['newName', undef, undef, 1],
);


VIMRuntime::make_get_set('DatastoreRenamedEvent', 'oldName', 'newName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatastoreCapacityIncreasedEvent;
our @ISA = qw(DatastoreEvent);

our @property_list = (
   ['oldCapacity', undef, undef, 1],
   ['newCapacity', undef, undef, 1],
);


VIMRuntime::make_get_set('DatastoreCapacityIncreasedEvent', 'oldCapacity', 'newCapacity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatastoreDuplicatedEvent;
our @ISA = qw(DatastoreEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DatastoreDuplicatedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatastoreFileEvent;
our @ISA = qw(DatastoreEvent);

our @property_list = (
   ['targetFile', undef, undef, 1],
   ['sourceOfOperation', undef, undef, 0],
   ['succeeded', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('DatastoreFileEvent', 'targetFile', 'sourceOfOperation', 'succeeded');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatastoreFileCopiedEvent;
our @ISA = qw(DatastoreFileEvent);

our @property_list = (
   ['sourceDatastore', 'DatastoreEventArgument', undef, 1],
   ['sourceFile', undef, undef, 1],
);


VIMRuntime::make_get_set('DatastoreFileCopiedEvent', 'sourceDatastore', 'sourceFile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatastoreFileMovedEvent;
our @ISA = qw(DatastoreFileEvent);

our @property_list = (
   ['sourceDatastore', 'DatastoreEventArgument', undef, 1],
   ['sourceFile', undef, undef, 1],
);


VIMRuntime::make_get_set('DatastoreFileMovedEvent', 'sourceDatastore', 'sourceFile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatastoreFileDeletedEvent;
our @ISA = qw(DatastoreFileEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DatastoreFileDeletedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NonVIWorkloadDetectedOnDatastoreEvent;
our @ISA = qw(DatastoreEvent);

our @property_list = (
);


VIMRuntime::make_get_set('NonVIWorkloadDetectedOnDatastoreEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatastoreIORMReconfiguredEvent;
our @ISA = qw(DatastoreEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DatastoreIORMReconfiguredEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TaskEvent;
our @ISA = qw(Event);

our @property_list = (
   ['info', 'TaskInfo', undef, 1],
);


VIMRuntime::make_get_set('TaskEvent', 'info');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TaskTimeoutEvent;
our @ISA = qw(TaskEvent);

our @property_list = (
);


VIMRuntime::make_get_set('TaskTimeoutEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseEvent;
our @ISA = qw(Event);

our @property_list = (
);


VIMRuntime::make_get_set('LicenseEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ServerLicenseExpiredEvent;
our @ISA = qw(LicenseEvent);

our @property_list = (
   ['product', undef, undef, 1],
);


VIMRuntime::make_get_set('ServerLicenseExpiredEvent', 'product');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostLicenseExpiredEvent;
our @ISA = qw(LicenseEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostLicenseExpiredEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMotionLicenseExpiredEvent;
our @ISA = qw(LicenseEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VMotionLicenseExpiredEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoLicenseEvent;
our @ISA = qw(LicenseEvent);

our @property_list = (
   ['feature', 'LicenseFeatureInfo', undef, 1],
);


VIMRuntime::make_get_set('NoLicenseEvent', 'feature');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseServerUnavailableEvent;
our @ISA = qw(LicenseEvent);

our @property_list = (
   ['licenseServer', undef, undef, 1],
);


VIMRuntime::make_get_set('LicenseServerUnavailableEvent', 'licenseServer');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseServerAvailableEvent;
our @ISA = qw(LicenseEvent);

our @property_list = (
   ['licenseServer', undef, undef, 1],
);


VIMRuntime::make_get_set('LicenseServerAvailableEvent', 'licenseServer');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseExpiredEvent;
our @ISA = qw(Event);

our @property_list = (
   ['feature', 'LicenseFeatureInfo', undef, 1],
);


VIMRuntime::make_get_set('LicenseExpiredEvent', 'feature');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidEditionEvent;
our @ISA = qw(LicenseEvent);

our @property_list = (
   ['feature', undef, undef, 1],
);


VIMRuntime::make_get_set('InvalidEditionEvent', 'feature');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostInventoryFullEvent;
our @ISA = qw(LicenseEvent);

our @property_list = (
   ['capacity', undef, undef, 1],
);


VIMRuntime::make_get_set('HostInventoryFullEvent', 'capacity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseRestrictedEvent;
our @ISA = qw(LicenseEvent);

our @property_list = (
);


VIMRuntime::make_get_set('LicenseRestrictedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IncorrectHostInformationEvent;
our @ISA = qw(LicenseEvent);

our @property_list = (
);


VIMRuntime::make_get_set('IncorrectHostInformationEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UnlicensedVirtualMachinesEvent;
our @ISA = qw(LicenseEvent);

our @property_list = (
   ['unlicensed', undef, undef, 1],
   ['available', undef, undef, 1],
);


VIMRuntime::make_get_set('UnlicensedVirtualMachinesEvent', 'unlicensed', 'available');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UnlicensedVirtualMachinesFoundEvent;
our @ISA = qw(LicenseEvent);

our @property_list = (
   ['available', undef, undef, 1],
);


VIMRuntime::make_get_set('UnlicensedVirtualMachinesFoundEvent', 'available');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AllVirtualMachinesLicensedEvent;
our @ISA = qw(LicenseEvent);

our @property_list = (
);


VIMRuntime::make_get_set('AllVirtualMachinesLicensedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseNonComplianceEvent;
our @ISA = qw(LicenseEvent);

our @property_list = (
   ['url', undef, undef, 1],
);


VIMRuntime::make_get_set('LicenseNonComplianceEvent', 'url');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MigrationEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['fault', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('MigrationEvent', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MigrationWarningEvent;
our @ISA = qw(MigrationEvent);

our @property_list = (
);


VIMRuntime::make_get_set('MigrationWarningEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MigrationErrorEvent;
our @ISA = qw(MigrationEvent);

our @property_list = (
);


VIMRuntime::make_get_set('MigrationErrorEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MigrationHostWarningEvent;
our @ISA = qw(MigrationEvent);

our @property_list = (
   ['dstHost', 'HostEventArgument', undef, 1],
);


VIMRuntime::make_get_set('MigrationHostWarningEvent', 'dstHost');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MigrationHostErrorEvent;
our @ISA = qw(MigrationEvent);

our @property_list = (
   ['dstHost', 'HostEventArgument', undef, 1],
);


VIMRuntime::make_get_set('MigrationHostErrorEvent', 'dstHost');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MigrationResourceWarningEvent;
our @ISA = qw(MigrationEvent);

our @property_list = (
   ['dstPool', 'ResourcePoolEventArgument', undef, 1],
   ['dstHost', 'HostEventArgument', undef, 1],
);


VIMRuntime::make_get_set('MigrationResourceWarningEvent', 'dstPool', 'dstHost');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MigrationResourceErrorEvent;
our @ISA = qw(MigrationEvent);

our @property_list = (
   ['dstPool', 'ResourcePoolEventArgument', undef, 1],
   ['dstHost', 'HostEventArgument', undef, 1],
);


VIMRuntime::make_get_set('MigrationResourceErrorEvent', 'dstPool', 'dstHost');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterEvent;
our @ISA = qw(Event);

our @property_list = (
);


VIMRuntime::make_get_set('ClusterEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DasEnabledEvent;
our @ISA = qw(ClusterEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DasEnabledEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DasDisabledEvent;
our @ISA = qw(ClusterEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DasDisabledEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DasAdmissionControlDisabledEvent;
our @ISA = qw(ClusterEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DasAdmissionControlDisabledEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DasAdmissionControlEnabledEvent;
our @ISA = qw(ClusterEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DasAdmissionControlEnabledEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DasHostFailedEvent;
our @ISA = qw(ClusterEvent);

our @property_list = (
   ['failedHost', 'HostEventArgument', undef, 1],
);


VIMRuntime::make_get_set('DasHostFailedEvent', 'failedHost');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DasHostIsolatedEvent;
our @ISA = qw(ClusterEvent);

our @property_list = (
   ['isolatedHost', 'HostEventArgument', undef, 1],
);


VIMRuntime::make_get_set('DasHostIsolatedEvent', 'isolatedHost');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DasClusterIsolatedEvent;
our @ISA = qw(ClusterEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DasClusterIsolatedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DasAgentUnavailableEvent;
our @ISA = qw(ClusterEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DasAgentUnavailableEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DasAgentFoundEvent;
our @ISA = qw(ClusterEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DasAgentFoundEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InsufficientFailoverResourcesEvent;
our @ISA = qw(ClusterEvent);

our @property_list = (
);


VIMRuntime::make_get_set('InsufficientFailoverResourcesEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FailoverLevelRestored;
our @ISA = qw(ClusterEvent);

our @property_list = (
);


VIMRuntime::make_get_set('FailoverLevelRestored');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterOvercommittedEvent;
our @ISA = qw(ClusterEvent);

our @property_list = (
);


VIMRuntime::make_get_set('ClusterOvercommittedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostOvercommittedEvent;
our @ISA = qw(ClusterOvercommittedEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostOvercommittedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterStatusChangedEvent;
our @ISA = qw(ClusterEvent);

our @property_list = (
   ['oldStatus', undef, undef, 1],
   ['newStatus', undef, undef, 1],
);


VIMRuntime::make_get_set('ClusterStatusChangedEvent', 'oldStatus', 'newStatus');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostStatusChangedEvent;
our @ISA = qw(ClusterStatusChangedEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostStatusChangedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterCreatedEvent;
our @ISA = qw(ClusterEvent);

our @property_list = (
   ['parent', 'FolderEventArgument', undef, 1],
);


VIMRuntime::make_get_set('ClusterCreatedEvent', 'parent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterDestroyedEvent;
our @ISA = qw(ClusterEvent);

our @property_list = (
);


VIMRuntime::make_get_set('ClusterDestroyedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DrsEnabledEvent;
our @ISA = qw(ClusterEvent);

our @property_list = (
   ['behavior', undef, undef, 1],
);


VIMRuntime::make_get_set('DrsEnabledEvent', 'behavior');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DrsDisabledEvent;
our @ISA = qw(ClusterEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DrsDisabledEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterReconfiguredEvent;
our @ISA = qw(ClusterEvent);

our @property_list = (
   ['configChanges', 'ChangesInfoEventArgument', undef, 0],
);


VIMRuntime::make_get_set('ClusterReconfiguredEvent', 'configChanges');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostMonitoringStateChangedEvent;
our @ISA = qw(ClusterEvent);

our @property_list = (
   ['state', undef, undef, 1],
   ['prevState', undef, undef, 0],
);


VIMRuntime::make_get_set('HostMonitoringStateChangedEvent', 'state', 'prevState');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmHealthMonitoringStateChangedEvent;
our @ISA = qw(ClusterEvent);

our @property_list = (
   ['state', undef, undef, 1],
   ['prevState', undef, undef, 0],
);


VIMRuntime::make_get_set('VmHealthMonitoringStateChangedEvent', 'state', 'prevState');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ResourcePoolEvent;
our @ISA = qw(Event);

our @property_list = (
   ['resourcePool', 'ResourcePoolEventArgument', undef, 1],
);


VIMRuntime::make_get_set('ResourcePoolEvent', 'resourcePool');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ResourcePoolCreatedEvent;
our @ISA = qw(ResourcePoolEvent);

our @property_list = (
   ['parent', 'ResourcePoolEventArgument', undef, 1],
);


VIMRuntime::make_get_set('ResourcePoolCreatedEvent', 'parent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ResourcePoolDestroyedEvent;
our @ISA = qw(ResourcePoolEvent);

our @property_list = (
);


VIMRuntime::make_get_set('ResourcePoolDestroyedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ResourcePoolMovedEvent;
our @ISA = qw(ResourcePoolEvent);

our @property_list = (
   ['oldParent', 'ResourcePoolEventArgument', undef, 1],
   ['newParent', 'ResourcePoolEventArgument', undef, 1],
);


VIMRuntime::make_get_set('ResourcePoolMovedEvent', 'oldParent', 'newParent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ResourcePoolReconfiguredEvent;
our @ISA = qw(ResourcePoolEvent);

our @property_list = (
   ['configChanges', 'ChangesInfoEventArgument', undef, 0],
);


VIMRuntime::make_get_set('ResourcePoolReconfiguredEvent', 'configChanges');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ResourceViolatedEvent;
our @ISA = qw(ResourcePoolEvent);

our @property_list = (
);


VIMRuntime::make_get_set('ResourceViolatedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmResourcePoolMovedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['oldParent', 'ResourcePoolEventArgument', undef, 1],
   ['newParent', 'ResourcePoolEventArgument', undef, 1],
);


VIMRuntime::make_get_set('VmResourcePoolMovedEvent', 'oldParent', 'newParent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TemplateUpgradeEvent;
our @ISA = qw(Event);

our @property_list = (
   ['legacyTemplate', undef, undef, 1],
);


VIMRuntime::make_get_set('TemplateUpgradeEvent', 'legacyTemplate');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TemplateBeingUpgradedEvent;
our @ISA = qw(TemplateUpgradeEvent);

our @property_list = (
);


VIMRuntime::make_get_set('TemplateBeingUpgradedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TemplateUpgradeFailedEvent;
our @ISA = qw(TemplateUpgradeEvent);

our @property_list = (
   ['reason', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('TemplateUpgradeFailedEvent', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TemplateUpgradedEvent;
our @ISA = qw(TemplateUpgradeEvent);

our @property_list = (
);


VIMRuntime::make_get_set('TemplateUpgradedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['logLocation', undef, undef, 0],
);


VIMRuntime::make_get_set('CustomizationEvent', 'logLocation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationStartedEvent;
our @ISA = qw(CustomizationEvent);

our @property_list = (
);


VIMRuntime::make_get_set('CustomizationStartedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationSucceeded;
our @ISA = qw(CustomizationEvent);

our @property_list = (
);


VIMRuntime::make_get_set('CustomizationSucceeded');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationFailed;
our @ISA = qw(CustomizationEvent);

our @property_list = (
);


VIMRuntime::make_get_set('CustomizationFailed');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationUnknownFailure;
our @ISA = qw(CustomizationFailed);

our @property_list = (
);


VIMRuntime::make_get_set('CustomizationUnknownFailure');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationSysprepFailed;
our @ISA = qw(CustomizationFailed);

our @property_list = (
   ['sysprepVersion', undef, undef, 1],
   ['systemVersion', undef, undef, 1],
);


VIMRuntime::make_get_set('CustomizationSysprepFailed', 'sysprepVersion', 'systemVersion');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationLinuxIdentityFailed;
our @ISA = qw(CustomizationFailed);

our @property_list = (
);


VIMRuntime::make_get_set('CustomizationLinuxIdentityFailed');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationNetworkSetupFailed;
our @ISA = qw(CustomizationFailed);

our @property_list = (
);


VIMRuntime::make_get_set('CustomizationNetworkSetupFailed');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LockerMisconfiguredEvent;
our @ISA = qw(Event);

our @property_list = (
   ['datastore', 'DatastoreEventArgument', undef, 1],
);


VIMRuntime::make_get_set('LockerMisconfiguredEvent', 'datastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LockerReconfiguredEvent;
our @ISA = qw(Event);

our @property_list = (
   ['oldDatastore', 'DatastoreEventArgument', undef, 0],
   ['newDatastore', 'DatastoreEventArgument', undef, 0],
);


VIMRuntime::make_get_set('LockerReconfiguredEvent', 'oldDatastore', 'newDatastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoDatastoresConfiguredEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('NoDatastoresConfiguredEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AdminPasswordNotChangedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('AdminPasswordNotChangedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostInAuditModeEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('HostInAuditModeEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LocalTSMEnabledEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('LocalTSMEnabledEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RemoteTSMEnabledEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('RemoteTSMEnabledEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VimAccountPasswordChangedEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VimAccountPasswordChangedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IScsiBootFailureEvent;
our @ISA = qw(HostEvent);

our @property_list = (
);


VIMRuntime::make_get_set('IScsiBootFailureEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsHealthStatusChangeEvent;
our @ISA = qw(HostEvent);

our @property_list = (
   ['switchUuid', undef, undef, 1],
   ['healthResult', 'HostMemberHealthCheckResult', undef, 0],
);


VIMRuntime::make_get_set('DvsHealthStatusChangeEvent', 'switchUuid', 'healthResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetworkRollbackEvent;
our @ISA = qw(Event);

our @property_list = (
   ['methodName', undef, undef, 1],
   ['transactionId', undef, undef, 1],
);


VIMRuntime::make_get_set('NetworkRollbackEvent', 'methodName', 'transactionId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UplinkPortVlanTrunkedEvent;
our @ISA = qw(DvsHealthStatusChangeEvent);

our @property_list = (
);


VIMRuntime::make_get_set('UplinkPortVlanTrunkedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UplinkPortVlanUntrunkedEvent;
our @ISA = qw(DvsHealthStatusChangeEvent);

our @property_list = (
);


VIMRuntime::make_get_set('UplinkPortVlanUntrunkedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MtuMatchEvent;
our @ISA = qw(DvsHealthStatusChangeEvent);

our @property_list = (
);


VIMRuntime::make_get_set('MtuMatchEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MtuMismatchEvent;
our @ISA = qw(DvsHealthStatusChangeEvent);

our @property_list = (
);


VIMRuntime::make_get_set('MtuMismatchEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UplinkPortMtuNotSupportEvent;
our @ISA = qw(DvsHealthStatusChangeEvent);

our @property_list = (
);


VIMRuntime::make_get_set('UplinkPortMtuNotSupportEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UplinkPortMtuSupportEvent;
our @ISA = qw(DvsHealthStatusChangeEvent);

our @property_list = (
);


VIMRuntime::make_get_set('UplinkPortMtuSupportEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TeamingMatchEvent;
our @ISA = qw(DvsHealthStatusChangeEvent);

our @property_list = (
);


VIMRuntime::make_get_set('TeamingMatchEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TeamingMisMatchEvent;
our @ISA = qw(DvsHealthStatusChangeEvent);

our @property_list = (
);


VIMRuntime::make_get_set('TeamingMisMatchEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsEvent;
our @ISA = qw(Event);

our @property_list = (
);


VIMRuntime::make_get_set('DvsEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsCreatedEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['parent', 'FolderEventArgument', undef, 1],
);


VIMRuntime::make_get_set('DvsCreatedEvent', 'parent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsRenamedEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['oldName', undef, undef, 1],
   ['newName', undef, undef, 1],
);


VIMRuntime::make_get_set('DvsRenamedEvent', 'oldName', 'newName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsReconfiguredEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['configSpec', 'DVSConfigSpec', undef, 1],
   ['configChanges', 'ChangesInfoEventArgument', undef, 0],
);


VIMRuntime::make_get_set('DvsReconfiguredEvent', 'configSpec', 'configChanges');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsUpgradeAvailableEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['productInfo', 'DistributedVirtualSwitchProductSpec', undef, 1],
);


VIMRuntime::make_get_set('DvsUpgradeAvailableEvent', 'productInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsUpgradeInProgressEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['productInfo', 'DistributedVirtualSwitchProductSpec', undef, 1],
);


VIMRuntime::make_get_set('DvsUpgradeInProgressEvent', 'productInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsUpgradeRejectedEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['productInfo', 'DistributedVirtualSwitchProductSpec', undef, 1],
);


VIMRuntime::make_get_set('DvsUpgradeRejectedEvent', 'productInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsUpgradedEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['productInfo', 'DistributedVirtualSwitchProductSpec', undef, 1],
);


VIMRuntime::make_get_set('DvsUpgradedEvent', 'productInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsHostJoinedEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['hostJoined', 'HostEventArgument', undef, 1],
);


VIMRuntime::make_get_set('DvsHostJoinedEvent', 'hostJoined');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsHostLeftEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['hostLeft', 'HostEventArgument', undef, 1],
);


VIMRuntime::make_get_set('DvsHostLeftEvent', 'hostLeft');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsOutOfSyncHostArgument;
our @ISA = qw(DynamicData);

our @property_list = (
   ['outOfSyncHost', 'HostEventArgument', undef, 1],
   ['configParamters', undef, 1, 1],
);


VIMRuntime::make_get_set('DvsOutOfSyncHostArgument', 'outOfSyncHost', 'configParamters');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDvsOutOfSyncHostArgument;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DvsOutOfSyncHostArgument', 'DvsOutOfSyncHostArgument', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDvsOutOfSyncHostArgument', 'DvsOutOfSyncHostArgument');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OutOfSyncDvsHost;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['hostOutOfSync', 'DvsOutOfSyncHostArgument', 1, 1],
);


VIMRuntime::make_get_set('OutOfSyncDvsHost', 'hostOutOfSync');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsHostWentOutOfSyncEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['hostOutOfSync', 'DvsOutOfSyncHostArgument', undef, 1],
);


VIMRuntime::make_get_set('DvsHostWentOutOfSyncEvent', 'hostOutOfSync');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsHostBackInSyncEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['hostBackInSync', 'HostEventArgument', undef, 1],
);


VIMRuntime::make_get_set('DvsHostBackInSyncEvent', 'hostBackInSync');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsHostStatusUpdated;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['hostMember', 'HostEventArgument', undef, 1],
   ['oldStatus', undef, undef, 0],
   ['newStatus', undef, undef, 0],
   ['oldStatusDetail', undef, undef, 0],
   ['newStatusDetail', undef, undef, 0],
);


VIMRuntime::make_get_set('DvsHostStatusUpdated', 'hostMember', 'oldStatus', 'newStatus', 'oldStatusDetail', 'newStatusDetail');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsPortCreatedEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['portKey', undef, 1, 1],
);


VIMRuntime::make_get_set('DvsPortCreatedEvent', 'portKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsPortReconfiguredEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['portKey', undef, 1, 1],
   ['configChanges', 'ChangesInfoEventArgument', 1, 0],
);


VIMRuntime::make_get_set('DvsPortReconfiguredEvent', 'portKey', 'configChanges');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsPortDeletedEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['portKey', undef, 1, 1],
);


VIMRuntime::make_get_set('DvsPortDeletedEvent', 'portKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsPortConnectedEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['portKey', undef, undef, 1],
   ['connectee', 'DistributedVirtualSwitchPortConnectee', undef, 0],
);


VIMRuntime::make_get_set('DvsPortConnectedEvent', 'portKey', 'connectee');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsPortDisconnectedEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['portKey', undef, undef, 1],
   ['connectee', 'DistributedVirtualSwitchPortConnectee', undef, 0],
);


VIMRuntime::make_get_set('DvsPortDisconnectedEvent', 'portKey', 'connectee');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsPortVendorSpecificStateChangeEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['portKey', undef, undef, 1],
);


VIMRuntime::make_get_set('DvsPortVendorSpecificStateChangeEvent', 'portKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsPortRuntimeChangeEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['portKey', undef, undef, 1],
   ['runtimeInfo', 'DVPortStatus', undef, 1],
);


VIMRuntime::make_get_set('DvsPortRuntimeChangeEvent', 'portKey', 'runtimeInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsPortLinkUpEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['portKey', undef, undef, 1],
   ['runtimeInfo', 'DVPortStatus', undef, 0],
);


VIMRuntime::make_get_set('DvsPortLinkUpEvent', 'portKey', 'runtimeInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsPortLinkDownEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['portKey', undef, undef, 1],
   ['runtimeInfo', 'DVPortStatus', undef, 0],
);


VIMRuntime::make_get_set('DvsPortLinkDownEvent', 'portKey', 'runtimeInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsPortJoinPortgroupEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['portKey', undef, undef, 1],
   ['portgroupKey', undef, undef, 1],
   ['portgroupName', undef, undef, 1],
);


VIMRuntime::make_get_set('DvsPortJoinPortgroupEvent', 'portKey', 'portgroupKey', 'portgroupName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsPortLeavePortgroupEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['portKey', undef, undef, 1],
   ['portgroupKey', undef, undef, 1],
   ['portgroupName', undef, undef, 1],
);


VIMRuntime::make_get_set('DvsPortLeavePortgroupEvent', 'portKey', 'portgroupKey', 'portgroupName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsPortBlockedEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['portKey', undef, undef, 1],
   ['statusDetail', undef, undef, 0],
   ['runtimeInfo', 'DVPortStatus', undef, 0],
   ['prevBlockState', undef, undef, 0],
);


VIMRuntime::make_get_set('DvsPortBlockedEvent', 'portKey', 'statusDetail', 'runtimeInfo', 'prevBlockState');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsPortUnblockedEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['portKey', undef, undef, 1],
   ['runtimeInfo', 'DVPortStatus', undef, 0],
   ['prevBlockState', undef, undef, 0],
);


VIMRuntime::make_get_set('DvsPortUnblockedEvent', 'portKey', 'runtimeInfo', 'prevBlockState');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsPortEnteredPassthruEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['portKey', undef, undef, 1],
   ['runtimeInfo', 'DVPortStatus', undef, 0],
);


VIMRuntime::make_get_set('DvsPortEnteredPassthruEvent', 'portKey', 'runtimeInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsPortExitedPassthruEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['portKey', undef, undef, 1],
   ['runtimeInfo', 'DVPortStatus', undef, 0],
);


VIMRuntime::make_get_set('DvsPortExitedPassthruEvent', 'portKey', 'runtimeInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsDestroyedEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DvsDestroyedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsMergedEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['sourceDvs', 'DvsEventArgument', undef, 1],
   ['destinationDvs', 'DvsEventArgument', undef, 1],
);


VIMRuntime::make_get_set('DvsMergedEvent', 'sourceDvs', 'destinationDvs');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostLocalPortCreatedEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['hostLocalPort', 'DVSHostLocalPortInfo', undef, 1],
);


VIMRuntime::make_get_set('HostLocalPortCreatedEvent', 'hostLocalPort');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RollbackEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['hostName', undef, undef, 1],
   ['methodName', undef, undef, 0],
);


VIMRuntime::make_get_set('RollbackEvent', 'hostName', 'methodName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RecoveryEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['hostName', undef, undef, 1],
   ['portKey', undef, undef, 1],
   ['dvsUuid', undef, undef, 0],
   ['vnic', undef, undef, 0],
);


VIMRuntime::make_get_set('RecoveryEvent', 'hostName', 'portKey', 'dvsUuid', 'vnic');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsImportEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['importType', undef, undef, 1],
);


VIMRuntime::make_get_set('DvsImportEvent', 'importType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsRestoreEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DvsRestoreEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmVnicPoolReservationViolationRaiseEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['vmVnicResourcePoolKey', undef, undef, 1],
   ['vmVnicResourcePoolName', undef, undef, 0],
);


VIMRuntime::make_get_set('VmVnicPoolReservationViolationRaiseEvent', 'vmVnicResourcePoolKey', 'vmVnicResourcePoolName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmVnicPoolReservationViolationClearEvent;
our @ISA = qw(DvsEvent);

our @property_list = (
   ['vmVnicResourcePoolKey', undef, undef, 1],
   ['vmVnicResourcePoolName', undef, undef, 0],
);


VIMRuntime::make_get_set('VmVnicPoolReservationViolationClearEvent', 'vmVnicResourcePoolKey', 'vmVnicResourcePoolName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVPortgroupEvent;
our @ISA = qw(Event);

our @property_list = (
);


VIMRuntime::make_get_set('DVPortgroupEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVPortgroupCreatedEvent;
our @ISA = qw(DVPortgroupEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DVPortgroupCreatedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVPortgroupRenamedEvent;
our @ISA = qw(DVPortgroupEvent);

our @property_list = (
   ['oldName', undef, undef, 1],
   ['newName', undef, undef, 1],
);


VIMRuntime::make_get_set('DVPortgroupRenamedEvent', 'oldName', 'newName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVPortgroupReconfiguredEvent;
our @ISA = qw(DVPortgroupEvent);

our @property_list = (
   ['configSpec', 'DVPortgroupConfigSpec', undef, 1],
   ['configChanges', 'ChangesInfoEventArgument', undef, 0],
);


VIMRuntime::make_get_set('DVPortgroupReconfiguredEvent', 'configSpec', 'configChanges');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVPortgroupDestroyedEvent;
our @ISA = qw(DVPortgroupEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DVPortgroupDestroyedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvpgImportEvent;
our @ISA = qw(DVPortgroupEvent);

our @property_list = (
   ['importType', undef, undef, 1],
);


VIMRuntime::make_get_set('DvpgImportEvent', 'importType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvpgRestoreEvent;
our @ISA = qw(DVPortgroupEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DvpgRestoreEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DrsInvocationFailedEvent;
our @ISA = qw(ClusterEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DrsInvocationFailedEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DrsRecoveredFromFailureEvent;
our @ISA = qw(ClusterEvent);

our @property_list = (
);


VIMRuntime::make_get_set('DrsRecoveredFromFailureEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmReloadFromPathEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['configPath', undef, undef, 1],
);


VIMRuntime::make_get_set('VmReloadFromPathEvent', 'configPath');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmReloadFromPathFailedEvent;
our @ISA = qw(VmEvent);

our @property_list = (
   ['configPath', undef, undef, 1],
);


VIMRuntime::make_get_set('VmReloadFromPathFailedEvent', 'configPath');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmRequirementsExceedCurrentEVCModeEvent;
our @ISA = qw(VmEvent);

our @property_list = (
);


VIMRuntime::make_get_set('VmRequirementsExceedCurrentEVCModeEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EventArgument;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('EventArgument');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RoleEventArgument;
our @ISA = qw(EventArgument);

our @property_list = (
   ['roleId', undef, undef, 1],
   ['name', undef, undef, 1],
);


VIMRuntime::make_get_set('RoleEventArgument', 'roleId', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EntityEventArgument;
our @ISA = qw(EventArgument);

our @property_list = (
   ['name', undef, undef, 1],
);


VIMRuntime::make_get_set('EntityEventArgument', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ManagedEntityEventArgument;
our @ISA = qw(EntityEventArgument);

our @property_list = (
   ['entity', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('ManagedEntityEventArgument', 'entity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FolderEventArgument;
our @ISA = qw(EntityEventArgument);

our @property_list = (
   ['folder', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('FolderEventArgument', 'folder');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatacenterEventArgument;
our @ISA = qw(EntityEventArgument);

our @property_list = (
   ['datacenter', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('DatacenterEventArgument', 'datacenter');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ComputeResourceEventArgument;
our @ISA = qw(EntityEventArgument);

our @property_list = (
   ['computeResource', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('ComputeResourceEventArgument', 'computeResource');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ResourcePoolEventArgument;
our @ISA = qw(EntityEventArgument);

our @property_list = (
   ['resourcePool', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('ResourcePoolEventArgument', 'resourcePool');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostEventArgument;
our @ISA = qw(EntityEventArgument);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('HostEventArgument', 'host');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostEventArgument;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostEventArgument', 'HostEventArgument', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostEventArgument', 'HostEventArgument');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmEventArgument;
our @ISA = qw(EntityEventArgument);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('VmEventArgument', 'vm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVmEventArgument;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VmEventArgument', 'VmEventArgument', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVmEventArgument', 'VmEventArgument');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatastoreEventArgument;
our @ISA = qw(EntityEventArgument);

our @property_list = (
   ['datastore', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('DatastoreEventArgument', 'datastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetworkEventArgument;
our @ISA = qw(EntityEventArgument);

our @property_list = (
   ['network', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('NetworkEventArgument', 'network');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlarmEventArgument;
our @ISA = qw(EntityEventArgument);

our @property_list = (
   ['alarm', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('AlarmEventArgument', 'alarm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ScheduledTaskEventArgument;
our @ISA = qw(EntityEventArgument);

our @property_list = (
   ['scheduledTask', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('ScheduledTaskEventArgument', 'scheduledTask');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileEventArgument;
our @ISA = qw(EventArgument);

our @property_list = (
   ['profile', 'ManagedObjectReference', undef, 1],
   ['name', undef, undef, 1],
);


VIMRuntime::make_get_set('ProfileEventArgument', 'profile', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsEventArgument;
our @ISA = qw(EntityEventArgument);

our @property_list = (
   ['dvs', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('DvsEventArgument', 'dvs');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ChangesInfoEventArgument;
our @ISA = qw(DynamicData);

our @property_list = (
   ['modified', undef, undef, 0],
   ['added', undef, undef, 0],
   ['deleted', undef, undef, 0],
);


VIMRuntime::make_get_set('ChangesInfoEventArgument', 'modified', 'added', 'deleted');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfChangesInfoEventArgument;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ChangesInfoEventArgument', 'ChangesInfoEventArgument', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfChangesInfoEventArgument', 'ChangesInfoEventArgument');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EventArgDesc;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['type', undef, undef, 1],
   ['description', 'ElementDescription', undef, 0],
);


VIMRuntime::make_get_set('EventArgDesc', 'name', 'type', 'description');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfEventArgDesc;
our @ISA = qw(ComplexType);

our @property_list = (
   ['EventArgDesc', 'EventArgDesc', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfEventArgDesc', 'EventArgDesc');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EventDescriptionEventDetail;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['description', undef, undef, 0],
   ['category', undef, undef, 1],
   ['formatOnDatacenter', undef, undef, 1],
   ['formatOnComputeResource', undef, undef, 1],
   ['formatOnHost', undef, undef, 1],
   ['formatOnVm', undef, undef, 1],
   ['fullFormat', undef, undef, 1],
   ['longDescription', undef, undef, 0],
);


VIMRuntime::make_get_set('EventDescriptionEventDetail', 'key', 'description', 'category', 'formatOnDatacenter', 'formatOnComputeResource', 'formatOnHost', 'formatOnVm', 'fullFormat', 'longDescription');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfEventDescriptionEventDetail;
our @ISA = qw(ComplexType);

our @property_list = (
   ['EventDescriptionEventDetail', 'EventDescriptionEventDetail', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfEventDescriptionEventDetail', 'EventDescriptionEventDetail');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EventDescription;
our @ISA = qw(DynamicData);

our @property_list = (
   ['category', 'ElementDescription', 1, 1],
   ['eventInfo', 'EventDescriptionEventDetail', 1, 1],
   ['enumeratedTypes', 'EnumDescription', 1, 0],
);


VIMRuntime::make_get_set('EventDescription', 'category', 'eventInfo', 'enumeratedTypes');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EventEx;
our @ISA = qw(Event);

our @property_list = (
   ['eventTypeId', undef, undef, 1],
   ['severity', undef, undef, 0],
   ['message', undef, undef, 0],
   ['arguments', 'KeyAnyValue', 1, 0],
   ['objectId', undef, undef, 0],
   ['objectType', undef, undef, 0],
   ['objectName', undef, undef, 0],
   ['fault', 'LocalizedMethodFault', undef, 0],
);


VIMRuntime::make_get_set('EventEx', 'eventTypeId', 'severity', 'message', 'arguments', 'objectId', 'objectType', 'objectName', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EventFilterSpecByEntity;
our @ISA = qw(DynamicData);

our @property_list = (
   ['entity', 'ManagedObjectReference', undef, 1],
   ['recursion', 'EventFilterSpecRecursionOption', undef, 1],
);


VIMRuntime::make_get_set('EventFilterSpecByEntity', 'entity', 'recursion');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EventFilterSpecByTime;
our @ISA = qw(DynamicData);

our @property_list = (
   ['beginTime', undef, undef, 0],
   ['endTime', undef, undef, 0],
);


VIMRuntime::make_get_set('EventFilterSpecByTime', 'beginTime', 'endTime');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EventFilterSpecByUsername;
our @ISA = qw(DynamicData);

our @property_list = (
   ['systemUser', 'boolean', undef, 1],
   ['userList', undef, 1, 0],
);


VIMRuntime::make_get_set('EventFilterSpecByUsername', 'systemUser', 'userList');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EventFilterSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['entity', 'EventFilterSpecByEntity', undef, 0],
   ['time', 'EventFilterSpecByTime', undef, 0],
   ['userName', 'EventFilterSpecByUsername', undef, 0],
   ['eventChainId', undef, undef, 0],
   ['alarm', 'ManagedObjectReference', undef, 0],
   ['scheduledTask', 'ManagedObjectReference', undef, 0],
   ['disableFullMessage', 'boolean', undef, 0],
   ['category', undef, 1, 0],
   ['type', undef, 1, 0],
   ['tag', undef, 1, 0],
   ['eventTypeId', undef, 1, 0],
   ['maxCount', undef, undef, 0],
);


VIMRuntime::make_get_set('EventFilterSpec', 'entity', 'time', 'userName', 'eventChainId', 'alarm', 'scheduledTask', 'disableFullMessage', 'category', 'type', 'tag', 'eventTypeId', 'maxCount');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExtExtendedProductInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['companyUrl', undef, undef, 0],
   ['productUrl', undef, undef, 0],
   ['managementUrl', undef, undef, 0],
   ['self', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('ExtExtendedProductInfo', 'companyUrl', 'productUrl', 'managementUrl', 'self');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ManagedByInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['extensionKey', undef, undef, 1],
   ['type', undef, undef, 1],
);


VIMRuntime::make_get_set('ManagedByInfo', 'extensionKey', 'type');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExtManagedEntityInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['type', undef, undef, 1],
   ['smallIconUrl', undef, undef, 0],
   ['iconUrl', undef, undef, 0],
   ['description', undef, undef, 0],
);


VIMRuntime::make_get_set('ExtManagedEntityInfo', 'type', 'smallIconUrl', 'iconUrl', 'description');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfExtManagedEntityInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ExtManagedEntityInfo', 'ExtManagedEntityInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfExtManagedEntityInfo', 'ExtManagedEntityInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExtSolutionManagerInfoTabInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['label', undef, undef, 1],
   ['url', undef, undef, 1],
);


VIMRuntime::make_get_set('ExtSolutionManagerInfoTabInfo', 'label', 'url');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfExtSolutionManagerInfoTabInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ExtSolutionManagerInfoTabInfo', 'ExtSolutionManagerInfoTabInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfExtSolutionManagerInfoTabInfo', 'ExtSolutionManagerInfoTabInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExtSolutionManagerInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['tab', 'ExtSolutionManagerInfoTabInfo', 1, 0],
   ['smallIconUrl', undef, undef, 0],
);


VIMRuntime::make_get_set('ExtSolutionManagerInfo', 'tab', 'smallIconUrl');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ActiveDirectoryFault;
our @ISA = qw(VimFault);

our @property_list = (
   ['errorCode', undef, undef, 0],
);


VIMRuntime::make_get_set('ActiveDirectoryFault', 'errorCode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ActiveVMsBlockingEVC;
our @ISA = qw(EVCConfigFault);

our @property_list = (
   ['evcMode', undef, undef, 0],
   ['host', 'ManagedObjectReference', 1, 0],
   ['hostName', undef, 1, 0],
);


VIMRuntime::make_get_set('ActiveVMsBlockingEVC', 'evcMode', 'host', 'hostName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AdminDisabled;
our @ISA = qw(HostConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('AdminDisabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AdminNotDisabled;
our @ISA = qw(HostConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('AdminNotDisabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AffinityConfigured;
our @ISA = qw(MigrationFault);

our @property_list = (
   ['configuredAffinity', undef, 1, 1],
);


VIMRuntime::make_get_set('AffinityConfigured', 'configuredAffinity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AgentInstallFailed;
our @ISA = qw(HostConnectFault);

our @property_list = (
   ['reason', undef, undef, 0],
   ['statusCode', undef, undef, 0],
   ['installerOutput', undef, undef, 0],
);


VIMRuntime::make_get_set('AgentInstallFailed', 'reason', 'statusCode', 'installerOutput');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlreadyBeingManaged;
our @ISA = qw(HostConnectFault);

our @property_list = (
   ['ipAddress', undef, undef, 1],
);


VIMRuntime::make_get_set('AlreadyBeingManaged', 'ipAddress');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlreadyConnected;
our @ISA = qw(HostConnectFault);

our @property_list = (
   ['name', undef, undef, 1],
);


VIMRuntime::make_get_set('AlreadyConnected', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlreadyExists;
our @ISA = qw(VimFault);

our @property_list = (
   ['name', undef, undef, 0],
);


VIMRuntime::make_get_set('AlreadyExists', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AlreadyUpgraded;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('AlreadyUpgraded');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AnswerFileUpdateFailure;
our @ISA = qw(DynamicData);

our @property_list = (
   ['userInputPath', 'ProfilePropertyPath', undef, 1],
   ['errMsg', 'LocalizableMessage', undef, 1],
);


VIMRuntime::make_get_set('AnswerFileUpdateFailure', 'userInputPath', 'errMsg');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfAnswerFileUpdateFailure;
our @ISA = qw(ComplexType);

our @property_list = (
   ['AnswerFileUpdateFailure', 'AnswerFileUpdateFailure', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfAnswerFileUpdateFailure', 'AnswerFileUpdateFailure');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AnswerFileUpdateFailed;
our @ISA = qw(VimFault);

our @property_list = (
   ['failure', 'AnswerFileUpdateFailure', 1, 1],
);


VIMRuntime::make_get_set('AnswerFileUpdateFailed', 'failure');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ApplicationQuiesceFault;
our @ISA = qw(SnapshotFault);

our @property_list = (
);


VIMRuntime::make_get_set('ApplicationQuiesceFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AuthMinimumAdminPermission;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('AuthMinimumAdminPermission');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package BackupBlobReadFailure;
our @ISA = qw(DvsFault);

our @property_list = (
   ['entityName', undef, undef, 1],
   ['entityType', undef, undef, 1],
   ['fault', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('BackupBlobReadFailure', 'entityName', 'entityType', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package BackupBlobWriteFailure;
our @ISA = qw(DvsFault);

our @property_list = (
   ['entityName', undef, undef, 1],
   ['entityType', undef, undef, 1],
   ['fault', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('BackupBlobWriteFailure', 'entityName', 'entityType', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package BlockedByFirewall;
our @ISA = qw(HostConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('BlockedByFirewall');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CAMServerRefusedConnection;
our @ISA = qw(InvalidCAMServer);

our @property_list = (
);


VIMRuntime::make_get_set('CAMServerRefusedConnection');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotAccessFile;
our @ISA = qw(FileFault);

our @property_list = (
);


VIMRuntime::make_get_set('CannotAccessFile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotAccessLocalSource;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('CannotAccessLocalSource');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotAccessNetwork;
our @ISA = qw(CannotAccessVmDevice);

our @property_list = (
   ['network', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('CannotAccessNetwork', 'network');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotAccessVmComponent;
our @ISA = qw(VmConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('CannotAccessVmComponent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotAccessVmConfig;
our @ISA = qw(CannotAccessVmComponent);

our @property_list = (
   ['reason', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('CannotAccessVmConfig', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotAccessVmDevice;
our @ISA = qw(CannotAccessVmComponent);

our @property_list = (
   ['device', undef, undef, 1],
   ['backing', undef, undef, 1],
   ['connected', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('CannotAccessVmDevice', 'device', 'backing', 'connected');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotAccessVmDisk;
our @ISA = qw(CannotAccessVmDevice);

our @property_list = (
   ['fault', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('CannotAccessVmDisk', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotAddHostWithFTVmAsStandalone;
our @ISA = qw(HostConnectFault);

our @property_list = (
);


VIMRuntime::make_get_set('CannotAddHostWithFTVmAsStandalone');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotAddHostWithFTVmToDifferentCluster;
our @ISA = qw(HostConnectFault);

our @property_list = (
);


VIMRuntime::make_get_set('CannotAddHostWithFTVmToDifferentCluster');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotAddHostWithFTVmToNonHACluster;
our @ISA = qw(HostConnectFault);

our @property_list = (
);


VIMRuntime::make_get_set('CannotAddHostWithFTVmToNonHACluster');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotChangeDrsBehaviorForFtSecondary;
our @ISA = qw(VmFaultToleranceIssue);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 1],
   ['vmName', undef, undef, 1],
);


VIMRuntime::make_get_set('CannotChangeDrsBehaviorForFtSecondary', 'vm', 'vmName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotChangeHaSettingsForFtSecondary;
our @ISA = qw(VmFaultToleranceIssue);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 1],
   ['vmName', undef, undef, 1],
);


VIMRuntime::make_get_set('CannotChangeHaSettingsForFtSecondary', 'vm', 'vmName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotChangeVsanClusterUuid;
our @ISA = qw(VsanFault);

our @property_list = (
);


VIMRuntime::make_get_set('CannotChangeVsanClusterUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotChangeVsanNodeUuid;
our @ISA = qw(VsanFault);

our @property_list = (
);


VIMRuntime::make_get_set('CannotChangeVsanNodeUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotComputeFTCompatibleHosts;
our @ISA = qw(VmFaultToleranceIssue);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 1],
   ['vmName', undef, undef, 1],
);


VIMRuntime::make_get_set('CannotComputeFTCompatibleHosts', 'vm', 'vmName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotCreateFile;
our @ISA = qw(FileFault);

our @property_list = (
);


VIMRuntime::make_get_set('CannotCreateFile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotDecryptPasswords;
our @ISA = qw(CustomizationFault);

our @property_list = (
);


VIMRuntime::make_get_set('CannotDecryptPasswords');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotDeleteFile;
our @ISA = qw(FileFault);

our @property_list = (
);


VIMRuntime::make_get_set('CannotDeleteFile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotDisableDrsOnClustersWithVApps;
our @ISA = qw(RuntimeFault);

our @property_list = (
);


VIMRuntime::make_get_set('CannotDisableDrsOnClustersWithVApps');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotDisableSnapshot;
our @ISA = qw(VmConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('CannotDisableSnapshot');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotDisconnectHostWithFaultToleranceVm;
our @ISA = qw(VimFault);

our @property_list = (
   ['hostName', undef, undef, 1],
);


VIMRuntime::make_get_set('CannotDisconnectHostWithFaultToleranceVm', 'hostName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotEnableVmcpForCluster;
our @ISA = qw(VimFault);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 0],
   ['hostName', undef, undef, 0],
   ['reason', undef, undef, 0],
);


VIMRuntime::make_get_set('CannotEnableVmcpForCluster', 'host', 'hostName', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotModifyConfigCpuRequirements;
our @ISA = qw(MigrationFault);

our @property_list = (
);


VIMRuntime::make_get_set('CannotModifyConfigCpuRequirements');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotMoveFaultToleranceVm;
our @ISA = qw(VimFault);

our @property_list = (
   ['moveType', undef, undef, 1],
   ['vmName', undef, undef, 1],
);


VIMRuntime::make_get_set('CannotMoveFaultToleranceVm', 'moveType', 'vmName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotMoveHostWithFaultToleranceVm;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('CannotMoveHostWithFaultToleranceVm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotMoveVmWithDeltaDisk;
our @ISA = qw(MigrationFault);

our @property_list = (
   ['device', undef, undef, 1],
);


VIMRuntime::make_get_set('CannotMoveVmWithDeltaDisk', 'device');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotMoveVmWithNativeDeltaDisk;
our @ISA = qw(MigrationFault);

our @property_list = (
);


VIMRuntime::make_get_set('CannotMoveVmWithNativeDeltaDisk');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotMoveVsanEnabledHost;
our @ISA = qw(VsanFault);

our @property_list = (
);


VIMRuntime::make_get_set('CannotMoveVsanEnabledHost');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotPlaceWithoutPrerequisiteMoves;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('CannotPlaceWithoutPrerequisiteMoves');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotPowerOffVmInCluster;
our @ISA = qw(InvalidState);

our @property_list = (
   ['operation', undef, undef, 1],
   ['vm', 'ManagedObjectReference', undef, 1],
   ['vmName', undef, undef, 1],
);


VIMRuntime::make_get_set('CannotPowerOffVmInCluster', 'operation', 'vm', 'vmName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotReconfigureVsanWhenHaEnabled;
our @ISA = qw(VsanFault);

our @property_list = (
);


VIMRuntime::make_get_set('CannotReconfigureVsanWhenHaEnabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CannotUseNetwork;
our @ISA = qw(VmConfigFault);

our @property_list = (
   ['device', undef, undef, 1],
   ['backing', undef, undef, 1],
   ['connected', 'boolean', undef, 1],
   ['reason', undef, undef, 1],
   ['network', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('CannotUseNetwork', 'device', 'backing', 'connected', 'reason', 'network');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClockSkew;
our @ISA = qw(HostConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('ClockSkew');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CloneFromSnapshotNotSupported;
our @ISA = qw(MigrationFault);

our @property_list = (
);


VIMRuntime::make_get_set('CloneFromSnapshotNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CollectorAddressUnset;
our @ISA = qw(DvsFault);

our @property_list = (
);


VIMRuntime::make_get_set('CollectorAddressUnset');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ConcurrentAccess;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('ConcurrentAccess');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ConflictingConfigurationConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['entity', 'ManagedObjectReference', undef, 0],
   ['propertyPath', undef, undef, 1],
);


VIMRuntime::make_get_set('ConflictingConfigurationConfig', 'entity', 'propertyPath');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfConflictingConfigurationConfig;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ConflictingConfigurationConfig', 'ConflictingConfigurationConfig', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfConflictingConfigurationConfig', 'ConflictingConfigurationConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ConflictingConfiguration;
our @ISA = qw(DvsFault);

our @property_list = (
   ['configInConflict', 'ConflictingConfigurationConfig', 1, 1],
);


VIMRuntime::make_get_set('ConflictingConfiguration', 'configInConflict');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ConflictingDatastoreFound;
our @ISA = qw(RuntimeFault);

our @property_list = (
   ['name', undef, undef, 1],
   ['url', undef, undef, 1],
);


VIMRuntime::make_get_set('ConflictingDatastoreFound', 'name', 'url');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ConnectedIso;
our @ISA = qw(OvfExport);

our @property_list = (
   ['cdrom', 'VirtualCdrom', undef, 1],
   ['filename', undef, undef, 1],
);


VIMRuntime::make_get_set('ConnectedIso', 'cdrom', 'filename');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CpuCompatibilityUnknown;
our @ISA = qw(CpuIncompatible);

our @property_list = (
);


VIMRuntime::make_get_set('CpuCompatibilityUnknown');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CpuHotPlugNotSupported;
our @ISA = qw(VmConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('CpuHotPlugNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CpuIncompatible;
our @ISA = qw(VirtualHardwareCompatibilityIssue);

our @property_list = (
   ['level', undef, undef, 1],
   ['registerName', undef, undef, 1],
   ['registerBits', undef, undef, 0],
   ['desiredBits', undef, undef, 0],
   ['host', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('CpuIncompatible', 'level', 'registerName', 'registerBits', 'desiredBits', 'host');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CpuIncompatible1ECX;
our @ISA = qw(CpuIncompatible);

our @property_list = (
   ['sse3', 'boolean', undef, 1],
   ['pclmulqdq', 'boolean', undef, 0],
   ['ssse3', 'boolean', undef, 1],
   ['sse41', 'boolean', undef, 1],
   ['sse42', 'boolean', undef, 1],
   ['aes', 'boolean', undef, 0],
   ['other', 'boolean', undef, 1],
   ['otherOnly', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('CpuIncompatible1ECX', 'sse3', 'pclmulqdq', 'ssse3', 'sse41', 'sse42', 'aes', 'other', 'otherOnly');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CpuIncompatible81EDX;
our @ISA = qw(CpuIncompatible);

our @property_list = (
   ['nx', 'boolean', undef, 1],
   ['ffxsr', 'boolean', undef, 1],
   ['rdtscp', 'boolean', undef, 1],
   ['lm', 'boolean', undef, 1],
   ['other', 'boolean', undef, 1],
   ['otherOnly', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('CpuIncompatible81EDX', 'nx', 'ffxsr', 'rdtscp', 'lm', 'other', 'otherOnly');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationFault;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('CustomizationFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationPending;
our @ISA = qw(CustomizationFault);

our @property_list = (
);


VIMRuntime::make_get_set('CustomizationPending');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DVPortNotSupported;
our @ISA = qw(DeviceBackingNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('DVPortNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DasConfigFault;
our @ISA = qw(VimFault);

our @property_list = (
   ['reason', undef, undef, 0],
   ['output', undef, undef, 0],
   ['event', 'Event', 1, 0],
);


VIMRuntime::make_get_set('DasConfigFault', 'reason', 'output', 'event');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatabaseError;
our @ISA = qw(RuntimeFault);

our @property_list = (
);


VIMRuntime::make_get_set('DatabaseError');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatacenterMismatchArgument;
our @ISA = qw(DynamicData);

our @property_list = (
   ['entity', 'ManagedObjectReference', undef, 1],
   ['inputDatacenter', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('DatacenterMismatchArgument', 'entity', 'inputDatacenter');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDatacenterMismatchArgument;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DatacenterMismatchArgument', 'DatacenterMismatchArgument', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDatacenterMismatchArgument', 'DatacenterMismatchArgument');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatacenterMismatch;
our @ISA = qw(MigrationFault);

our @property_list = (
   ['invalidArgument', 'DatacenterMismatchArgument', 1, 1],
   ['expectedDatacenter', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('DatacenterMismatch', 'invalidArgument', 'expectedDatacenter');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatastoreNotWritableOnHost;
our @ISA = qw(InvalidDatastore);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('DatastoreNotWritableOnHost', 'host');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DeltaDiskFormatNotSupported;
our @ISA = qw(VmConfigFault);

our @property_list = (
   ['datastore', 'ManagedObjectReference', 1, 0],
   ['deltaDiskFormat', undef, undef, 1],
);


VIMRuntime::make_get_set('DeltaDiskFormatNotSupported', 'datastore', 'deltaDiskFormat');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DestinationSwitchFull;
our @ISA = qw(CannotAccessNetwork);

our @property_list = (
);


VIMRuntime::make_get_set('DestinationSwitchFull');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DestinationVsanDisabled;
our @ISA = qw(CannotMoveVsanEnabledHost);

our @property_list = (
   ['destinationCluster', undef, undef, 1],
);


VIMRuntime::make_get_set('DestinationVsanDisabled', 'destinationCluster');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DeviceBackingNotSupported;
our @ISA = qw(DeviceNotSupported);

our @property_list = (
   ['backing', undef, undef, 1],
);


VIMRuntime::make_get_set('DeviceBackingNotSupported', 'backing');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DeviceControllerNotSupported;
our @ISA = qw(DeviceNotSupported);

our @property_list = (
   ['controller', undef, undef, 1],
);


VIMRuntime::make_get_set('DeviceControllerNotSupported', 'controller');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DeviceHotPlugNotSupported;
our @ISA = qw(InvalidDeviceSpec);

our @property_list = (
);


VIMRuntime::make_get_set('DeviceHotPlugNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DeviceNotFound;
our @ISA = qw(InvalidDeviceSpec);

our @property_list = (
);


VIMRuntime::make_get_set('DeviceNotFound');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DeviceNotSupported;
our @ISA = qw(VirtualHardwareCompatibilityIssue);

our @property_list = (
   ['device', undef, undef, 1],
   ['reason', undef, undef, 0],
);


VIMRuntime::make_get_set('DeviceNotSupported', 'device', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DeviceUnsupportedForVmPlatform;
our @ISA = qw(InvalidDeviceSpec);

our @property_list = (
);


VIMRuntime::make_get_set('DeviceUnsupportedForVmPlatform');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DeviceUnsupportedForVmVersion;
our @ISA = qw(InvalidDeviceSpec);

our @property_list = (
   ['currentVersion', undef, undef, 1],
   ['expectedVersion', undef, undef, 1],
);


VIMRuntime::make_get_set('DeviceUnsupportedForVmVersion', 'currentVersion', 'expectedVersion');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DigestNotSupported;
our @ISA = qw(DeviceNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('DigestNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DirectoryNotEmpty;
our @ISA = qw(FileFault);

our @property_list = (
);


VIMRuntime::make_get_set('DirectoryNotEmpty');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DisableAdminNotSupported;
our @ISA = qw(HostConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('DisableAdminNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DisallowedChangeByService;
our @ISA = qw(RuntimeFault);

our @property_list = (
   ['serviceName', undef, undef, 1],
   ['disallowedChange', undef, undef, 0],
);


VIMRuntime::make_get_set('DisallowedChangeByService', 'serviceName', 'disallowedChange');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DisallowedDiskModeChange;
our @ISA = qw(InvalidDeviceSpec);

our @property_list = (
);


VIMRuntime::make_get_set('DisallowedDiskModeChange');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DisallowedMigrationDeviceAttached;
our @ISA = qw(MigrationFault);

our @property_list = (
   ['fault', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('DisallowedMigrationDeviceAttached', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DisallowedOperationOnFailoverHost;
our @ISA = qw(RuntimeFault);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
   ['hostname', undef, undef, 1],
);


VIMRuntime::make_get_set('DisallowedOperationOnFailoverHost', 'host', 'hostname');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DisconnectedHostsBlockingEVC;
our @ISA = qw(EVCConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('DisconnectedHostsBlockingEVC');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DiskHasPartitions;
our @ISA = qw(VsanDiskFault);

our @property_list = (
);


VIMRuntime::make_get_set('DiskHasPartitions');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DiskIsLastRemainingNonSSD;
our @ISA = qw(VsanDiskFault);

our @property_list = (
);


VIMRuntime::make_get_set('DiskIsLastRemainingNonSSD');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DiskIsNonLocal;
our @ISA = qw(VsanDiskFault);

our @property_list = (
);


VIMRuntime::make_get_set('DiskIsNonLocal');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DiskIsUSB;
our @ISA = qw(VsanDiskFault);

our @property_list = (
);


VIMRuntime::make_get_set('DiskIsUSB');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DiskMoveTypeNotSupported;
our @ISA = qw(MigrationFault);

our @property_list = (
);


VIMRuntime::make_get_set('DiskMoveTypeNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DiskNotSupported;
our @ISA = qw(VirtualHardwareCompatibilityIssue);

our @property_list = (
   ['disk', undef, undef, 1],
);


VIMRuntime::make_get_set('DiskNotSupported', 'disk');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DiskTooSmall;
our @ISA = qw(VsanDiskFault);

our @property_list = (
);


VIMRuntime::make_get_set('DiskTooSmall');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DomainNotFound;
our @ISA = qw(ActiveDirectoryFault);

our @property_list = (
   ['domainName', undef, undef, 1],
);


VIMRuntime::make_get_set('DomainNotFound', 'domainName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DrsDisabledOnVm;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('DrsDisabledOnVm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DrsVmotionIncompatibleFault;
our @ISA = qw(VirtualHardwareCompatibilityIssue);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('DrsVmotionIncompatibleFault', 'host');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DuplicateDisks;
our @ISA = qw(VsanDiskFault);

our @property_list = (
);


VIMRuntime::make_get_set('DuplicateDisks');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DuplicateName;
our @ISA = qw(VimFault);

our @property_list = (
   ['name', undef, undef, 1],
   ['object', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('DuplicateName', 'name', 'object');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DuplicateVsanNetworkInterface;
our @ISA = qw(VsanFault);

our @property_list = (
   ['device', undef, undef, 1],
);


VIMRuntime::make_get_set('DuplicateVsanNetworkInterface', 'device');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsApplyOperationFaultFaultOnObject;
our @ISA = qw(DynamicData);

our @property_list = (
   ['objectId', undef, undef, 1],
   ['type', undef, undef, 1],
   ['fault', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('DvsApplyOperationFaultFaultOnObject', 'objectId', 'type', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDvsApplyOperationFaultFaultOnObject;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DvsApplyOperationFaultFaultOnObject', 'DvsApplyOperationFaultFaultOnObject', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDvsApplyOperationFaultFaultOnObject', 'DvsApplyOperationFaultFaultOnObject');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsApplyOperationFault;
our @ISA = qw(DvsFault);

our @property_list = (
   ['objectFault', 'DvsApplyOperationFaultFaultOnObject', 1, 1],
);


VIMRuntime::make_get_set('DvsApplyOperationFault', 'objectFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsFault;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('DvsFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsNotAuthorized;
our @ISA = qw(DvsFault);

our @property_list = (
   ['sessionExtensionKey', undef, undef, 0],
   ['dvsExtensionKey', undef, undef, 0],
);


VIMRuntime::make_get_set('DvsNotAuthorized', 'sessionExtensionKey', 'dvsExtensionKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsOperationBulkFaultFaultOnHost;
our @ISA = qw(DynamicData);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
   ['fault', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('DvsOperationBulkFaultFaultOnHost', 'host', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDvsOperationBulkFaultFaultOnHost;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DvsOperationBulkFaultFaultOnHost', 'DvsOperationBulkFaultFaultOnHost', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDvsOperationBulkFaultFaultOnHost', 'DvsOperationBulkFaultFaultOnHost');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsOperationBulkFault;
our @ISA = qw(DvsFault);

our @property_list = (
   ['hostFault', 'DvsOperationBulkFaultFaultOnHost', 1, 1],
);


VIMRuntime::make_get_set('DvsOperationBulkFault', 'hostFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsScopeViolated;
our @ISA = qw(DvsFault);

our @property_list = (
   ['scope', 'ManagedObjectReference', 1, 1],
   ['entity', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('DvsScopeViolated', 'scope', 'entity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EVCAdmissionFailed;
our @ISA = qw(NotSupportedHostInCluster);

our @property_list = (
   ['faults', 'LocalizedMethodFault', 1, 0],
);


VIMRuntime::make_get_set('EVCAdmissionFailed', 'faults');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EVCAdmissionFailedCPUFeaturesForMode;
our @ISA = qw(EVCAdmissionFailed);

our @property_list = (
   ['currentEVCModeKey', undef, undef, 1],
);


VIMRuntime::make_get_set('EVCAdmissionFailedCPUFeaturesForMode', 'currentEVCModeKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EVCAdmissionFailedCPUModel;
our @ISA = qw(EVCAdmissionFailed);

our @property_list = (
);


VIMRuntime::make_get_set('EVCAdmissionFailedCPUModel');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EVCAdmissionFailedCPUModelForMode;
our @ISA = qw(EVCAdmissionFailed);

our @property_list = (
   ['currentEVCModeKey', undef, undef, 1],
);


VIMRuntime::make_get_set('EVCAdmissionFailedCPUModelForMode', 'currentEVCModeKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EVCAdmissionFailedCPUVendor;
our @ISA = qw(EVCAdmissionFailed);

our @property_list = (
   ['clusterCPUVendor', undef, undef, 1],
   ['hostCPUVendor', undef, undef, 1],
);


VIMRuntime::make_get_set('EVCAdmissionFailedCPUVendor', 'clusterCPUVendor', 'hostCPUVendor');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EVCAdmissionFailedCPUVendorUnknown;
our @ISA = qw(EVCAdmissionFailed);

our @property_list = (
);


VIMRuntime::make_get_set('EVCAdmissionFailedCPUVendorUnknown');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EVCAdmissionFailedHostDisconnected;
our @ISA = qw(EVCAdmissionFailed);

our @property_list = (
);


VIMRuntime::make_get_set('EVCAdmissionFailedHostDisconnected');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EVCAdmissionFailedHostSoftware;
our @ISA = qw(EVCAdmissionFailed);

our @property_list = (
);


VIMRuntime::make_get_set('EVCAdmissionFailedHostSoftware');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EVCAdmissionFailedHostSoftwareForMode;
our @ISA = qw(EVCAdmissionFailed);

our @property_list = (
);


VIMRuntime::make_get_set('EVCAdmissionFailedHostSoftwareForMode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EVCAdmissionFailedVmActive;
our @ISA = qw(EVCAdmissionFailed);

our @property_list = (
);


VIMRuntime::make_get_set('EVCAdmissionFailedVmActive');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EVCConfigFault;
our @ISA = qw(VimFault);

our @property_list = (
   ['faults', 'LocalizedMethodFault', 1, 0],
);


VIMRuntime::make_get_set('EVCConfigFault', 'faults');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EVCModeIllegalByVendor;
our @ISA = qw(EVCConfigFault);

our @property_list = (
   ['clusterCPUVendor', undef, undef, 1],
   ['modeCPUVendor', undef, undef, 1],
);


VIMRuntime::make_get_set('EVCModeIllegalByVendor', 'clusterCPUVendor', 'modeCPUVendor');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EVCModeUnsupportedByHosts;
our @ISA = qw(EVCConfigFault);

our @property_list = (
   ['evcMode', undef, undef, 0],
   ['host', 'ManagedObjectReference', 1, 0],
   ['hostName', undef, 1, 0],
);


VIMRuntime::make_get_set('EVCModeUnsupportedByHosts', 'evcMode', 'host', 'hostName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EVCUnsupportedByHostHardware;
our @ISA = qw(EVCConfigFault);

our @property_list = (
   ['host', 'ManagedObjectReference', 1, 1],
   ['hostName', undef, 1, 1],
);


VIMRuntime::make_get_set('EVCUnsupportedByHostHardware', 'host', 'hostName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EVCUnsupportedByHostSoftware;
our @ISA = qw(EVCConfigFault);

our @property_list = (
   ['host', 'ManagedObjectReference', 1, 1],
   ['hostName', undef, 1, 1],
);


VIMRuntime::make_get_set('EVCUnsupportedByHostSoftware', 'host', 'hostName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package EightHostLimitViolated;
our @ISA = qw(VmConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('EightHostLimitViolated');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExpiredAddonLicense;
our @ISA = qw(ExpiredFeatureLicense);

our @property_list = (
);


VIMRuntime::make_get_set('ExpiredAddonLicense');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExpiredEditionLicense;
our @ISA = qw(ExpiredFeatureLicense);

our @property_list = (
);


VIMRuntime::make_get_set('ExpiredEditionLicense');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExpiredFeatureLicense;
our @ISA = qw(NotEnoughLicenses);

our @property_list = (
   ['feature', undef, undef, 1],
   ['count', undef, undef, 1],
   ['expirationDate', undef, undef, 1],
);


VIMRuntime::make_get_set('ExpiredFeatureLicense', 'feature', 'count', 'expirationDate');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ExtendedFault;
our @ISA = qw(VimFault);

our @property_list = (
   ['faultTypeId', undef, undef, 1],
   ['data', 'KeyValue', 1, 0],
);


VIMRuntime::make_get_set('ExtendedFault', 'faultTypeId', 'data');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FailToEnableSPBM;
our @ISA = qw(NotEnoughLicenses);

our @property_list = (
   ['cs', 'ManagedObjectReference', undef, 1],
   ['csName', undef, undef, 1],
   ['hostLicenseStates', 'ComputeResourceHostSPBMLicenseInfo', 1, 1],
);


VIMRuntime::make_get_set('FailToEnableSPBM', 'cs', 'csName', 'hostLicenseStates');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FailToLockFaultToleranceVMs;
our @ISA = qw(RuntimeFault);

our @property_list = (
   ['vmName', undef, undef, 1],
   ['vm', 'ManagedObjectReference', undef, 1],
   ['alreadyLockedVm', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('FailToLockFaultToleranceVMs', 'vmName', 'vm', 'alreadyLockedVm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FaultToleranceAntiAffinityViolated;
our @ISA = qw(MigrationFault);

our @property_list = (
   ['hostName', undef, undef, 1],
   ['host', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('FaultToleranceAntiAffinityViolated', 'hostName', 'host');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FaultToleranceCannotEditMem;
our @ISA = qw(VmConfigFault);

our @property_list = (
   ['vmName', undef, undef, 1],
   ['vm', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('FaultToleranceCannotEditMem', 'vmName', 'vm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FaultToleranceCpuIncompatible;
our @ISA = qw(CpuIncompatible);

our @property_list = (
   ['model', 'boolean', undef, 1],
   ['family', 'boolean', undef, 1],
   ['stepping', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('FaultToleranceCpuIncompatible', 'model', 'family', 'stepping');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FaultToleranceNeedsThickDisk;
our @ISA = qw(MigrationFault);

our @property_list = (
   ['vmName', undef, undef, 1],
);


VIMRuntime::make_get_set('FaultToleranceNeedsThickDisk', 'vmName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FaultToleranceNotLicensed;
our @ISA = qw(VmFaultToleranceIssue);

our @property_list = (
   ['hostName', undef, undef, 0],
);


VIMRuntime::make_get_set('FaultToleranceNotLicensed', 'hostName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FaultToleranceNotSameBuild;
our @ISA = qw(MigrationFault);

our @property_list = (
   ['build', undef, undef, 1],
);


VIMRuntime::make_get_set('FaultToleranceNotSameBuild', 'build');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FaultTolerancePrimaryPowerOnNotAttempted;
our @ISA = qw(VmFaultToleranceIssue);

our @property_list = (
   ['secondaryVm', 'ManagedObjectReference', undef, 1],
   ['primaryVm', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('FaultTolerancePrimaryPowerOnNotAttempted', 'secondaryVm', 'primaryVm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FaultToleranceVmNotDasProtected;
our @ISA = qw(VimFault);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 1],
   ['vmName', undef, undef, 1],
);


VIMRuntime::make_get_set('FaultToleranceVmNotDasProtected', 'vm', 'vmName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FcoeFault;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('FcoeFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FcoeFaultPnicHasNoPortSet;
our @ISA = qw(FcoeFault);

our @property_list = (
   ['nicDevice', undef, undef, 1],
);


VIMRuntime::make_get_set('FcoeFaultPnicHasNoPortSet', 'nicDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FeatureRequirementsNotMet;
our @ISA = qw(VirtualHardwareCompatibilityIssue);

our @property_list = (
   ['featureRequirement', 'VirtualMachineFeatureRequirement', 1, 0],
   ['vm', 'ManagedObjectReference', undef, 0],
   ['host', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('FeatureRequirementsNotMet', 'featureRequirement', 'vm', 'host');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FileAlreadyExists;
our @ISA = qw(FileFault);

our @property_list = (
);


VIMRuntime::make_get_set('FileAlreadyExists');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FileBackedPortNotSupported;
our @ISA = qw(DeviceNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('FileBackedPortNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FileFault;
our @ISA = qw(VimFault);

our @property_list = (
   ['file', undef, undef, 1],
);


VIMRuntime::make_get_set('FileFault', 'file');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FileLocked;
our @ISA = qw(FileFault);

our @property_list = (
);


VIMRuntime::make_get_set('FileLocked');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FileNameTooLong;
our @ISA = qw(FileFault);

our @property_list = (
);


VIMRuntime::make_get_set('FileNameTooLong');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FileNotFound;
our @ISA = qw(FileFault);

our @property_list = (
);


VIMRuntime::make_get_set('FileNotFound');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FileNotWritable;
our @ISA = qw(FileFault);

our @property_list = (
);


VIMRuntime::make_get_set('FileNotWritable');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FileTooLarge;
our @ISA = qw(FileFault);

our @property_list = (
   ['datastore', undef, undef, 1],
   ['fileSize', undef, undef, 1],
   ['maxFileSize', undef, undef, 0],
);


VIMRuntime::make_get_set('FileTooLarge', 'datastore', 'fileSize', 'maxFileSize');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FilesystemQuiesceFault;
our @ISA = qw(SnapshotFault);

our @property_list = (
);


VIMRuntime::make_get_set('FilesystemQuiesceFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FilterInUse;
our @ISA = qw(ResourceInUse);

our @property_list = (
   ['disk', 'VirtualDiskId', 1, 0],
);


VIMRuntime::make_get_set('FilterInUse', 'disk');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FtIssuesOnHost;
our @ISA = qw(VmFaultToleranceIssue);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
   ['hostName', undef, undef, 1],
   ['errors', 'LocalizedMethodFault', 1, 0],
);


VIMRuntime::make_get_set('FtIssuesOnHost', 'host', 'hostName', 'errors');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FullStorageVMotionNotSupported;
our @ISA = qw(MigrationFeatureNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('FullStorageVMotionNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GatewayConnectFault;
our @ISA = qw(HostConnectFault);

our @property_list = (
   ['gatewayType', undef, undef, 1],
   ['gatewayId', undef, undef, 1],
   ['gatewayInfo', undef, undef, 1],
   ['details', 'LocalizableMessage', undef, 0],
);


VIMRuntime::make_get_set('GatewayConnectFault', 'gatewayType', 'gatewayId', 'gatewayInfo', 'details');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GatewayHostNotReachable;
our @ISA = qw(GatewayToHostConnectFault);

our @property_list = (
);


VIMRuntime::make_get_set('GatewayHostNotReachable');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GatewayNotFound;
our @ISA = qw(GatewayConnectFault);

our @property_list = (
);


VIMRuntime::make_get_set('GatewayNotFound');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GatewayNotReachable;
our @ISA = qw(GatewayConnectFault);

our @property_list = (
);


VIMRuntime::make_get_set('GatewayNotReachable');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GatewayOperationRefused;
our @ISA = qw(GatewayConnectFault);

our @property_list = (
);


VIMRuntime::make_get_set('GatewayOperationRefused');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GatewayToHostAuthFault;
our @ISA = qw(GatewayToHostConnectFault);

our @property_list = (
   ['invalidProperties', undef, 1, 1],
   ['missingProperties', undef, 1, 1],
);


VIMRuntime::make_get_set('GatewayToHostAuthFault', 'invalidProperties', 'missingProperties');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GatewayToHostConnectFault;
our @ISA = qw(GatewayConnectFault);

our @property_list = (
   ['hostname', undef, undef, 1],
   ['port', undef, undef, 0],
);


VIMRuntime::make_get_set('GatewayToHostConnectFault', 'hostname', 'port');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GatewayToHostTrustVerifyFault;
our @ISA = qw(GatewayToHostConnectFault);

our @property_list = (
   ['verificationToken', undef, undef, 1],
   ['propertiesToVerify', 'KeyValue', 1, 1],
);


VIMRuntime::make_get_set('GatewayToHostTrustVerifyFault', 'verificationToken', 'propertiesToVerify');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GenericDrsFault;
our @ISA = qw(VimFault);

our @property_list = (
   ['hostFaults', 'LocalizedMethodFault', 1, 0],
);


VIMRuntime::make_get_set('GenericDrsFault', 'hostFaults');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GenericVmConfigFault;
our @ISA = qw(VmConfigFault);

our @property_list = (
   ['reason', undef, undef, 1],
);


VIMRuntime::make_get_set('GenericVmConfigFault', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestAuthenticationChallenge;
our @ISA = qw(GuestOperationsFault);

our @property_list = (
   ['serverChallenge', 'GuestAuthentication', undef, 1],
   ['sessionID', undef, undef, 1],
);


VIMRuntime::make_get_set('GuestAuthenticationChallenge', 'serverChallenge', 'sessionID');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestComponentsOutOfDate;
our @ISA = qw(GuestOperationsFault);

our @property_list = (
);


VIMRuntime::make_get_set('GuestComponentsOutOfDate');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestMultipleMappings;
our @ISA = qw(GuestOperationsFault);

our @property_list = (
);


VIMRuntime::make_get_set('GuestMultipleMappings');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestOperationsFault;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('GuestOperationsFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestOperationsUnavailable;
our @ISA = qw(GuestOperationsFault);

our @property_list = (
);


VIMRuntime::make_get_set('GuestOperationsUnavailable');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestPermissionDenied;
our @ISA = qw(GuestOperationsFault);

our @property_list = (
);


VIMRuntime::make_get_set('GuestPermissionDenied');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestProcessNotFound;
our @ISA = qw(GuestOperationsFault);

our @property_list = (
   ['pid', undef, undef, 1],
);


VIMRuntime::make_get_set('GuestProcessNotFound', 'pid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestRegistryFault;
our @ISA = qw(GuestOperationsFault);

our @property_list = (
   ['windowsSystemErrorCode', undef, undef, 1],
);


VIMRuntime::make_get_set('GuestRegistryFault', 'windowsSystemErrorCode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestRegistryKeyAlreadyExists;
our @ISA = qw(GuestRegistryKeyFault);

our @property_list = (
);


VIMRuntime::make_get_set('GuestRegistryKeyAlreadyExists');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestRegistryKeyFault;
our @ISA = qw(GuestRegistryFault);

our @property_list = (
   ['keyName', undef, undef, 1],
);


VIMRuntime::make_get_set('GuestRegistryKeyFault', 'keyName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestRegistryKeyHasSubkeys;
our @ISA = qw(GuestRegistryKeyFault);

our @property_list = (
);


VIMRuntime::make_get_set('GuestRegistryKeyHasSubkeys');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestRegistryKeyInvalid;
our @ISA = qw(GuestRegistryKeyFault);

our @property_list = (
);


VIMRuntime::make_get_set('GuestRegistryKeyInvalid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestRegistryKeyParentVolatile;
our @ISA = qw(GuestRegistryKeyFault);

our @property_list = (
);


VIMRuntime::make_get_set('GuestRegistryKeyParentVolatile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestRegistryValueFault;
our @ISA = qw(GuestRegistryFault);

our @property_list = (
   ['keyName', undef, undef, 1],
   ['valueName', undef, undef, 1],
);


VIMRuntime::make_get_set('GuestRegistryValueFault', 'keyName', 'valueName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestRegistryValueNotFound;
our @ISA = qw(GuestRegistryValueFault);

our @property_list = (
);


VIMRuntime::make_get_set('GuestRegistryValueNotFound');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HAErrorsAtDest;
our @ISA = qw(MigrationFault);

our @property_list = (
);


VIMRuntime::make_get_set('HAErrorsAtDest');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HeterogenousHostsBlockingEVC;
our @ISA = qw(EVCConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('HeterogenousHostsBlockingEVC');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostAccessRestrictedToManagementServer;
our @ISA = qw(NotSupported);

our @property_list = (
   ['managementServer', undef, undef, 1],
);


VIMRuntime::make_get_set('HostAccessRestrictedToManagementServer', 'managementServer');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostConfigFailed;
our @ISA = qw(HostConfigFault);

our @property_list = (
   ['failure', 'LocalizedMethodFault', 1, 1],
);


VIMRuntime::make_get_set('HostConfigFailed', 'failure');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostConfigFault;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('HostConfigFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostConnectFault;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('HostConnectFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostHasComponentFailure;
our @ISA = qw(VimFault);

our @property_list = (
   ['hostName', undef, undef, 1],
   ['componentType', undef, undef, 1],
   ['componentName', undef, undef, 1],
);


VIMRuntime::make_get_set('HostHasComponentFailure', 'hostName', 'componentType', 'componentName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostInDomain;
our @ISA = qw(HostConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('HostInDomain');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostIncompatibleForFaultTolerance;
our @ISA = qw(VmFaultToleranceIssue);

our @property_list = (
   ['hostName', undef, undef, 0],
   ['reason', undef, undef, 0],
);


VIMRuntime::make_get_set('HostIncompatibleForFaultTolerance', 'hostName', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostIncompatibleForRecordReplay;
our @ISA = qw(VimFault);

our @property_list = (
   ['hostName', undef, undef, 0],
   ['reason', undef, undef, 0],
);


VIMRuntime::make_get_set('HostIncompatibleForRecordReplay', 'hostName', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostInventoryFull;
our @ISA = qw(NotEnoughLicenses);

our @property_list = (
   ['capacity', undef, undef, 1],
);


VIMRuntime::make_get_set('HostInventoryFull', 'capacity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPowerOpFailed;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('HostPowerOpFailed');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSpecificationOperationFailed;
our @ISA = qw(VimFault);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('HostSpecificationOperationFailed', 'host');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HotSnapshotMoveNotSupported;
our @ISA = qw(SnapshotCopyNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('HotSnapshotMoveNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IDEDiskNotSupported;
our @ISA = qw(DiskNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('IDEDiskNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IORMNotSupportedHostOnDatastore;
our @ISA = qw(VimFault);

our @property_list = (
   ['datastore', 'ManagedObjectReference', undef, 1],
   ['datastoreName', undef, undef, 1],
   ['host', 'ManagedObjectReference', 1, 0],
);


VIMRuntime::make_get_set('IORMNotSupportedHostOnDatastore', 'datastore', 'datastoreName', 'host');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ImportHostAddFailure;
our @ISA = qw(DvsFault);

our @property_list = (
   ['hostIp', undef, 1, 1],
);


VIMRuntime::make_get_set('ImportHostAddFailure', 'hostIp');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ImportOperationBulkFaultFaultOnImport;
our @ISA = qw(DynamicData);

our @property_list = (
   ['entityType', undef, undef, 0],
   ['key', undef, undef, 0],
   ['fault', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('ImportOperationBulkFaultFaultOnImport', 'entityType', 'key', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfImportOperationBulkFaultFaultOnImport;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ImportOperationBulkFaultFaultOnImport', 'ImportOperationBulkFaultFaultOnImport', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfImportOperationBulkFaultFaultOnImport', 'ImportOperationBulkFaultFaultOnImport');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ImportOperationBulkFault;
our @ISA = qw(DvsFault);

our @property_list = (
   ['importFaults', 'ImportOperationBulkFaultFaultOnImport', 1, 1],
);


VIMRuntime::make_get_set('ImportOperationBulkFault', 'importFaults');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InUseFeatureManipulationDisallowed;
our @ISA = qw(NotEnoughLicenses);

our @property_list = (
);


VIMRuntime::make_get_set('InUseFeatureManipulationDisallowed');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InaccessibleDatastore;
our @ISA = qw(InvalidDatastore);

our @property_list = (
   ['detail', undef, undef, 0],
);


VIMRuntime::make_get_set('InaccessibleDatastore', 'detail');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InaccessibleFTMetadataDatastore;
our @ISA = qw(InaccessibleDatastore);

our @property_list = (
);


VIMRuntime::make_get_set('InaccessibleFTMetadataDatastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InaccessibleVFlashSource;
our @ISA = qw(VimFault);

our @property_list = (
   ['hostName', undef, undef, 1],
);


VIMRuntime::make_get_set('InaccessibleVFlashSource', 'hostName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IncompatibleDefaultDevice;
our @ISA = qw(MigrationFault);

our @property_list = (
   ['device', undef, undef, 1],
);


VIMRuntime::make_get_set('IncompatibleDefaultDevice', 'device');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IncompatibleHostForFtSecondary;
our @ISA = qw(VmFaultToleranceIssue);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
   ['error', 'LocalizedMethodFault', 1, 0],
);


VIMRuntime::make_get_set('IncompatibleHostForFtSecondary', 'host', 'error');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IncompatibleHostForVmReplication;
our @ISA = qw(ReplicationFault);

our @property_list = (
   ['vmName', undef, undef, 1],
   ['hostName', undef, undef, 1],
   ['reason', undef, undef, 1],
);


VIMRuntime::make_get_set('IncompatibleHostForVmReplication', 'vmName', 'hostName', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IncompatibleSetting;
our @ISA = qw(InvalidArgument);

our @property_list = (
   ['conflictingProperty', undef, undef, 1],
);


VIMRuntime::make_get_set('IncompatibleSetting', 'conflictingProperty');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IncorrectFileType;
our @ISA = qw(FileFault);

our @property_list = (
);


VIMRuntime::make_get_set('IncorrectFileType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IncorrectHostInformation;
our @ISA = qw(NotEnoughLicenses);

our @property_list = (
);


VIMRuntime::make_get_set('IncorrectHostInformation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IndependentDiskVMotionNotSupported;
our @ISA = qw(MigrationFeatureNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('IndependentDiskVMotionNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InsufficientAgentVmsDeployed;
our @ISA = qw(InsufficientResourcesFault);

our @property_list = (
   ['hostName', undef, undef, 1],
   ['requiredNumAgentVms', undef, undef, 1],
   ['currentNumAgentVms', undef, undef, 1],
);


VIMRuntime::make_get_set('InsufficientAgentVmsDeployed', 'hostName', 'requiredNumAgentVms', 'currentNumAgentVms');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InsufficientCpuResourcesFault;
our @ISA = qw(InsufficientResourcesFault);

our @property_list = (
   ['unreserved', undef, undef, 1],
   ['requested', undef, undef, 1],
);


VIMRuntime::make_get_set('InsufficientCpuResourcesFault', 'unreserved', 'requested');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InsufficientDisks;
our @ISA = qw(VsanDiskFault);

our @property_list = (
);


VIMRuntime::make_get_set('InsufficientDisks');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InsufficientFailoverResourcesFault;
our @ISA = qw(InsufficientResourcesFault);

our @property_list = (
);


VIMRuntime::make_get_set('InsufficientFailoverResourcesFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InsufficientGraphicsResourcesFault;
our @ISA = qw(InsufficientResourcesFault);

our @property_list = (
);


VIMRuntime::make_get_set('InsufficientGraphicsResourcesFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InsufficientHostCapacityFault;
our @ISA = qw(InsufficientResourcesFault);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('InsufficientHostCapacityFault', 'host');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InsufficientHostCpuCapacityFault;
our @ISA = qw(InsufficientHostCapacityFault);

our @property_list = (
   ['unreserved', undef, undef, 1],
   ['requested', undef, undef, 1],
);


VIMRuntime::make_get_set('InsufficientHostCpuCapacityFault', 'unreserved', 'requested');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InsufficientHostMemoryCapacityFault;
our @ISA = qw(InsufficientHostCapacityFault);

our @property_list = (
   ['unreserved', undef, undef, 1],
   ['requested', undef, undef, 1],
);


VIMRuntime::make_get_set('InsufficientHostMemoryCapacityFault', 'unreserved', 'requested');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InsufficientMemoryResourcesFault;
our @ISA = qw(InsufficientResourcesFault);

our @property_list = (
   ['unreserved', undef, undef, 1],
   ['requested', undef, undef, 1],
);


VIMRuntime::make_get_set('InsufficientMemoryResourcesFault', 'unreserved', 'requested');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InsufficientNetworkCapacity;
our @ISA = qw(InsufficientResourcesFault);

our @property_list = (
);


VIMRuntime::make_get_set('InsufficientNetworkCapacity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InsufficientNetworkResourcePoolCapacity;
our @ISA = qw(InsufficientResourcesFault);

our @property_list = (
   ['dvsName', undef, undef, 1],
   ['dvsUuid', undef, undef, 1],
   ['resourcePoolKey', undef, undef, 1],
   ['available', undef, undef, 1],
   ['requested', undef, undef, 1],
   ['device', undef, 1, 1],
);


VIMRuntime::make_get_set('InsufficientNetworkResourcePoolCapacity', 'dvsName', 'dvsUuid', 'resourcePoolKey', 'available', 'requested', 'device');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InsufficientPerCpuCapacity;
our @ISA = qw(InsufficientHostCapacityFault);

our @property_list = (
);


VIMRuntime::make_get_set('InsufficientPerCpuCapacity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InsufficientResourcesFault;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('InsufficientResourcesFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InsufficientStandbyCpuResource;
our @ISA = qw(InsufficientStandbyResource);

our @property_list = (
   ['available', undef, undef, 1],
   ['requested', undef, undef, 1],
);


VIMRuntime::make_get_set('InsufficientStandbyCpuResource', 'available', 'requested');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InsufficientStandbyMemoryResource;
our @ISA = qw(InsufficientStandbyResource);

our @property_list = (
   ['available', undef, undef, 1],
   ['requested', undef, undef, 1],
);


VIMRuntime::make_get_set('InsufficientStandbyMemoryResource', 'available', 'requested');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InsufficientStandbyResource;
our @ISA = qw(InsufficientResourcesFault);

our @property_list = (
);


VIMRuntime::make_get_set('InsufficientStandbyResource');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InsufficientStorageIops;
our @ISA = qw(VimFault);

our @property_list = (
   ['unreservedIops', undef, undef, 1],
   ['requestedIops', undef, undef, 1],
   ['datastoreName', undef, undef, 1],
);


VIMRuntime::make_get_set('InsufficientStorageIops', 'unreservedIops', 'requestedIops', 'datastoreName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InsufficientStorageSpace;
our @ISA = qw(InsufficientResourcesFault);

our @property_list = (
);


VIMRuntime::make_get_set('InsufficientStorageSpace');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InsufficientVFlashResourcesFault;
our @ISA = qw(InsufficientResourcesFault);

our @property_list = (
   ['freeSpaceInMB', undef, undef, 0],
   ['freeSpace', undef, undef, 1],
   ['requestedSpaceInMB', undef, undef, 0],
   ['requestedSpace', undef, undef, 1],
);


VIMRuntime::make_get_set('InsufficientVFlashResourcesFault', 'freeSpaceInMB', 'freeSpace', 'requestedSpaceInMB', 'requestedSpace');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidAffinitySettingFault;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('InvalidAffinitySettingFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidBmcRole;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('InvalidBmcRole');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidBundle;
our @ISA = qw(PlatformConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('InvalidBundle');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidCAMCertificate;
our @ISA = qw(InvalidCAMServer);

our @property_list = (
);


VIMRuntime::make_get_set('InvalidCAMCertificate');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidCAMServer;
our @ISA = qw(ActiveDirectoryFault);

our @property_list = (
   ['camServer', undef, undef, 1],
);


VIMRuntime::make_get_set('InvalidCAMServer', 'camServer');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidClientCertificate;
our @ISA = qw(InvalidLogin);

our @property_list = (
);


VIMRuntime::make_get_set('InvalidClientCertificate');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidController;
our @ISA = qw(InvalidDeviceSpec);

our @property_list = (
   ['controllerKey', undef, undef, 1],
);


VIMRuntime::make_get_set('InvalidController', 'controllerKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidDasConfigArgument;
our @ISA = qw(InvalidArgument);

our @property_list = (
   ['entry', undef, undef, 0],
   ['clusterName', undef, undef, 0],
);


VIMRuntime::make_get_set('InvalidDasConfigArgument', 'entry', 'clusterName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidDasRestartPriorityForFtVm;
our @ISA = qw(InvalidArgument);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 1],
   ['vmName', undef, undef, 1],
);


VIMRuntime::make_get_set('InvalidDasRestartPriorityForFtVm', 'vm', 'vmName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidDatastore;
our @ISA = qw(VimFault);

our @property_list = (
   ['datastore', 'ManagedObjectReference', undef, 0],
   ['name', undef, undef, 0],
);


VIMRuntime::make_get_set('InvalidDatastore', 'datastore', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidDatastorePath;
our @ISA = qw(InvalidDatastore);

our @property_list = (
   ['datastorePath', undef, undef, 1],
);


VIMRuntime::make_get_set('InvalidDatastorePath', 'datastorePath');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidDatastoreState;
our @ISA = qw(InvalidState);

our @property_list = (
   ['datastoreName', undef, undef, 0],
);


VIMRuntime::make_get_set('InvalidDatastoreState', 'datastoreName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidDeviceBacking;
our @ISA = qw(InvalidDeviceSpec);

our @property_list = (
);


VIMRuntime::make_get_set('InvalidDeviceBacking');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidDeviceOperation;
our @ISA = qw(InvalidDeviceSpec);

our @property_list = (
   ['badOp', 'VirtualDeviceConfigSpecOperation', undef, 0],
   ['badFileOp', 'VirtualDeviceConfigSpecFileOperation', undef, 0],
);


VIMRuntime::make_get_set('InvalidDeviceOperation', 'badOp', 'badFileOp');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidDeviceSpec;
our @ISA = qw(InvalidVmConfig);

our @property_list = (
   ['deviceIndex', undef, undef, 1],
);


VIMRuntime::make_get_set('InvalidDeviceSpec', 'deviceIndex');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidDiskFormat;
our @ISA = qw(InvalidFormat);

our @property_list = (
);


VIMRuntime::make_get_set('InvalidDiskFormat');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidDrsBehaviorForFtVm;
our @ISA = qw(InvalidArgument);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 1],
   ['vmName', undef, undef, 1],
);


VIMRuntime::make_get_set('InvalidDrsBehaviorForFtVm', 'vm', 'vmName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidEditionLicense;
our @ISA = qw(NotEnoughLicenses);

our @property_list = (
   ['feature', undef, undef, 1],
);


VIMRuntime::make_get_set('InvalidEditionLicense', 'feature');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidEvent;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('InvalidEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidFolder;
our @ISA = qw(VimFault);

our @property_list = (
   ['target', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('InvalidFolder', 'target');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidFormat;
our @ISA = qw(VmConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('InvalidFormat');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidGuestLogin;
our @ISA = qw(GuestOperationsFault);

our @property_list = (
);


VIMRuntime::make_get_set('InvalidGuestLogin');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidHostConnectionState;
our @ISA = qw(InvalidHostState);

our @property_list = (
);


VIMRuntime::make_get_set('InvalidHostConnectionState');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidHostName;
our @ISA = qw(HostConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('InvalidHostName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidHostState;
our @ISA = qw(InvalidState);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('InvalidHostState', 'host');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidIndexArgument;
our @ISA = qw(InvalidArgument);

our @property_list = (
   ['key', undef, undef, 1],
);


VIMRuntime::make_get_set('InvalidIndexArgument', 'key');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidIpfixConfig;
our @ISA = qw(DvsFault);

our @property_list = (
   ['property', undef, undef, 0],
);


VIMRuntime::make_get_set('InvalidIpfixConfig', 'property');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidIpmiLoginInfo;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('InvalidIpmiLoginInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidIpmiMacAddress;
our @ISA = qw(VimFault);

our @property_list = (
   ['userProvidedMacAddress', undef, undef, 1],
   ['observedMacAddress', undef, undef, 1],
);


VIMRuntime::make_get_set('InvalidIpmiMacAddress', 'userProvidedMacAddress', 'observedMacAddress');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidLicense;
our @ISA = qw(VimFault);

our @property_list = (
   ['licenseContent', undef, undef, 1],
);


VIMRuntime::make_get_set('InvalidLicense', 'licenseContent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidLocale;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('InvalidLocale');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidLogin;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('InvalidLogin');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidName;
our @ISA = qw(VimFault);

our @property_list = (
   ['name', undef, undef, 1],
   ['entity', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('InvalidName', 'name', 'entity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidNasCredentials;
our @ISA = qw(NasConfigFault);

our @property_list = (
   ['userName', undef, undef, 1],
);


VIMRuntime::make_get_set('InvalidNasCredentials', 'userName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidNetworkInType;
our @ISA = qw(VAppPropertyFault);

our @property_list = (
);


VIMRuntime::make_get_set('InvalidNetworkInType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidNetworkResource;
our @ISA = qw(NasConfigFault);

our @property_list = (
   ['remoteHost', undef, undef, 1],
   ['remotePath', undef, undef, 1],
);


VIMRuntime::make_get_set('InvalidNetworkResource', 'remoteHost', 'remotePath');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidOperationOnSecondaryVm;
our @ISA = qw(VmFaultToleranceIssue);

our @property_list = (
   ['instanceUuid', undef, undef, 0],
);


VIMRuntime::make_get_set('InvalidOperationOnSecondaryVm', 'instanceUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidPowerState;
our @ISA = qw(InvalidState);

our @property_list = (
   ['requestedState', 'VirtualMachinePowerState', undef, 0],
   ['existingState', 'VirtualMachinePowerState', undef, 1],
);


VIMRuntime::make_get_set('InvalidPowerState', 'requestedState', 'existingState');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidPrivilege;
our @ISA = qw(VimFault);

our @property_list = (
   ['privilege', undef, undef, 1],
);


VIMRuntime::make_get_set('InvalidPrivilege', 'privilege');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidProfileReferenceHost;
our @ISA = qw(RuntimeFault);

our @property_list = (
   ['reason', undef, undef, 0],
   ['host', 'ManagedObjectReference', undef, 0],
   ['profile', 'ManagedObjectReference', undef, 0],
   ['profileName', undef, undef, 0],
);


VIMRuntime::make_get_set('InvalidProfileReferenceHost', 'reason', 'host', 'profile', 'profileName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidPropertyType;
our @ISA = qw(VAppPropertyFault);

our @property_list = (
);


VIMRuntime::make_get_set('InvalidPropertyType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidPropertyValue;
our @ISA = qw(VAppPropertyFault);

our @property_list = (
);


VIMRuntime::make_get_set('InvalidPropertyValue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidResourcePoolStructureFault;
our @ISA = qw(InsufficientResourcesFault);

our @property_list = (
);


VIMRuntime::make_get_set('InvalidResourcePoolStructureFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidSnapshotFormat;
our @ISA = qw(InvalidFormat);

our @property_list = (
);


VIMRuntime::make_get_set('InvalidSnapshotFormat');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidState;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('InvalidState');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidVmConfig;
our @ISA = qw(VmConfigFault);

our @property_list = (
   ['property', undef, undef, 0],
);


VIMRuntime::make_get_set('InvalidVmConfig', 'property');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidVmState;
our @ISA = qw(InvalidState);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('InvalidVmState', 'vm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InventoryHasStandardAloneHosts;
our @ISA = qw(NotEnoughLicenses);

our @property_list = (
   ['hosts', undef, 1, 1],
);


VIMRuntime::make_get_set('InventoryHasStandardAloneHosts', 'hosts');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IpHostnameGeneratorError;
our @ISA = qw(CustomizationFault);

our @property_list = (
);


VIMRuntime::make_get_set('IpHostnameGeneratorError');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IscsiFault;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('IscsiFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IscsiFaultInvalidVnic;
our @ISA = qw(IscsiFault);

our @property_list = (
   ['vnicDevice', undef, undef, 1],
);


VIMRuntime::make_get_set('IscsiFaultInvalidVnic', 'vnicDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IscsiFaultPnicInUse;
our @ISA = qw(IscsiFault);

our @property_list = (
   ['pnicDevice', undef, undef, 1],
);


VIMRuntime::make_get_set('IscsiFaultPnicInUse', 'pnicDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IscsiFaultVnicAlreadyBound;
our @ISA = qw(IscsiFault);

our @property_list = (
   ['vnicDevice', undef, undef, 1],
);


VIMRuntime::make_get_set('IscsiFaultVnicAlreadyBound', 'vnicDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IscsiFaultVnicHasActivePaths;
our @ISA = qw(IscsiFault);

our @property_list = (
   ['vnicDevice', undef, undef, 1],
);


VIMRuntime::make_get_set('IscsiFaultVnicHasActivePaths', 'vnicDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IscsiFaultVnicHasMultipleUplinks;
our @ISA = qw(IscsiFault);

our @property_list = (
   ['vnicDevice', undef, undef, 1],
);


VIMRuntime::make_get_set('IscsiFaultVnicHasMultipleUplinks', 'vnicDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IscsiFaultVnicHasNoUplinks;
our @ISA = qw(IscsiFault);

our @property_list = (
   ['vnicDevice', undef, undef, 1],
);


VIMRuntime::make_get_set('IscsiFaultVnicHasNoUplinks', 'vnicDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IscsiFaultVnicHasWrongUplink;
our @ISA = qw(IscsiFault);

our @property_list = (
   ['vnicDevice', undef, undef, 1],
);


VIMRuntime::make_get_set('IscsiFaultVnicHasWrongUplink', 'vnicDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IscsiFaultVnicInUse;
our @ISA = qw(IscsiFault);

our @property_list = (
   ['vnicDevice', undef, undef, 1],
);


VIMRuntime::make_get_set('IscsiFaultVnicInUse', 'vnicDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IscsiFaultVnicIsLastPath;
our @ISA = qw(IscsiFault);

our @property_list = (
   ['vnicDevice', undef, undef, 1],
);


VIMRuntime::make_get_set('IscsiFaultVnicIsLastPath', 'vnicDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IscsiFaultVnicNotBound;
our @ISA = qw(IscsiFault);

our @property_list = (
   ['vnicDevice', undef, undef, 1],
);


VIMRuntime::make_get_set('IscsiFaultVnicNotBound', 'vnicDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IscsiFaultVnicNotFound;
our @ISA = qw(IscsiFault);

our @property_list = (
   ['vnicDevice', undef, undef, 1],
);


VIMRuntime::make_get_set('IscsiFaultVnicNotFound', 'vnicDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LargeRDMConversionNotSupported;
our @ISA = qw(MigrationFault);

our @property_list = (
   ['device', undef, undef, 1],
);


VIMRuntime::make_get_set('LargeRDMConversionNotSupported', 'device');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LargeRDMNotSupportedOnDatastore;
our @ISA = qw(VmConfigFault);

our @property_list = (
   ['device', undef, undef, 1],
   ['datastore', 'ManagedObjectReference', undef, 1],
   ['datastoreName', undef, undef, 1],
);


VIMRuntime::make_get_set('LargeRDMNotSupportedOnDatastore', 'device', 'datastore', 'datastoreName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LegacyNetworkInterfaceInUse;
our @ISA = qw(CannotAccessNetwork);

our @property_list = (
);


VIMRuntime::make_get_set('LegacyNetworkInterfaceInUse');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseAssignmentFailed;
our @ISA = qw(RuntimeFault);

our @property_list = (
   ['reason', undef, undef, 0],
);


VIMRuntime::make_get_set('LicenseAssignmentFailed', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseDowngradeDisallowed;
our @ISA = qw(NotEnoughLicenses);

our @property_list = (
   ['edition', undef, undef, 1],
   ['entityId', undef, undef, 1],
   ['features', 'KeyAnyValue', 1, 1],
);


VIMRuntime::make_get_set('LicenseDowngradeDisallowed', 'edition', 'entityId', 'features');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseEntityNotFound;
our @ISA = qw(VimFault);

our @property_list = (
   ['entityId', undef, undef, 1],
);


VIMRuntime::make_get_set('LicenseEntityNotFound', 'entityId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseExpired;
our @ISA = qw(NotEnoughLicenses);

our @property_list = (
   ['licenseKey', undef, undef, 1],
);


VIMRuntime::make_get_set('LicenseExpired', 'licenseKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseKeyEntityMismatch;
our @ISA = qw(NotEnoughLicenses);

our @property_list = (
);


VIMRuntime::make_get_set('LicenseKeyEntityMismatch');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseRestricted;
our @ISA = qw(NotEnoughLicenses);

our @property_list = (
);


VIMRuntime::make_get_set('LicenseRestricted');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseServerUnavailable;
our @ISA = qw(VimFault);

our @property_list = (
   ['licenseServer', undef, undef, 1],
);


VIMRuntime::make_get_set('LicenseServerUnavailable', 'licenseServer');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LicenseSourceUnavailable;
our @ISA = qw(NotEnoughLicenses);

our @property_list = (
   ['licenseSource', 'LicenseSource', undef, 1],
);


VIMRuntime::make_get_set('LicenseSourceUnavailable', 'licenseSource');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LimitExceeded;
our @ISA = qw(VimFault);

our @property_list = (
   ['property', undef, undef, 0],
   ['limit', undef, undef, 0],
);


VIMRuntime::make_get_set('LimitExceeded', 'property', 'limit');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LinuxVolumeNotClean;
our @ISA = qw(CustomizationFault);

our @property_list = (
);


VIMRuntime::make_get_set('LinuxVolumeNotClean');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LogBundlingFailed;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('LogBundlingFailed');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MaintenanceModeFileMove;
our @ISA = qw(MigrationFault);

our @property_list = (
);


VIMRuntime::make_get_set('MaintenanceModeFileMove');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MemoryFileFormatNotSupportedByDatastore;
our @ISA = qw(UnsupportedDatastore);

our @property_list = (
   ['datastoreName', undef, undef, 1],
   ['type', undef, undef, 1],
);


VIMRuntime::make_get_set('MemoryFileFormatNotSupportedByDatastore', 'datastoreName', 'type');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MemoryHotPlugNotSupported;
our @ISA = qw(VmConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('MemoryHotPlugNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MemorySizeNotRecommended;
our @ISA = qw(VirtualHardwareCompatibilityIssue);

our @property_list = (
   ['memorySizeMB', undef, undef, 1],
   ['minMemorySizeMB', undef, undef, 1],
   ['maxMemorySizeMB', undef, undef, 1],
);


VIMRuntime::make_get_set('MemorySizeNotRecommended', 'memorySizeMB', 'minMemorySizeMB', 'maxMemorySizeMB');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MemorySizeNotSupported;
our @ISA = qw(VirtualHardwareCompatibilityIssue);

our @property_list = (
   ['memorySizeMB', undef, undef, 1],
   ['minMemorySizeMB', undef, undef, 1],
   ['maxMemorySizeMB', undef, undef, 1],
);


VIMRuntime::make_get_set('MemorySizeNotSupported', 'memorySizeMB', 'minMemorySizeMB', 'maxMemorySizeMB');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MemorySizeNotSupportedByDatastore;
our @ISA = qw(VirtualHardwareCompatibilityIssue);

our @property_list = (
   ['datastore', 'ManagedObjectReference', undef, 1],
   ['memorySizeMB', undef, undef, 1],
   ['maxMemorySizeMB', undef, undef, 1],
);


VIMRuntime::make_get_set('MemorySizeNotSupportedByDatastore', 'datastore', 'memorySizeMB', 'maxMemorySizeMB');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MemorySnapshotOnIndependentDisk;
our @ISA = qw(SnapshotFault);

our @property_list = (
);


VIMRuntime::make_get_set('MemorySnapshotOnIndependentDisk');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MethodAlreadyDisabledFault;
our @ISA = qw(RuntimeFault);

our @property_list = (
   ['sourceId', undef, undef, 1],
);


VIMRuntime::make_get_set('MethodAlreadyDisabledFault', 'sourceId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MethodDisabled;
our @ISA = qw(RuntimeFault);

our @property_list = (
   ['source', undef, undef, 0],
);


VIMRuntime::make_get_set('MethodDisabled', 'source');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MigrationDisabled;
our @ISA = qw(MigrationFault);

our @property_list = (
);


VIMRuntime::make_get_set('MigrationDisabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MigrationFault;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('MigrationFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MigrationFeatureNotSupported;
our @ISA = qw(MigrationFault);

our @property_list = (
   ['atSourceHost', 'boolean', undef, 1],
   ['failedHostName', undef, undef, 1],
   ['failedHost', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('MigrationFeatureNotSupported', 'atSourceHost', 'failedHostName', 'failedHost');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MigrationNotReady;
our @ISA = qw(MigrationFault);

our @property_list = (
   ['reason', undef, undef, 1],
);


VIMRuntime::make_get_set('MigrationNotReady', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MismatchedBundle;
our @ISA = qw(VimFault);

our @property_list = (
   ['bundleUuid', undef, undef, 1],
   ['hostUuid', undef, undef, 1],
   ['bundleBuildNumber', undef, undef, 1],
   ['hostBuildNumber', undef, undef, 1],
);


VIMRuntime::make_get_set('MismatchedBundle', 'bundleUuid', 'hostUuid', 'bundleBuildNumber', 'hostBuildNumber');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MismatchedNetworkPolicies;
our @ISA = qw(MigrationFault);

our @property_list = (
   ['device', undef, undef, 1],
   ['backing', undef, undef, 1],
   ['connected', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('MismatchedNetworkPolicies', 'device', 'backing', 'connected');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MismatchedVMotionNetworkNames;
our @ISA = qw(MigrationFault);

our @property_list = (
   ['sourceNetwork', undef, undef, 1],
   ['destNetwork', undef, undef, 1],
);


VIMRuntime::make_get_set('MismatchedVMotionNetworkNames', 'sourceNetwork', 'destNetwork');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MissingBmcSupport;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('MissingBmcSupport');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MissingController;
our @ISA = qw(InvalidDeviceSpec);

our @property_list = (
);


VIMRuntime::make_get_set('MissingController');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MissingIpPool;
our @ISA = qw(VAppPropertyFault);

our @property_list = (
);


VIMRuntime::make_get_set('MissingIpPool');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MissingLinuxCustResources;
our @ISA = qw(CustomizationFault);

our @property_list = (
);


VIMRuntime::make_get_set('MissingLinuxCustResources');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MissingNetworkIpConfig;
our @ISA = qw(VAppPropertyFault);

our @property_list = (
);


VIMRuntime::make_get_set('MissingNetworkIpConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MissingPowerOffConfiguration;
our @ISA = qw(VAppConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('MissingPowerOffConfiguration');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MissingPowerOnConfiguration;
our @ISA = qw(VAppConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('MissingPowerOnConfiguration');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MissingWindowsCustResources;
our @ISA = qw(CustomizationFault);

our @property_list = (
);


VIMRuntime::make_get_set('MissingWindowsCustResources');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MksConnectionLimitReached;
our @ISA = qw(InvalidState);

our @property_list = (
   ['connectionLimit', undef, undef, 1],
);


VIMRuntime::make_get_set('MksConnectionLimitReached', 'connectionLimit');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MountError;
our @ISA = qw(CustomizationFault);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 1],
   ['diskIndex', undef, undef, 1],
);


VIMRuntime::make_get_set('MountError', 'vm', 'diskIndex');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MultiWriterNotSupported;
our @ISA = qw(DeviceNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('MultiWriterNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MultipleCertificatesVerifyFaultThumbprintData;
our @ISA = qw(DynamicData);

our @property_list = (
   ['port', undef, undef, 1],
   ['thumbprint', undef, undef, 1],
);


VIMRuntime::make_get_set('MultipleCertificatesVerifyFaultThumbprintData', 'port', 'thumbprint');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfMultipleCertificatesVerifyFaultThumbprintData;
our @ISA = qw(ComplexType);

our @property_list = (
   ['MultipleCertificatesVerifyFaultThumbprintData', 'MultipleCertificatesVerifyFaultThumbprintData', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfMultipleCertificatesVerifyFaultThumbprintData', 'MultipleCertificatesVerifyFaultThumbprintData');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MultipleCertificatesVerifyFault;
our @ISA = qw(HostConnectFault);

our @property_list = (
   ['thumbprintData', 'MultipleCertificatesVerifyFaultThumbprintData', 1, 1],
);


VIMRuntime::make_get_set('MultipleCertificatesVerifyFault', 'thumbprintData');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MultipleSnapshotsNotSupported;
our @ISA = qw(SnapshotFault);

our @property_list = (
);


VIMRuntime::make_get_set('MultipleSnapshotsNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NamespaceFull;
our @ISA = qw(VimFault);

our @property_list = (
   ['name', undef, undef, 1],
   ['currentMaxSize', undef, undef, 1],
   ['requiredSize', undef, undef, 0],
);


VIMRuntime::make_get_set('NamespaceFull', 'name', 'currentMaxSize', 'requiredSize');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NamespaceLimitReached;
our @ISA = qw(VimFault);

our @property_list = (
   ['limit', undef, undef, 0],
);


VIMRuntime::make_get_set('NamespaceLimitReached', 'limit');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NamespaceWriteProtected;
our @ISA = qw(VimFault);

our @property_list = (
   ['name', undef, undef, 1],
);


VIMRuntime::make_get_set('NamespaceWriteProtected', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NasConfigFault;
our @ISA = qw(HostConfigFault);

our @property_list = (
   ['name', undef, undef, 1],
);


VIMRuntime::make_get_set('NasConfigFault', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NasConnectionLimitReached;
our @ISA = qw(NasConfigFault);

our @property_list = (
   ['remoteHost', undef, undef, 1],
   ['remotePath', undef, undef, 1],
);


VIMRuntime::make_get_set('NasConnectionLimitReached', 'remoteHost', 'remotePath');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NasSessionCredentialConflict;
our @ISA = qw(NasConfigFault);

our @property_list = (
   ['remoteHost', undef, undef, 1],
   ['remotePath', undef, undef, 1],
   ['userName', undef, undef, 1],
);


VIMRuntime::make_get_set('NasSessionCredentialConflict', 'remoteHost', 'remotePath', 'userName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NasVolumeNotMounted;
our @ISA = qw(NasConfigFault);

our @property_list = (
   ['remoteHost', undef, undef, 1],
   ['remotePath', undef, undef, 1],
);


VIMRuntime::make_get_set('NasVolumeNotMounted', 'remoteHost', 'remotePath');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetworkCopyFault;
our @ISA = qw(FileFault);

our @property_list = (
);


VIMRuntime::make_get_set('NetworkCopyFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetworkDisruptedAndConfigRolledBack;
our @ISA = qw(VimFault);

our @property_list = (
   ['host', undef, undef, 1],
);


VIMRuntime::make_get_set('NetworkDisruptedAndConfigRolledBack', 'host');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetworkInaccessible;
our @ISA = qw(NasConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('NetworkInaccessible');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetworksMayNotBeTheSame;
our @ISA = qw(MigrationFault);

our @property_list = (
   ['name', undef, undef, 0],
);


VIMRuntime::make_get_set('NetworksMayNotBeTheSame', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NicSettingMismatch;
our @ISA = qw(CustomizationFault);

our @property_list = (
   ['numberOfNicsInSpec', undef, undef, 1],
   ['numberOfNicsInVM', undef, undef, 1],
);


VIMRuntime::make_get_set('NicSettingMismatch', 'numberOfNicsInSpec', 'numberOfNicsInVM');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoActiveHostInCluster;
our @ISA = qw(InvalidState);

our @property_list = (
   ['computeResource', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('NoActiveHostInCluster', 'computeResource');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoAvailableIp;
our @ISA = qw(VAppPropertyFault);

our @property_list = (
   ['network', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('NoAvailableIp', 'network');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoClientCertificate;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('NoClientCertificate');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoCompatibleDatastore;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('NoCompatibleDatastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoCompatibleHardAffinityHost;
our @ISA = qw(VmConfigFault);

our @property_list = (
   ['vmName', undef, undef, 1],
);


VIMRuntime::make_get_set('NoCompatibleHardAffinityHost', 'vmName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoCompatibleHost;
our @ISA = qw(VimFault);

our @property_list = (
   ['host', 'ManagedObjectReference', 1, 0],
   ['error', 'LocalizedMethodFault', 1, 0],
);


VIMRuntime::make_get_set('NoCompatibleHost', 'host', 'error');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoCompatibleHostWithAccessToDevice;
our @ISA = qw(NoCompatibleHost);

our @property_list = (
);


VIMRuntime::make_get_set('NoCompatibleHostWithAccessToDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoCompatibleSoftAffinityHost;
our @ISA = qw(VmConfigFault);

our @property_list = (
   ['vmName', undef, undef, 1],
);


VIMRuntime::make_get_set('NoCompatibleSoftAffinityHost', 'vmName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoConnectedDatastore;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('NoConnectedDatastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoDiskFound;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('NoDiskFound');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoDiskSpace;
our @ISA = qw(FileFault);

our @property_list = (
   ['datastore', undef, undef, 1],
);


VIMRuntime::make_get_set('NoDiskSpace', 'datastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoDisksToCustomize;
our @ISA = qw(CustomizationFault);

our @property_list = (
);


VIMRuntime::make_get_set('NoDisksToCustomize');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoGateway;
our @ISA = qw(HostConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('NoGateway');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoGuestHeartbeat;
our @ISA = qw(MigrationFault);

our @property_list = (
);


VIMRuntime::make_get_set('NoGuestHeartbeat');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoHost;
our @ISA = qw(HostConnectFault);

our @property_list = (
   ['name', undef, undef, 0],
);


VIMRuntime::make_get_set('NoHost', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoHostSuitableForFtSecondary;
our @ISA = qw(VmFaultToleranceIssue);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 1],
   ['vmName', undef, undef, 1],
);


VIMRuntime::make_get_set('NoHostSuitableForFtSecondary', 'vm', 'vmName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoLicenseServerConfigured;
our @ISA = qw(NotEnoughLicenses);

our @property_list = (
);


VIMRuntime::make_get_set('NoLicenseServerConfigured');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoPeerHostFound;
our @ISA = qw(HostPowerOpFailed);

our @property_list = (
);


VIMRuntime::make_get_set('NoPeerHostFound');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoPermission;
our @ISA = qw(SecurityError);

our @property_list = (
   ['object', 'ManagedObjectReference', undef, 1],
   ['privilegeId', undef, undef, 1],
);


VIMRuntime::make_get_set('NoPermission', 'object', 'privilegeId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoPermissionOnAD;
our @ISA = qw(ActiveDirectoryFault);

our @property_list = (
);


VIMRuntime::make_get_set('NoPermissionOnAD');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoPermissionOnHost;
our @ISA = qw(HostConnectFault);

our @property_list = (
);


VIMRuntime::make_get_set('NoPermissionOnHost');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoPermissionOnNasVolume;
our @ISA = qw(NasConfigFault);

our @property_list = (
   ['userName', undef, undef, 0],
);


VIMRuntime::make_get_set('NoPermissionOnNasVolume', 'userName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoSubjectName;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('NoSubjectName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoVcManagedIpConfigured;
our @ISA = qw(VAppPropertyFault);

our @property_list = (
);


VIMRuntime::make_get_set('NoVcManagedIpConfigured');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoVirtualNic;
our @ISA = qw(HostConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('NoVirtualNic');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NoVmInVApp;
our @ISA = qw(VAppConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('NoVmInVApp');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NonADUserRequired;
our @ISA = qw(ActiveDirectoryFault);

our @property_list = (
);


VIMRuntime::make_get_set('NonADUserRequired');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NonHomeRDMVMotionNotSupported;
our @ISA = qw(MigrationFeatureNotSupported);

our @property_list = (
   ['device', undef, undef, 1],
);


VIMRuntime::make_get_set('NonHomeRDMVMotionNotSupported', 'device');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NonPersistentDisksNotSupported;
our @ISA = qw(DeviceNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('NonPersistentDisksNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NonVmwareOuiMacNotSupportedHost;
our @ISA = qw(NotSupportedHost);

our @property_list = (
   ['hostName', undef, undef, 1],
);


VIMRuntime::make_get_set('NonVmwareOuiMacNotSupportedHost', 'hostName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NotADirectory;
our @ISA = qw(FileFault);

our @property_list = (
);


VIMRuntime::make_get_set('NotADirectory');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NotAFile;
our @ISA = qw(FileFault);

our @property_list = (
);


VIMRuntime::make_get_set('NotAFile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NotAuthenticated;
our @ISA = qw(NoPermission);

our @property_list = (
);


VIMRuntime::make_get_set('NotAuthenticated');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NotEnoughCpus;
our @ISA = qw(VirtualHardwareCompatibilityIssue);

our @property_list = (
   ['numCpuDest', undef, undef, 1],
   ['numCpuVm', undef, undef, 1],
);


VIMRuntime::make_get_set('NotEnoughCpus', 'numCpuDest', 'numCpuVm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NotEnoughLogicalCpus;
our @ISA = qw(NotEnoughCpus);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('NotEnoughLogicalCpus', 'host');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NotFound;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('NotFound');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NotSupportedDeviceForFT;
our @ISA = qw(VmFaultToleranceIssue);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
   ['hostName', undef, undef, 0],
   ['vm', 'ManagedObjectReference', undef, 1],
   ['vmName', undef, undef, 0],
   ['deviceType', undef, undef, 1],
   ['deviceLabel', undef, undef, 0],
);


VIMRuntime::make_get_set('NotSupportedDeviceForFT', 'host', 'hostName', 'vm', 'vmName', 'deviceType', 'deviceLabel');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NotSupportedHost;
our @ISA = qw(HostConnectFault);

our @property_list = (
   ['productName', undef, undef, 0],
   ['productVersion', undef, undef, 0],
);


VIMRuntime::make_get_set('NotSupportedHost', 'productName', 'productVersion');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NotSupportedHostForChecksum;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('NotSupportedHostForChecksum');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NotSupportedHostForVFlash;
our @ISA = qw(NotSupportedHost);

our @property_list = (
   ['hostName', undef, undef, 1],
);


VIMRuntime::make_get_set('NotSupportedHostForVFlash', 'hostName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NotSupportedHostForVmcp;
our @ISA = qw(NotSupportedHost);

our @property_list = (
   ['hostName', undef, undef, 1],
);


VIMRuntime::make_get_set('NotSupportedHostForVmcp', 'hostName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NotSupportedHostForVmemFile;
our @ISA = qw(NotSupportedHost);

our @property_list = (
   ['hostName', undef, undef, 1],
);


VIMRuntime::make_get_set('NotSupportedHostForVmemFile', 'hostName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NotSupportedHostForVsan;
our @ISA = qw(NotSupportedHost);

our @property_list = (
   ['hostName', undef, undef, 1],
);


VIMRuntime::make_get_set('NotSupportedHostForVsan', 'hostName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NotSupportedHostInCluster;
our @ISA = qw(NotSupportedHost);

our @property_list = (
);


VIMRuntime::make_get_set('NotSupportedHostInCluster');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NotSupportedHostInDvs;
our @ISA = qw(NotSupportedHost);

our @property_list = (
   ['switchProductSpec', 'DistributedVirtualSwitchProductSpec', undef, 1],
);


VIMRuntime::make_get_set('NotSupportedHostInDvs', 'switchProductSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NotSupportedHostInHACluster;
our @ISA = qw(NotSupportedHost);

our @property_list = (
   ['hostName', undef, undef, 1],
   ['build', undef, undef, 1],
);


VIMRuntime::make_get_set('NotSupportedHostInHACluster', 'hostName', 'build');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NotUserConfigurableProperty;
our @ISA = qw(VAppPropertyFault);

our @property_list = (
);


VIMRuntime::make_get_set('NotUserConfigurableProperty');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NumVirtualCoresPerSocketNotSupported;
our @ISA = qw(VirtualHardwareCompatibilityIssue);

our @property_list = (
   ['maxSupportedCoresPerSocketDest', undef, undef, 1],
   ['numCoresPerSocketVm', undef, undef, 1],
);


VIMRuntime::make_get_set('NumVirtualCoresPerSocketNotSupported', 'maxSupportedCoresPerSocketDest', 'numCoresPerSocketVm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NumVirtualCpusExceedsLimit;
our @ISA = qw(InsufficientResourcesFault);

our @property_list = (
   ['maxSupportedVcpus', undef, undef, 1],
);


VIMRuntime::make_get_set('NumVirtualCpusExceedsLimit', 'maxSupportedVcpus');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NumVirtualCpusIncompatible;
our @ISA = qw(VmConfigFault);

our @property_list = (
   ['reason', undef, undef, 1],
   ['numCpu', undef, undef, 1],
);


VIMRuntime::make_get_set('NumVirtualCpusIncompatible', 'reason', 'numCpu');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NumVirtualCpusNotSupported;
our @ISA = qw(VirtualHardwareCompatibilityIssue);

our @property_list = (
   ['maxSupportedVcpusDest', undef, undef, 1],
   ['numCpuVm', undef, undef, 1],
);


VIMRuntime::make_get_set('NumVirtualCpusNotSupported', 'maxSupportedVcpusDest', 'numCpuVm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OperationDisabledByGuest;
our @ISA = qw(GuestOperationsFault);

our @property_list = (
);


VIMRuntime::make_get_set('OperationDisabledByGuest');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OperationDisallowedOnHost;
our @ISA = qw(RuntimeFault);

our @property_list = (
);


VIMRuntime::make_get_set('OperationDisallowedOnHost');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OperationNotSupportedByGuest;
our @ISA = qw(GuestOperationsFault);

our @property_list = (
);


VIMRuntime::make_get_set('OperationNotSupportedByGuest');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OutOfBounds;
our @ISA = qw(VimFault);

our @property_list = (
   ['argumentName', undef, undef, 1],
);


VIMRuntime::make_get_set('OutOfBounds', 'argumentName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfAttribute;
our @ISA = qw(OvfInvalidPackage);

our @property_list = (
   ['elementName', undef, undef, 1],
   ['attributeName', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfAttribute', 'elementName', 'attributeName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfConnectedDevice;
our @ISA = qw(OvfHardwareExport);

our @property_list = (
);


VIMRuntime::make_get_set('OvfConnectedDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfConnectedDeviceFloppy;
our @ISA = qw(OvfConnectedDevice);

our @property_list = (
   ['filename', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfConnectedDeviceFloppy', 'filename');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfConnectedDeviceIso;
our @ISA = qw(OvfConnectedDevice);

our @property_list = (
   ['filename', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfConnectedDeviceIso', 'filename');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfConstraint;
our @ISA = qw(OvfInvalidPackage);

our @property_list = (
   ['name', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfConstraint', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfConsumerCallbackFault;
our @ISA = qw(OvfFault);

our @property_list = (
   ['extensionKey', undef, undef, 1],
   ['extensionName', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfConsumerCallbackFault', 'extensionKey', 'extensionName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfConsumerCommunicationError;
our @ISA = qw(OvfConsumerCallbackFault);

our @property_list = (
   ['description', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfConsumerCommunicationError', 'description');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfConsumerFault;
our @ISA = qw(OvfConsumerCallbackFault);

our @property_list = (
   ['errorKey', undef, undef, 1],
   ['message', undef, undef, 1],
   ['params', 'KeyValue', 1, 0],
);


VIMRuntime::make_get_set('OvfConsumerFault', 'errorKey', 'message', 'params');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfConsumerInvalidSection;
our @ISA = qw(OvfConsumerCallbackFault);

our @property_list = (
   ['lineNumber', undef, undef, 1],
   ['description', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfConsumerInvalidSection', 'lineNumber', 'description');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfConsumerPowerOnFault;
our @ISA = qw(InvalidState);

our @property_list = (
   ['extensionKey', undef, undef, 1],
   ['extensionName', undef, undef, 1],
   ['description', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfConsumerPowerOnFault', 'extensionKey', 'extensionName', 'description');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfConsumerUndeclaredSection;
our @ISA = qw(OvfConsumerCallbackFault);

our @property_list = (
   ['qualifiedSectionType', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfConsumerUndeclaredSection', 'qualifiedSectionType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfConsumerUndefinedPrefix;
our @ISA = qw(OvfConsumerCallbackFault);

our @property_list = (
   ['prefix', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfConsumerUndefinedPrefix', 'prefix');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfConsumerValidationFault;
our @ISA = qw(VmConfigFault);

our @property_list = (
   ['extensionKey', undef, undef, 1],
   ['extensionName', undef, undef, 1],
   ['message', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfConsumerValidationFault', 'extensionKey', 'extensionName', 'message');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfCpuCompatibility;
our @ISA = qw(OvfImport);

our @property_list = (
   ['registerName', undef, undef, 1],
   ['level', undef, undef, 1],
   ['registerValue', undef, undef, 1],
   ['desiredRegisterValue', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfCpuCompatibility', 'registerName', 'level', 'registerValue', 'desiredRegisterValue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfCpuCompatibilityCheckNotSupported;
our @ISA = qw(OvfImport);

our @property_list = (
);


VIMRuntime::make_get_set('OvfCpuCompatibilityCheckNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfDiskMappingNotFound;
our @ISA = qw(OvfSystemFault);

our @property_list = (
   ['diskName', undef, undef, 1],
   ['vmName', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfDiskMappingNotFound', 'diskName', 'vmName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfDiskOrderConstraint;
our @ISA = qw(OvfConstraint);

our @property_list = (
);


VIMRuntime::make_get_set('OvfDiskOrderConstraint');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfDuplicateElement;
our @ISA = qw(OvfElement);

our @property_list = (
);


VIMRuntime::make_get_set('OvfDuplicateElement');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfDuplicatedElementBoundary;
our @ISA = qw(OvfElement);

our @property_list = (
   ['boundary', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfDuplicatedElementBoundary', 'boundary');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfDuplicatedPropertyIdExport;
our @ISA = qw(OvfExport);

our @property_list = (
   ['fqid', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfDuplicatedPropertyIdExport', 'fqid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfDuplicatedPropertyIdImport;
our @ISA = qw(OvfExport);

our @property_list = (
);


VIMRuntime::make_get_set('OvfDuplicatedPropertyIdImport');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfElement;
our @ISA = qw(OvfInvalidPackage);

our @property_list = (
   ['name', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfElement', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfElementInvalidValue;
our @ISA = qw(OvfElement);

our @property_list = (
   ['value', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfElementInvalidValue', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfExport;
our @ISA = qw(OvfFault);

our @property_list = (
);


VIMRuntime::make_get_set('OvfExport');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfExportFailed;
our @ISA = qw(OvfExport);

our @property_list = (
);


VIMRuntime::make_get_set('OvfExportFailed');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfFault;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('OvfFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfHardwareCheck;
our @ISA = qw(OvfImport);

our @property_list = (
);


VIMRuntime::make_get_set('OvfHardwareCheck');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfHardwareExport;
our @ISA = qw(OvfExport);

our @property_list = (
   ['device', 'VirtualDevice', undef, 0],
   ['vmPath', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfHardwareExport', 'device', 'vmPath');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfHostResourceConstraint;
our @ISA = qw(OvfConstraint);

our @property_list = (
   ['value', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfHostResourceConstraint', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfHostValueNotParsed;
our @ISA = qw(OvfSystemFault);

our @property_list = (
   ['property', undef, undef, 1],
   ['value', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfHostValueNotParsed', 'property', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfImport;
our @ISA = qw(OvfFault);

our @property_list = (
);


VIMRuntime::make_get_set('OvfImport');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfImportFailed;
our @ISA = qw(OvfImport);

our @property_list = (
);


VIMRuntime::make_get_set('OvfImportFailed');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfInternalError;
our @ISA = qw(OvfSystemFault);

our @property_list = (
);


VIMRuntime::make_get_set('OvfInternalError');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfInvalidPackage;
our @ISA = qw(OvfFault);

our @property_list = (
   ['lineNumber', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfInvalidPackage', 'lineNumber');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfInvalidValue;
our @ISA = qw(OvfAttribute);

our @property_list = (
   ['value', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfInvalidValue', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfInvalidValueConfiguration;
our @ISA = qw(OvfInvalidValue);

our @property_list = (
);


VIMRuntime::make_get_set('OvfInvalidValueConfiguration');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfInvalidValueEmpty;
our @ISA = qw(OvfInvalidValue);

our @property_list = (
);


VIMRuntime::make_get_set('OvfInvalidValueEmpty');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfInvalidValueFormatMalformed;
our @ISA = qw(OvfInvalidValue);

our @property_list = (
);


VIMRuntime::make_get_set('OvfInvalidValueFormatMalformed');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfInvalidValueReference;
our @ISA = qw(OvfInvalidValue);

our @property_list = (
);


VIMRuntime::make_get_set('OvfInvalidValueReference');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfInvalidVmName;
our @ISA = qw(OvfUnsupportedPackage);

our @property_list = (
   ['name', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfInvalidVmName', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfMappedOsId;
our @ISA = qw(OvfImport);

our @property_list = (
   ['ovfId', undef, undef, 1],
   ['ovfDescription', undef, undef, 1],
   ['targetDescription', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfMappedOsId', 'ovfId', 'ovfDescription', 'targetDescription');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfMissingAttribute;
our @ISA = qw(OvfAttribute);

our @property_list = (
);


VIMRuntime::make_get_set('OvfMissingAttribute');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfMissingElement;
our @ISA = qw(OvfElement);

our @property_list = (
);


VIMRuntime::make_get_set('OvfMissingElement');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfMissingElementNormalBoundary;
our @ISA = qw(OvfMissingElement);

our @property_list = (
   ['boundary', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfMissingElementNormalBoundary', 'boundary');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfMissingHardware;
our @ISA = qw(OvfImport);

our @property_list = (
   ['name', undef, undef, 1],
   ['resourceType', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfMissingHardware', 'name', 'resourceType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfNetworkMappingNotSupported;
our @ISA = qw(OvfImport);

our @property_list = (
);


VIMRuntime::make_get_set('OvfNetworkMappingNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfNoHostNic;
our @ISA = qw(OvfUnsupportedPackage);

our @property_list = (
);


VIMRuntime::make_get_set('OvfNoHostNic');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfNoSpaceOnController;
our @ISA = qw(OvfUnsupportedElement);

our @property_list = (
   ['parent', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfNoSpaceOnController', 'parent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfNoSupportedHardwareFamily;
our @ISA = qw(OvfUnsupportedPackage);

our @property_list = (
   ['version', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfNoSupportedHardwareFamily', 'version');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfProperty;
our @ISA = qw(OvfInvalidPackage);

our @property_list = (
   ['type', undef, undef, 1],
   ['value', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfProperty', 'type', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfPropertyExport;
our @ISA = qw(OvfExport);

our @property_list = (
   ['type', undef, undef, 1],
   ['value', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfPropertyExport', 'type', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfPropertyNetwork;
our @ISA = qw(OvfProperty);

our @property_list = (
);


VIMRuntime::make_get_set('OvfPropertyNetwork');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfPropertyNetworkExport;
our @ISA = qw(OvfExport);

our @property_list = (
   ['network', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfPropertyNetworkExport', 'network');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfPropertyQualifier;
our @ISA = qw(OvfProperty);

our @property_list = (
   ['qualifier', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfPropertyQualifier', 'qualifier');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfPropertyQualifierDuplicate;
our @ISA = qw(OvfProperty);

our @property_list = (
   ['qualifier', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfPropertyQualifierDuplicate', 'qualifier');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfPropertyQualifierIgnored;
our @ISA = qw(OvfProperty);

our @property_list = (
   ['qualifier', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfPropertyQualifierIgnored', 'qualifier');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfPropertyType;
our @ISA = qw(OvfProperty);

our @property_list = (
);


VIMRuntime::make_get_set('OvfPropertyType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfPropertyValue;
our @ISA = qw(OvfProperty);

our @property_list = (
);


VIMRuntime::make_get_set('OvfPropertyValue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfSystemFault;
our @ISA = qw(OvfFault);

our @property_list = (
);


VIMRuntime::make_get_set('OvfSystemFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfToXmlUnsupportedElement;
our @ISA = qw(OvfSystemFault);

our @property_list = (
   ['name', undef, undef, 0],
);


VIMRuntime::make_get_set('OvfToXmlUnsupportedElement', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfUnableToExportDisk;
our @ISA = qw(OvfHardwareExport);

our @property_list = (
   ['diskName', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfUnableToExportDisk', 'diskName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfUnexpectedElement;
our @ISA = qw(OvfElement);

our @property_list = (
);


VIMRuntime::make_get_set('OvfUnexpectedElement');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfUnknownDevice;
our @ISA = qw(OvfSystemFault);

our @property_list = (
   ['device', 'VirtualDevice', undef, 0],
   ['vmName', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfUnknownDevice', 'device', 'vmName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfUnknownDeviceBacking;
our @ISA = qw(OvfHardwareExport);

our @property_list = (
   ['backing', 'VirtualDeviceBackingInfo', undef, 1],
);


VIMRuntime::make_get_set('OvfUnknownDeviceBacking', 'backing');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfUnknownEntity;
our @ISA = qw(OvfSystemFault);

our @property_list = (
   ['lineNumber', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfUnknownEntity', 'lineNumber');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfUnsupportedAttribute;
our @ISA = qw(OvfUnsupportedPackage);

our @property_list = (
   ['elementName', undef, undef, 1],
   ['attributeName', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfUnsupportedAttribute', 'elementName', 'attributeName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfUnsupportedAttributeValue;
our @ISA = qw(OvfUnsupportedAttribute);

our @property_list = (
   ['value', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfUnsupportedAttributeValue', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfUnsupportedDeviceBackingInfo;
our @ISA = qw(OvfSystemFault);

our @property_list = (
   ['elementName', undef, undef, 0],
   ['instanceId', undef, undef, 0],
   ['deviceName', undef, undef, 1],
   ['backingName', undef, undef, 0],
);


VIMRuntime::make_get_set('OvfUnsupportedDeviceBackingInfo', 'elementName', 'instanceId', 'deviceName', 'backingName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfUnsupportedDeviceBackingOption;
our @ISA = qw(OvfSystemFault);

our @property_list = (
   ['elementName', undef, undef, 0],
   ['instanceId', undef, undef, 0],
   ['deviceName', undef, undef, 1],
   ['backingName', undef, undef, 0],
);


VIMRuntime::make_get_set('OvfUnsupportedDeviceBackingOption', 'elementName', 'instanceId', 'deviceName', 'backingName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfUnsupportedDeviceExport;
our @ISA = qw(OvfHardwareExport);

our @property_list = (
);


VIMRuntime::make_get_set('OvfUnsupportedDeviceExport');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfUnsupportedDiskProvisioning;
our @ISA = qw(OvfImport);

our @property_list = (
   ['diskProvisioning', undef, undef, 1],
   ['supportedDiskProvisioning', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfUnsupportedDiskProvisioning', 'diskProvisioning', 'supportedDiskProvisioning');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfUnsupportedElement;
our @ISA = qw(OvfUnsupportedPackage);

our @property_list = (
   ['name', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfUnsupportedElement', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfUnsupportedElementValue;
our @ISA = qw(OvfUnsupportedElement);

our @property_list = (
   ['value', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfUnsupportedElementValue', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfUnsupportedPackage;
our @ISA = qw(OvfFault);

our @property_list = (
   ['lineNumber', undef, undef, 0],
);


VIMRuntime::make_get_set('OvfUnsupportedPackage', 'lineNumber');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfUnsupportedSection;
our @ISA = qw(OvfUnsupportedElement);

our @property_list = (
   ['info', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfUnsupportedSection', 'info');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfUnsupportedSubType;
our @ISA = qw(OvfUnsupportedPackage);

our @property_list = (
   ['elementName', undef, undef, 1],
   ['instanceId', undef, undef, 1],
   ['deviceType', undef, undef, 1],
   ['deviceSubType', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfUnsupportedSubType', 'elementName', 'instanceId', 'deviceType', 'deviceSubType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfUnsupportedType;
our @ISA = qw(OvfUnsupportedPackage);

our @property_list = (
   ['name', undef, undef, 1],
   ['instanceId', undef, undef, 1],
   ['deviceType', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfUnsupportedType', 'name', 'instanceId', 'deviceType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfWrongElement;
our @ISA = qw(OvfElement);

our @property_list = (
);


VIMRuntime::make_get_set('OvfWrongElement');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfWrongNamespace;
our @ISA = qw(OvfInvalidPackage);

our @property_list = (
   ['namespaceName', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfWrongNamespace', 'namespaceName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OvfXmlFormat;
our @ISA = qw(OvfInvalidPackage);

our @property_list = (
   ['description', undef, undef, 1],
);


VIMRuntime::make_get_set('OvfXmlFormat', 'description');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PatchAlreadyInstalled;
our @ISA = qw(PatchNotApplicable);

our @property_list = (
);


VIMRuntime::make_get_set('PatchAlreadyInstalled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PatchBinariesNotFound;
our @ISA = qw(VimFault);

our @property_list = (
   ['patchID', undef, undef, 1],
   ['binary', undef, 1, 0],
);


VIMRuntime::make_get_set('PatchBinariesNotFound', 'patchID', 'binary');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PatchInstallFailed;
our @ISA = qw(PlatformConfigFault);

our @property_list = (
   ['rolledBack', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('PatchInstallFailed', 'rolledBack');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PatchIntegrityError;
our @ISA = qw(PlatformConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('PatchIntegrityError');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PatchMetadataCorrupted;
our @ISA = qw(PatchMetadataInvalid);

our @property_list = (
);


VIMRuntime::make_get_set('PatchMetadataCorrupted');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PatchMetadataInvalid;
our @ISA = qw(VimFault);

our @property_list = (
   ['patchID', undef, undef, 1],
   ['metaData', undef, 1, 0],
);


VIMRuntime::make_get_set('PatchMetadataInvalid', 'patchID', 'metaData');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PatchMetadataNotFound;
our @ISA = qw(PatchMetadataInvalid);

our @property_list = (
);


VIMRuntime::make_get_set('PatchMetadataNotFound');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PatchMissingDependencies;
our @ISA = qw(PatchNotApplicable);

our @property_list = (
   ['prerequisitePatch', undef, 1, 0],
   ['prerequisiteLib', undef, 1, 0],
);


VIMRuntime::make_get_set('PatchMissingDependencies', 'prerequisitePatch', 'prerequisiteLib');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PatchNotApplicable;
our @ISA = qw(VimFault);

our @property_list = (
   ['patchID', undef, undef, 1],
);


VIMRuntime::make_get_set('PatchNotApplicable', 'patchID');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PatchSuperseded;
our @ISA = qw(PatchNotApplicable);

our @property_list = (
   ['supersede', undef, 1, 0],
);


VIMRuntime::make_get_set('PatchSuperseded', 'supersede');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PhysCompatRDMNotSupported;
our @ISA = qw(RDMNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('PhysCompatRDMNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PlatformConfigFault;
our @ISA = qw(HostConfigFault);

our @property_list = (
   ['text', undef, undef, 1],
);


VIMRuntime::make_get_set('PlatformConfigFault', 'text');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PowerOnFtSecondaryFailed;
our @ISA = qw(VmFaultToleranceIssue);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 1],
   ['vmName', undef, undef, 1],
   ['hostSelectionBy', 'FtIssuesOnHostHostSelectionType', undef, 1],
   ['hostErrors', 'LocalizedMethodFault', 1, 0],
   ['rootCause', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('PowerOnFtSecondaryFailed', 'vm', 'vmName', 'hostSelectionBy', 'hostErrors', 'rootCause');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PowerOnFtSecondaryTimedout;
our @ISA = qw(Timedout);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 1],
   ['vmName', undef, undef, 1],
   ['timeout', undef, undef, 1],
);


VIMRuntime::make_get_set('PowerOnFtSecondaryTimedout', 'vm', 'vmName', 'timeout');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileUpdateFailedUpdateFailure;
our @ISA = qw(DynamicData);

our @property_list = (
   ['profilePath', 'ProfilePropertyPath', undef, 1],
   ['errMsg', 'LocalizableMessage', undef, 1],
);


VIMRuntime::make_get_set('ProfileUpdateFailedUpdateFailure', 'profilePath', 'errMsg');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfProfileUpdateFailedUpdateFailure;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ProfileUpdateFailedUpdateFailure', 'ProfileUpdateFailedUpdateFailure', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfProfileUpdateFailedUpdateFailure', 'ProfileUpdateFailedUpdateFailure');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileUpdateFailed;
our @ISA = qw(VimFault);

our @property_list = (
   ['failure', 'ProfileUpdateFailedUpdateFailure', 1, 1],
);


VIMRuntime::make_get_set('ProfileUpdateFailed', 'failure');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package QuarantineModeFault;
our @ISA = qw(VmConfigFault);

our @property_list = (
   ['vmName', undef, undef, 1],
   ['faultType', undef, undef, 1],
);


VIMRuntime::make_get_set('QuarantineModeFault', 'vmName', 'faultType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package QuestionPending;
our @ISA = qw(InvalidState);

our @property_list = (
   ['text', undef, undef, 1],
);


VIMRuntime::make_get_set('QuestionPending', 'text');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package QuiesceDatastoreIOForHAFailed;
our @ISA = qw(ResourceInUse);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
   ['hostName', undef, undef, 1],
   ['ds', 'ManagedObjectReference', undef, 1],
   ['dsName', undef, undef, 1],
);


VIMRuntime::make_get_set('QuiesceDatastoreIOForHAFailed', 'host', 'hostName', 'ds', 'dsName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RDMConversionNotSupported;
our @ISA = qw(MigrationFault);

our @property_list = (
   ['device', undef, undef, 1],
);


VIMRuntime::make_get_set('RDMConversionNotSupported', 'device');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RDMNotPreserved;
our @ISA = qw(MigrationFault);

our @property_list = (
   ['device', undef, undef, 1],
);


VIMRuntime::make_get_set('RDMNotPreserved', 'device');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RDMNotSupported;
our @ISA = qw(DeviceNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('RDMNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RDMNotSupportedOnDatastore;
our @ISA = qw(VmConfigFault);

our @property_list = (
   ['device', undef, undef, 1],
   ['datastore', 'ManagedObjectReference', undef, 1],
   ['datastoreName', undef, undef, 1],
);


VIMRuntime::make_get_set('RDMNotSupportedOnDatastore', 'device', 'datastore', 'datastoreName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RDMPointsToInaccessibleDisk;
our @ISA = qw(CannotAccessVmDisk);

our @property_list = (
);


VIMRuntime::make_get_set('RDMPointsToInaccessibleDisk');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RawDiskNotSupported;
our @ISA = qw(DeviceNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('RawDiskNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ReadHostResourcePoolTreeFailed;
our @ISA = qw(HostConnectFault);

our @property_list = (
);


VIMRuntime::make_get_set('ReadHostResourcePoolTreeFailed');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ReadOnlyDisksWithLegacyDestination;
our @ISA = qw(MigrationFault);

our @property_list = (
   ['roDiskCount', undef, undef, 1],
   ['timeoutDanger', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('ReadOnlyDisksWithLegacyDestination', 'roDiskCount', 'timeoutDanger');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RebootRequired;
our @ISA = qw(VimFault);

our @property_list = (
   ['patch', undef, undef, 0],
);


VIMRuntime::make_get_set('RebootRequired', 'patch');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RecordReplayDisabled;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('RecordReplayDisabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RemoteDeviceNotSupported;
our @ISA = qw(DeviceNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('RemoteDeviceNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RemoveFailed;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('RemoveFailed');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ReplicationConfigFault;
our @ISA = qw(ReplicationFault);

our @property_list = (
);


VIMRuntime::make_get_set('ReplicationConfigFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ReplicationDiskConfigFault;
our @ISA = qw(ReplicationConfigFault);

our @property_list = (
   ['reason', undef, undef, 0],
   ['vmRef', 'ManagedObjectReference', undef, 0],
   ['key', undef, undef, 0],
);


VIMRuntime::make_get_set('ReplicationDiskConfigFault', 'reason', 'vmRef', 'key');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ReplicationFault;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('ReplicationFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ReplicationIncompatibleWithFT;
our @ISA = qw(ReplicationFault);

our @property_list = (
);


VIMRuntime::make_get_set('ReplicationIncompatibleWithFT');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ReplicationInvalidOptions;
our @ISA = qw(ReplicationFault);

our @property_list = (
   ['options', undef, undef, 1],
   ['entity', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('ReplicationInvalidOptions', 'options', 'entity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ReplicationNotSupportedOnHost;
our @ISA = qw(ReplicationFault);

our @property_list = (
);


VIMRuntime::make_get_set('ReplicationNotSupportedOnHost');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ReplicationVmConfigFault;
our @ISA = qw(ReplicationConfigFault);

our @property_list = (
   ['reason', undef, undef, 0],
   ['vmRef', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('ReplicationVmConfigFault', 'reason', 'vmRef');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ReplicationVmFault;
our @ISA = qw(ReplicationFault);

our @property_list = (
   ['reason', undef, undef, 0],
   ['state', undef, undef, 0],
   ['instanceId', undef, undef, 0],
   ['vm', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('ReplicationVmFault', 'reason', 'state', 'instanceId', 'vm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ReplicationVmInProgressFault;
our @ISA = qw(ReplicationVmFault);

our @property_list = (
   ['requestedActivity', undef, undef, 1],
   ['inProgressActivity', undef, undef, 1],
);


VIMRuntime::make_get_set('ReplicationVmInProgressFault', 'requestedActivity', 'inProgressActivity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ResourceInUse;
our @ISA = qw(VimFault);

our @property_list = (
   ['type', undef, undef, 0],
   ['name', undef, undef, 0],
);


VIMRuntime::make_get_set('ResourceInUse', 'type', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ResourceNotAvailable;
our @ISA = qw(VimFault);

our @property_list = (
   ['containerType', undef, undef, 0],
   ['containerName', undef, undef, 0],
   ['type', undef, undef, 0],
);


VIMRuntime::make_get_set('ResourceNotAvailable', 'containerType', 'containerName', 'type');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RestrictedByAdministrator;
our @ISA = qw(RuntimeFault);

our @property_list = (
   ['details', undef, undef, 1],
);


VIMRuntime::make_get_set('RestrictedByAdministrator', 'details');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RestrictedVersion;
our @ISA = qw(SecurityError);

our @property_list = (
);


VIMRuntime::make_get_set('RestrictedVersion');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RollbackFailure;
our @ISA = qw(DvsFault);

our @property_list = (
   ['entityName', undef, undef, 1],
   ['entityType', undef, undef, 1],
);


VIMRuntime::make_get_set('RollbackFailure', 'entityName', 'entityType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RuleViolation;
our @ISA = qw(VmConfigFault);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 0],
   ['rule', 'ClusterRuleInfo', undef, 0],
);


VIMRuntime::make_get_set('RuleViolation', 'host', 'rule');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SSLDisabledFault;
our @ISA = qw(HostConnectFault);

our @property_list = (
);


VIMRuntime::make_get_set('SSLDisabledFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SSLVerifyFault;
our @ISA = qw(HostConnectFault);

our @property_list = (
   ['selfSigned', 'boolean', undef, 1],
   ['thumbprint', undef, undef, 1],
);


VIMRuntime::make_get_set('SSLVerifyFault', 'selfSigned', 'thumbprint');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SSPIChallenge;
our @ISA = qw(VimFault);

our @property_list = (
   ['base64Token', undef, undef, 1],
);


VIMRuntime::make_get_set('SSPIChallenge', 'base64Token');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SecondaryVmAlreadyDisabled;
our @ISA = qw(VmFaultToleranceIssue);

our @property_list = (
   ['instanceUuid', undef, undef, 1],
);


VIMRuntime::make_get_set('SecondaryVmAlreadyDisabled', 'instanceUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SecondaryVmAlreadyEnabled;
our @ISA = qw(VmFaultToleranceIssue);

our @property_list = (
   ['instanceUuid', undef, undef, 1],
);


VIMRuntime::make_get_set('SecondaryVmAlreadyEnabled', 'instanceUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SecondaryVmAlreadyRegistered;
our @ISA = qw(VmFaultToleranceIssue);

our @property_list = (
   ['instanceUuid', undef, undef, 0],
);


VIMRuntime::make_get_set('SecondaryVmAlreadyRegistered', 'instanceUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SecondaryVmNotRegistered;
our @ISA = qw(VmFaultToleranceIssue);

our @property_list = (
   ['instanceUuid', undef, undef, 0],
);


VIMRuntime::make_get_set('SecondaryVmNotRegistered', 'instanceUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SharedBusControllerNotSupported;
our @ISA = qw(DeviceNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('SharedBusControllerNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ShrinkDiskFault;
our @ISA = qw(VimFault);

our @property_list = (
   ['diskId', undef, undef, 0],
);


VIMRuntime::make_get_set('ShrinkDiskFault', 'diskId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SnapshotCloneNotSupported;
our @ISA = qw(SnapshotCopyNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('SnapshotCloneNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SnapshotCopyNotSupported;
our @ISA = qw(MigrationFault);

our @property_list = (
);


VIMRuntime::make_get_set('SnapshotCopyNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SnapshotDisabled;
our @ISA = qw(SnapshotFault);

our @property_list = (
);


VIMRuntime::make_get_set('SnapshotDisabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SnapshotFault;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('SnapshotFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SnapshotIncompatibleDeviceInVm;
our @ISA = qw(SnapshotFault);

our @property_list = (
   ['fault', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('SnapshotIncompatibleDeviceInVm', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SnapshotLocked;
our @ISA = qw(SnapshotFault);

our @property_list = (
);


VIMRuntime::make_get_set('SnapshotLocked');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SnapshotMoveFromNonHomeNotSupported;
our @ISA = qw(SnapshotCopyNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('SnapshotMoveFromNonHomeNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SnapshotMoveNotSupported;
our @ISA = qw(SnapshotCopyNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('SnapshotMoveNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SnapshotMoveToNonHomeNotSupported;
our @ISA = qw(SnapshotCopyNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('SnapshotMoveToNonHomeNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SnapshotNoChange;
our @ISA = qw(SnapshotFault);

our @property_list = (
);


VIMRuntime::make_get_set('SnapshotNoChange');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SnapshotRevertIssue;
our @ISA = qw(MigrationFault);

our @property_list = (
   ['snapshotName', undef, undef, 0],
   ['event', 'Event', 1, 0],
   ['errors', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('SnapshotRevertIssue', 'snapshotName', 'event', 'errors');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SoftRuleVioCorrectionDisallowed;
our @ISA = qw(VmConfigFault);

our @property_list = (
   ['vmName', undef, undef, 1],
);


VIMRuntime::make_get_set('SoftRuleVioCorrectionDisallowed', 'vmName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SoftRuleVioCorrectionImpact;
our @ISA = qw(VmConfigFault);

our @property_list = (
   ['vmName', undef, undef, 1],
);


VIMRuntime::make_get_set('SoftRuleVioCorrectionImpact', 'vmName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SsdDiskNotAvailable;
our @ISA = qw(VimFault);

our @property_list = (
   ['devicePath', undef, undef, 1],
);


VIMRuntime::make_get_set('SsdDiskNotAvailable', 'devicePath');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsCannotMoveDiskInMultiWriterMode;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('StorageDrsCannotMoveDiskInMultiWriterMode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsCannotMoveFTVm;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('StorageDrsCannotMoveFTVm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsCannotMoveIndependentDisk;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('StorageDrsCannotMoveIndependentDisk');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsCannotMoveManuallyPlacedSwapFile;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('StorageDrsCannotMoveManuallyPlacedSwapFile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsCannotMoveManuallyPlacedVm;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('StorageDrsCannotMoveManuallyPlacedVm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsCannotMoveSharedDisk;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('StorageDrsCannotMoveSharedDisk');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsCannotMoveTemplate;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('StorageDrsCannotMoveTemplate');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsCannotMoveVmInUserFolder;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('StorageDrsCannotMoveVmInUserFolder');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsCannotMoveVmWithMountedCDROM;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('StorageDrsCannotMoveVmWithMountedCDROM');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsCannotMoveVmWithNoFilesInLayout;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('StorageDrsCannotMoveVmWithNoFilesInLayout');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsDatacentersCannotShareDatastore;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('StorageDrsDatacentersCannotShareDatastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsDisabledOnVm;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('StorageDrsDisabledOnVm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsHbrDiskNotMovable;
our @ISA = qw(VimFault);

our @property_list = (
   ['nonMovableDiskIds', undef, undef, 1],
);


VIMRuntime::make_get_set('StorageDrsHbrDiskNotMovable', 'nonMovableDiskIds');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsHmsMoveInProgress;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('StorageDrsHmsMoveInProgress');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsHmsUnreachable;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('StorageDrsHmsUnreachable');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsIolbDisabledInternally;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('StorageDrsIolbDisabledInternally');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsRelocateDisabled;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('StorageDrsRelocateDisabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsStaleHmsCollection;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('StorageDrsStaleHmsCollection');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsUnableToMoveFiles;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('StorageDrsUnableToMoveFiles');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageVMotionNotSupported;
our @ISA = qw(MigrationFeatureNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('StorageVMotionNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageVmotionIncompatible;
our @ISA = qw(VirtualHardwareCompatibilityIssue);

our @property_list = (
   ['datastore', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('StorageVmotionIncompatible', 'datastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SuspendedRelocateNotSupported;
our @ISA = qw(MigrationFault);

our @property_list = (
);


VIMRuntime::make_get_set('SuspendedRelocateNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SwapDatastoreNotWritableOnHost;
our @ISA = qw(DatastoreNotWritableOnHost);

our @property_list = (
);


VIMRuntime::make_get_set('SwapDatastoreNotWritableOnHost');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SwapDatastoreUnset;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('SwapDatastoreUnset');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SwapPlacementOverrideNotSupported;
our @ISA = qw(InvalidVmConfig);

our @property_list = (
);


VIMRuntime::make_get_set('SwapPlacementOverrideNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SwitchIpUnset;
our @ISA = qw(DvsFault);

our @property_list = (
);


VIMRuntime::make_get_set('SwitchIpUnset');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SwitchNotInUpgradeMode;
our @ISA = qw(DvsFault);

our @property_list = (
);


VIMRuntime::make_get_set('SwitchNotInUpgradeMode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TaskInProgress;
our @ISA = qw(VimFault);

our @property_list = (
   ['task', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('TaskInProgress', 'task');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ThirdPartyLicenseAssignmentFailed;
our @ISA = qw(RuntimeFault);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
   ['module', undef, undef, 1],
   ['reason', undef, undef, 0],
);


VIMRuntime::make_get_set('ThirdPartyLicenseAssignmentFailed', 'host', 'module', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package Timedout;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('Timedout');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TooManyConcurrentNativeClones;
our @ISA = qw(FileFault);

our @property_list = (
);


VIMRuntime::make_get_set('TooManyConcurrentNativeClones');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TooManyConsecutiveOverrides;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('TooManyConsecutiveOverrides');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TooManyDevices;
our @ISA = qw(InvalidVmConfig);

our @property_list = (
);


VIMRuntime::make_get_set('TooManyDevices');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TooManyDisksOnLegacyHost;
our @ISA = qw(MigrationFault);

our @property_list = (
   ['diskCount', undef, undef, 1],
   ['timeoutDanger', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('TooManyDisksOnLegacyHost', 'diskCount', 'timeoutDanger');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TooManyGuestLogons;
our @ISA = qw(GuestOperationsFault);

our @property_list = (
);


VIMRuntime::make_get_set('TooManyGuestLogons');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TooManyHosts;
our @ISA = qw(HostConnectFault);

our @property_list = (
);


VIMRuntime::make_get_set('TooManyHosts');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TooManyNativeCloneLevels;
our @ISA = qw(FileFault);

our @property_list = (
);


VIMRuntime::make_get_set('TooManyNativeCloneLevels');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TooManyNativeClonesOnFile;
our @ISA = qw(FileFault);

our @property_list = (
);


VIMRuntime::make_get_set('TooManyNativeClonesOnFile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TooManySnapshotLevels;
our @ISA = qw(SnapshotFault);

our @property_list = (
);


VIMRuntime::make_get_set('TooManySnapshotLevels');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ToolsAlreadyUpgraded;
our @ISA = qw(VmToolsUpgradeFault);

our @property_list = (
);


VIMRuntime::make_get_set('ToolsAlreadyUpgraded');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ToolsAutoUpgradeNotSupported;
our @ISA = qw(VmToolsUpgradeFault);

our @property_list = (
);


VIMRuntime::make_get_set('ToolsAutoUpgradeNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ToolsImageCopyFailed;
our @ISA = qw(VmToolsUpgradeFault);

our @property_list = (
);


VIMRuntime::make_get_set('ToolsImageCopyFailed');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ToolsImageNotAvailable;
our @ISA = qw(VmToolsUpgradeFault);

our @property_list = (
);


VIMRuntime::make_get_set('ToolsImageNotAvailable');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ToolsImageSignatureCheckFailed;
our @ISA = qw(VmToolsUpgradeFault);

our @property_list = (
);


VIMRuntime::make_get_set('ToolsImageSignatureCheckFailed');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ToolsInstallationInProgress;
our @ISA = qw(MigrationFault);

our @property_list = (
);


VIMRuntime::make_get_set('ToolsInstallationInProgress');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ToolsUnavailable;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('ToolsUnavailable');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ToolsUpgradeCancelled;
our @ISA = qw(VmToolsUpgradeFault);

our @property_list = (
);


VIMRuntime::make_get_set('ToolsUpgradeCancelled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UnSupportedDatastoreForVFlash;
our @ISA = qw(UnsupportedDatastore);

our @property_list = (
   ['datastoreName', undef, undef, 1],
   ['type', undef, undef, 1],
);


VIMRuntime::make_get_set('UnSupportedDatastoreForVFlash', 'datastoreName', 'type');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UncommittedUndoableDisk;
our @ISA = qw(MigrationFault);

our @property_list = (
);


VIMRuntime::make_get_set('UncommittedUndoableDisk');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UnconfiguredPropertyValue;
our @ISA = qw(InvalidPropertyValue);

our @property_list = (
);


VIMRuntime::make_get_set('UnconfiguredPropertyValue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UncustomizableGuest;
our @ISA = qw(CustomizationFault);

our @property_list = (
   ['uncustomizableGuestOS', undef, undef, 1],
);


VIMRuntime::make_get_set('UncustomizableGuest', 'uncustomizableGuestOS');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UnexpectedCustomizationFault;
our @ISA = qw(CustomizationFault);

our @property_list = (
);


VIMRuntime::make_get_set('UnexpectedCustomizationFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UnrecognizedHost;
our @ISA = qw(VimFault);

our @property_list = (
   ['hostName', undef, undef, 1],
);


VIMRuntime::make_get_set('UnrecognizedHost', 'hostName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UnsharedSwapVMotionNotSupported;
our @ISA = qw(MigrationFeatureNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('UnsharedSwapVMotionNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UnsupportedDatastore;
our @ISA = qw(VmConfigFault);

our @property_list = (
   ['datastore', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('UnsupportedDatastore', 'datastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UnsupportedGuest;
our @ISA = qw(InvalidVmConfig);

our @property_list = (
   ['unsupportedGuestOS', undef, undef, 1],
);


VIMRuntime::make_get_set('UnsupportedGuest', 'unsupportedGuestOS');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UnsupportedVimApiVersion;
our @ISA = qw(VimFault);

our @property_list = (
   ['version', undef, undef, 0],
);


VIMRuntime::make_get_set('UnsupportedVimApiVersion', 'version');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UnsupportedVmxLocation;
our @ISA = qw(VmConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('UnsupportedVmxLocation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UnusedVirtualDiskBlocksNotScrubbed;
our @ISA = qw(DeviceBackingNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('UnusedVirtualDiskBlocksNotScrubbed');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UserNotFound;
our @ISA = qw(VimFault);

our @property_list = (
   ['principal', undef, undef, 1],
   ['unresolved', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('UserNotFound', 'principal', 'unresolved');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VAppConfigFault;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('VAppConfigFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VAppNotRunning;
our @ISA = qw(VmConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('VAppNotRunning');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VAppOperationInProgress;
our @ISA = qw(RuntimeFault);

our @property_list = (
);


VIMRuntime::make_get_set('VAppOperationInProgress');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VAppPropertyFault;
our @ISA = qw(VmConfigFault);

our @property_list = (
   ['id', undef, undef, 1],
   ['category', undef, undef, 1],
   ['label', undef, undef, 1],
   ['type', undef, undef, 1],
   ['value', undef, undef, 1],
);


VIMRuntime::make_get_set('VAppPropertyFault', 'id', 'category', 'label', 'type', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VAppTaskInProgress;
our @ISA = qw(TaskInProgress);

our @property_list = (
);


VIMRuntime::make_get_set('VAppTaskInProgress');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VFlashCacheHotConfigNotSupported;
our @ISA = qw(VmConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('VFlashCacheHotConfigNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VFlashModuleNotSupported;
our @ISA = qw(VmConfigFault);

our @property_list = (
   ['vmName', undef, undef, 1],
   ['moduleName', undef, undef, 1],
   ['reason', undef, undef, 1],
   ['hostName', undef, undef, 1],
);


VIMRuntime::make_get_set('VFlashModuleNotSupported', 'vmName', 'moduleName', 'reason', 'hostName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VFlashModuleVersionIncompatible;
our @ISA = qw(VimFault);

our @property_list = (
   ['moduleName', undef, undef, 1],
   ['vmRequestModuleVersion', undef, undef, 1],
   ['hostMinSupportedVerson', undef, undef, 1],
   ['hostModuleVersion', undef, undef, 1],
);


VIMRuntime::make_get_set('VFlashModuleVersionIncompatible', 'moduleName', 'vmRequestModuleVersion', 'hostMinSupportedVerson', 'hostModuleVersion');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMINotSupported;
our @ISA = qw(DeviceNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('VMINotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMOnConflictDVPort;
our @ISA = qw(CannotAccessNetwork);

our @property_list = (
);


VIMRuntime::make_get_set('VMOnConflictDVPort');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMOnVirtualIntranet;
our @ISA = qw(CannotAccessNetwork);

our @property_list = (
);


VIMRuntime::make_get_set('VMOnVirtualIntranet');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMotionAcrossNetworkNotSupported;
our @ISA = qw(MigrationFeatureNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('VMotionAcrossNetworkNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMotionInterfaceIssue;
our @ISA = qw(MigrationFault);

our @property_list = (
   ['atSourceHost', 'boolean', undef, 1],
   ['failedHost', undef, undef, 1],
   ['failedHostEntity', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('VMotionInterfaceIssue', 'atSourceHost', 'failedHost', 'failedHostEntity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMotionLinkCapacityLow;
our @ISA = qw(VMotionInterfaceIssue);

our @property_list = (
   ['network', undef, undef, 1],
);


VIMRuntime::make_get_set('VMotionLinkCapacityLow', 'network');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMotionLinkDown;
our @ISA = qw(VMotionInterfaceIssue);

our @property_list = (
   ['network', undef, undef, 1],
);


VIMRuntime::make_get_set('VMotionLinkDown', 'network');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMotionNotConfigured;
our @ISA = qw(VMotionInterfaceIssue);

our @property_list = (
);


VIMRuntime::make_get_set('VMotionNotConfigured');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMotionNotLicensed;
our @ISA = qw(VMotionInterfaceIssue);

our @property_list = (
);


VIMRuntime::make_get_set('VMotionNotLicensed');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMotionNotSupported;
our @ISA = qw(VMotionInterfaceIssue);

our @property_list = (
);


VIMRuntime::make_get_set('VMotionNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VMotionProtocolIncompatible;
our @ISA = qw(MigrationFault);

our @property_list = (
);


VIMRuntime::make_get_set('VMotionProtocolIncompatible');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VimFault;
our @ISA = qw(MethodFault);

our @property_list = (
);


VIMRuntime::make_get_set('VimFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskBlocksNotFullyProvisioned;
our @ISA = qw(DeviceBackingNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualDiskBlocksNotFullyProvisioned');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskModeNotSupported;
our @ISA = qw(DeviceNotSupported);

our @property_list = (
   ['mode', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualDiskModeNotSupported', 'mode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualEthernetCardNotSupported;
our @ISA = qw(DeviceNotSupported);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualEthernetCardNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualHardwareCompatibilityIssue;
our @ISA = qw(VmConfigFault);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualHardwareCompatibilityIssue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualHardwareVersionNotSupported;
our @ISA = qw(VirtualHardwareCompatibilityIssue);

our @property_list = (
   ['hostName', undef, undef, 1],
   ['host', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('VirtualHardwareVersionNotSupported', 'hostName', 'host');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmAlreadyExistsInDatacenter;
our @ISA = qw(InvalidFolder);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
   ['hostname', undef, undef, 1],
   ['vm', 'ManagedObjectReference', 1, 1],
);


VIMRuntime::make_get_set('VmAlreadyExistsInDatacenter', 'host', 'hostname', 'vm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmConfigFault;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('VmConfigFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmConfigIncompatibleForFaultTolerance;
our @ISA = qw(VmConfigFault);

our @property_list = (
   ['fault', 'LocalizedMethodFault', undef, 0],
);


VIMRuntime::make_get_set('VmConfigIncompatibleForFaultTolerance', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmConfigIncompatibleForRecordReplay;
our @ISA = qw(VmConfigFault);

our @property_list = (
   ['fault', 'LocalizedMethodFault', undef, 0],
);


VIMRuntime::make_get_set('VmConfigIncompatibleForRecordReplay', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmFaultToleranceConfigIssue;
our @ISA = qw(VmFaultToleranceIssue);

our @property_list = (
   ['reason', undef, undef, 0],
   ['entityName', undef, undef, 0],
   ['entity', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('VmFaultToleranceConfigIssue', 'reason', 'entityName', 'entity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmFaultToleranceConfigIssueWrapper;
our @ISA = qw(VmFaultToleranceIssue);

our @property_list = (
   ['entityName', undef, undef, 0],
   ['entity', 'ManagedObjectReference', undef, 0],
   ['error', 'LocalizedMethodFault', undef, 0],
);


VIMRuntime::make_get_set('VmFaultToleranceConfigIssueWrapper', 'entityName', 'entity', 'error');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmFaultToleranceInvalidFileBacking;
our @ISA = qw(VmFaultToleranceIssue);

our @property_list = (
   ['backingType', undef, undef, 0],
   ['backingFilename', undef, undef, 0],
);


VIMRuntime::make_get_set('VmFaultToleranceInvalidFileBacking', 'backingType', 'backingFilename');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmFaultToleranceIssue;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('VmFaultToleranceIssue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmFaultToleranceOpIssuesList;
our @ISA = qw(VmFaultToleranceIssue);

our @property_list = (
   ['errors', 'LocalizedMethodFault', 1, 0],
   ['warnings', 'LocalizedMethodFault', 1, 0],
);


VIMRuntime::make_get_set('VmFaultToleranceOpIssuesList', 'errors', 'warnings');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmFaultToleranceTooManyFtVcpusOnHost;
our @ISA = qw(InsufficientResourcesFault);

our @property_list = (
   ['hostName', undef, undef, 0],
   ['maxNumFtVcpus', undef, undef, 1],
);


VIMRuntime::make_get_set('VmFaultToleranceTooManyFtVcpusOnHost', 'hostName', 'maxNumFtVcpus');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmFaultToleranceTooManyVMsOnHost;
our @ISA = qw(InsufficientResourcesFault);

our @property_list = (
   ['hostName', undef, undef, 0],
   ['maxNumFtVms', undef, undef, 1],
);


VIMRuntime::make_get_set('VmFaultToleranceTooManyVMsOnHost', 'hostName', 'maxNumFtVms');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmHostAffinityRuleViolation;
our @ISA = qw(VmConfigFault);

our @property_list = (
   ['vmName', undef, undef, 1],
   ['hostName', undef, undef, 1],
);


VIMRuntime::make_get_set('VmHostAffinityRuleViolation', 'vmName', 'hostName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmLimitLicense;
our @ISA = qw(NotEnoughLicenses);

our @property_list = (
   ['limit', undef, undef, 1],
);


VIMRuntime::make_get_set('VmLimitLicense', 'limit');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmMetadataManagerFault;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('VmMetadataManagerFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmMonitorIncompatibleForFaultTolerance;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('VmMonitorIncompatibleForFaultTolerance');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmPowerOnDisabled;
our @ISA = qw(InvalidState);

our @property_list = (
);


VIMRuntime::make_get_set('VmPowerOnDisabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmSmpFaultToleranceTooManyVMsOnHost;
our @ISA = qw(InsufficientResourcesFault);

our @property_list = (
   ['hostName', undef, undef, 0],
   ['maxNumSmpFtVms', undef, undef, 1],
);


VIMRuntime::make_get_set('VmSmpFaultToleranceTooManyVMsOnHost', 'hostName', 'maxNumSmpFtVms');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmToolsUpgradeFault;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('VmToolsUpgradeFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmValidateMaxDevice;
our @ISA = qw(VimFault);

our @property_list = (
   ['device', undef, undef, 1],
   ['max', undef, undef, 1],
   ['count', undef, undef, 1],
);


VIMRuntime::make_get_set('VmValidateMaxDevice', 'device', 'max', 'count');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmWwnConflict;
our @ISA = qw(InvalidVmConfig);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 0],
   ['host', 'ManagedObjectReference', undef, 0],
   ['name', undef, undef, 0],
   ['wwn', undef, undef, 0],
);


VIMRuntime::make_get_set('VmWwnConflict', 'vm', 'host', 'name', 'wwn');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmfsAlreadyMounted;
our @ISA = qw(VmfsMountFault);

our @property_list = (
);


VIMRuntime::make_get_set('VmfsAlreadyMounted');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmfsAmbiguousMount;
our @ISA = qw(VmfsMountFault);

our @property_list = (
);


VIMRuntime::make_get_set('VmfsAmbiguousMount');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmfsMountFault;
our @ISA = qw(HostConfigFault);

our @property_list = (
   ['uuid', undef, undef, 1],
);


VIMRuntime::make_get_set('VmfsMountFault', 'uuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmotionInterfaceNotEnabled;
our @ISA = qw(HostPowerOpFailed);

our @property_list = (
);


VIMRuntime::make_get_set('VmotionInterfaceNotEnabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VolumeEditorError;
our @ISA = qw(CustomizationFault);

our @property_list = (
);


VIMRuntime::make_get_set('VolumeEditorError');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VramLimitLicense;
our @ISA = qw(NotEnoughLicenses);

our @property_list = (
   ['limit', undef, undef, 1],
);


VIMRuntime::make_get_set('VramLimitLicense', 'limit');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanClusterUuidMismatch;
our @ISA = qw(CannotMoveVsanEnabledHost);

our @property_list = (
   ['hostClusterUuid', undef, undef, 1],
   ['destinationClusterUuid', undef, undef, 1],
);


VIMRuntime::make_get_set('VsanClusterUuidMismatch', 'hostClusterUuid', 'destinationClusterUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanDiskFault;
our @ISA = qw(VsanFault);

our @property_list = (
   ['device', undef, undef, 0],
);


VIMRuntime::make_get_set('VsanDiskFault', 'device');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanFault;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('VsanFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanIncompatibleDiskMapping;
our @ISA = qw(VsanDiskFault);

our @property_list = (
);


VIMRuntime::make_get_set('VsanIncompatibleDiskMapping');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VspanDestPortConflict;
our @ISA = qw(DvsFault);

our @property_list = (
   ['vspanSessionKey1', undef, undef, 1],
   ['vspanSessionKey2', undef, undef, 1],
   ['portKey', undef, undef, 1],
);


VIMRuntime::make_get_set('VspanDestPortConflict', 'vspanSessionKey1', 'vspanSessionKey2', 'portKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VspanPortConflict;
our @ISA = qw(DvsFault);

our @property_list = (
   ['vspanSessionKey1', undef, undef, 1],
   ['vspanSessionKey2', undef, undef, 1],
   ['portKey', undef, undef, 1],
);


VIMRuntime::make_get_set('VspanPortConflict', 'vspanSessionKey1', 'vspanSessionKey2', 'portKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VspanPortMoveFault;
our @ISA = qw(DvsFault);

our @property_list = (
   ['srcPortgroupName', undef, undef, 1],
   ['destPortgroupName', undef, undef, 1],
   ['portKey', undef, undef, 1],
);


VIMRuntime::make_get_set('VspanPortMoveFault', 'srcPortgroupName', 'destPortgroupName', 'portKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VspanPortPromiscChangeFault;
our @ISA = qw(DvsFault);

our @property_list = (
   ['portKey', undef, undef, 1],
);


VIMRuntime::make_get_set('VspanPortPromiscChangeFault', 'portKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VspanPortgroupPromiscChangeFault;
our @ISA = qw(DvsFault);

our @property_list = (
   ['portgroupName', undef, undef, 1],
);


VIMRuntime::make_get_set('VspanPortgroupPromiscChangeFault', 'portgroupName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VspanPortgroupTypeChangeFault;
our @ISA = qw(DvsFault);

our @property_list = (
   ['portgroupName', undef, undef, 1],
);


VIMRuntime::make_get_set('VspanPortgroupTypeChangeFault', 'portgroupName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VspanPromiscuousPortNotSupported;
our @ISA = qw(DvsFault);

our @property_list = (
   ['vspanSessionKey', undef, undef, 1],
   ['portKey', undef, undef, 1],
);


VIMRuntime::make_get_set('VspanPromiscuousPortNotSupported', 'vspanSessionKey', 'portKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VspanSameSessionPortConflict;
our @ISA = qw(DvsFault);

our @property_list = (
   ['vspanSessionKey', undef, undef, 1],
   ['portKey', undef, undef, 1],
);


VIMRuntime::make_get_set('VspanSameSessionPortConflict', 'vspanSessionKey', 'portKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package WakeOnLanNotSupported;
our @ISA = qw(VirtualHardwareCompatibilityIssue);

our @property_list = (
);


VIMRuntime::make_get_set('WakeOnLanNotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package WakeOnLanNotSupportedByVmotionNIC;
our @ISA = qw(HostPowerOpFailed);

our @property_list = (
);


VIMRuntime::make_get_set('WakeOnLanNotSupportedByVmotionNIC');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package WillLoseHAProtection;
our @ISA = qw(MigrationFault);

our @property_list = (
   ['resolution', undef, undef, 1],
);


VIMRuntime::make_get_set('WillLoseHAProtection', 'resolution');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package WillModifyConfigCpuRequirements;
our @ISA = qw(MigrationFault);

our @property_list = (
);


VIMRuntime::make_get_set('WillModifyConfigCpuRequirements');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package WillResetSnapshotDirectory;
our @ISA = qw(MigrationFault);

our @property_list = (
);


VIMRuntime::make_get_set('WillResetSnapshotDirectory');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package WipeDiskFault;
our @ISA = qw(VimFault);

our @property_list = (
);


VIMRuntime::make_get_set('WipeDiskFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostActiveDirectoryInfo;
our @ISA = qw(HostDirectoryStoreInfo);

our @property_list = (
   ['joinedDomain', undef, undef, 0],
   ['trustedDomain', undef, 1, 0],
   ['domainMembershipStatus', undef, undef, 0],
   ['smartCardAuthenticationEnabled', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostActiveDirectoryInfo', 'joinedDomain', 'trustedDomain', 'domainMembershipStatus', 'smartCardAuthenticationEnabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostActiveDirectorySpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['domainName', undef, undef, 0],
   ['userName', undef, undef, 0],
   ['password', undef, undef, 0],
   ['camServer', undef, undef, 0],
   ['thumbprint', undef, undef, 0],
   ['smartCardAuthenticationEnabled', 'boolean', undef, 0],
   ['smartCardTrustAnchors', undef, 1, 0],
);


VIMRuntime::make_get_set('HostActiveDirectorySpec', 'domainName', 'userName', 'password', 'camServer', 'thumbprint', 'smartCardAuthenticationEnabled', 'smartCardTrustAnchors');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostActiveDirectory;
our @ISA = qw(DynamicData);

our @property_list = (
   ['changeOperation', undef, undef, 1],
   ['spec', 'HostActiveDirectorySpec', undef, 0],
);


VIMRuntime::make_get_set('HostActiveDirectory', 'changeOperation', 'spec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostActiveDirectory;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostActiveDirectory', 'HostActiveDirectory', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostActiveDirectory', 'HostActiveDirectory');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostAuthenticationManagerInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['authConfig', 'HostAuthenticationStoreInfo', 1, 1],
);


VIMRuntime::make_get_set('HostAuthenticationManagerInfo', 'authConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostAuthenticationStoreInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['enabled', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('HostAuthenticationStoreInfo', 'enabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostAuthenticationStoreInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostAuthenticationStoreInfo', 'HostAuthenticationStoreInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostAuthenticationStoreInfo', 'HostAuthenticationStoreInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AutoStartDefaults;
our @ISA = qw(DynamicData);

our @property_list = (
   ['enabled', 'boolean', undef, 0],
   ['startDelay', undef, undef, 0],
   ['stopDelay', undef, undef, 0],
   ['waitForHeartbeat', 'boolean', undef, 0],
   ['stopAction', undef, undef, 0],
);


VIMRuntime::make_get_set('AutoStartDefaults', 'enabled', 'startDelay', 'stopDelay', 'waitForHeartbeat', 'stopAction');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AutoStartPowerInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', 'ManagedObjectReference', undef, 1],
   ['startOrder', undef, undef, 1],
   ['startDelay', undef, undef, 1],
   ['waitForHeartbeat', 'AutoStartWaitHeartbeatSetting', undef, 1],
   ['startAction', undef, undef, 1],
   ['stopDelay', undef, undef, 1],
   ['stopAction', undef, undef, 1],
);


VIMRuntime::make_get_set('AutoStartPowerInfo', 'key', 'startOrder', 'startDelay', 'waitForHeartbeat', 'startAction', 'stopDelay', 'stopAction');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfAutoStartPowerInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['AutoStartPowerInfo', 'AutoStartPowerInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfAutoStartPowerInfo', 'AutoStartPowerInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostAutoStartManagerConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['defaults', 'AutoStartDefaults', undef, 0],
   ['powerInfo', 'AutoStartPowerInfo', 1, 0],
);


VIMRuntime::make_get_set('HostAutoStartManagerConfig', 'defaults', 'powerInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostBootDeviceInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['bootDevices', 'HostBootDevice', 1, 0],
   ['currentBootDeviceKey', undef, undef, 0],
);


VIMRuntime::make_get_set('HostBootDeviceInfo', 'bootDevices', 'currentBootDeviceKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostBootDevice;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['description', undef, undef, 1],
);


VIMRuntime::make_get_set('HostBootDevice', 'key', 'description');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostBootDevice;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostBootDevice', 'HostBootDevice', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostBootDevice', 'HostBootDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostCacheConfigurationSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['datastore', 'ManagedObjectReference', undef, 1],
   ['swapSize', undef, undef, 1],
);


VIMRuntime::make_get_set('HostCacheConfigurationSpec', 'datastore', 'swapSize');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostCacheConfigurationInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', 'ManagedObjectReference', undef, 1],
   ['swapSize', undef, undef, 1],
);


VIMRuntime::make_get_set('HostCacheConfigurationInfo', 'key', 'swapSize');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostCacheConfigurationInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostCacheConfigurationInfo', 'HostCacheConfigurationInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostCacheConfigurationInfo', 'HostCacheConfigurationInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostCapability;
our @ISA = qw(DynamicData);

our @property_list = (
   ['recursiveResourcePoolsSupported', 'boolean', undef, 1],
   ['cpuMemoryResourceConfigurationSupported', 'boolean', undef, 1],
   ['rebootSupported', 'boolean', undef, 1],
   ['shutdownSupported', 'boolean', undef, 1],
   ['vmotionSupported', 'boolean', undef, 1],
   ['standbySupported', 'boolean', undef, 1],
   ['ipmiSupported', 'boolean', undef, 0],
   ['maxSupportedVMs', undef, undef, 0],
   ['maxRunningVMs', undef, undef, 0],
   ['maxSupportedVcpus', undef, undef, 0],
   ['maxRegisteredVMs', undef, undef, 0],
   ['datastorePrincipalSupported', 'boolean', undef, 1],
   ['sanSupported', 'boolean', undef, 1],
   ['nfsSupported', 'boolean', undef, 1],
   ['iscsiSupported', 'boolean', undef, 1],
   ['vlanTaggingSupported', 'boolean', undef, 1],
   ['nicTeamingSupported', 'boolean', undef, 1],
   ['highGuestMemSupported', 'boolean', undef, 1],
   ['maintenanceModeSupported', 'boolean', undef, 1],
   ['suspendedRelocateSupported', 'boolean', undef, 1],
   ['restrictedSnapshotRelocateSupported', 'boolean', undef, 1],
   ['perVmSwapFiles', 'boolean', undef, 1],
   ['localSwapDatastoreSupported', 'boolean', undef, 1],
   ['unsharedSwapVMotionSupported', 'boolean', undef, 1],
   ['backgroundSnapshotsSupported', 'boolean', undef, 1],
   ['preAssignedPCIUnitNumbersSupported', 'boolean', undef, 1],
   ['screenshotSupported', 'boolean', undef, 1],
   ['scaledScreenshotSupported', 'boolean', undef, 1],
   ['storageVMotionSupported', 'boolean', undef, 0],
   ['vmotionWithStorageVMotionSupported', 'boolean', undef, 0],
   ['vmotionAcrossNetworkSupported', 'boolean', undef, 0],
   ['maxNumDisksSVMotion', undef, undef, 0],
   ['hbrNicSelectionSupported', 'boolean', undef, 0],
   ['vrNfcNicSelectionSupported', 'boolean', undef, 0],
   ['recordReplaySupported', 'boolean', undef, 0],
   ['ftSupported', 'boolean', undef, 0],
   ['replayUnsupportedReason', undef, undef, 0],
   ['replayCompatibilityIssues', undef, 1, 0],
   ['smpFtSupported', 'boolean', undef, 0],
   ['ftCompatibilityIssues', undef, 1, 0],
   ['smpFtCompatibilityIssues', undef, 1, 0],
   ['maxVcpusPerFtVm', undef, undef, 0],
   ['loginBySSLThumbprintSupported', 'boolean', undef, 0],
   ['cloneFromSnapshotSupported', 'boolean', undef, 0],
   ['deltaDiskBackingsSupported', 'boolean', undef, 0],
   ['perVMNetworkTrafficShapingSupported', 'boolean', undef, 0],
   ['tpmSupported', 'boolean', undef, 0],
   ['supportedCpuFeature', 'HostCpuIdInfo', 1, 0],
   ['virtualExecUsageSupported', 'boolean', undef, 0],
   ['storageIORMSupported', 'boolean', undef, 0],
   ['vmDirectPathGen2Supported', 'boolean', undef, 0],
   ['vmDirectPathGen2UnsupportedReason', undef, 1, 0],
   ['vmDirectPathGen2UnsupportedReasonExtended', undef, undef, 0],
   ['supportedVmfsMajorVersion', undef, 1, 0],
   ['vStorageCapable', 'boolean', undef, 0],
   ['snapshotRelayoutSupported', 'boolean', undef, 0],
   ['firewallIpRulesSupported', 'boolean', undef, 0],
   ['servicePackageInfoSupported', 'boolean', undef, 0],
   ['maxHostRunningVms', undef, undef, 0],
   ['maxHostSupportedVcpus', undef, undef, 0],
   ['vmfsDatastoreMountCapable', 'boolean', undef, 0],
   ['eightPlusHostVmfsSharedAccessSupported', 'boolean', undef, 0],
   ['nestedHVSupported', 'boolean', undef, 0],
   ['vPMCSupported', 'boolean', undef, 0],
   ['interVMCommunicationThroughVMCISupported', 'boolean', undef, 0],
   ['scheduledHardwareUpgradeSupported', 'boolean', undef, 0],
   ['featureCapabilitiesSupported', 'boolean', undef, 0],
   ['latencySensitivitySupported', 'boolean', undef, 0],
   ['storagePolicySupported', 'boolean', undef, 0],
   ['accel3dSupported', 'boolean', undef, 0],
   ['reliableMemoryAware', 'boolean', undef, 0],
   ['multipleNetworkStackInstanceSupported', 'boolean', undef, 0],
   ['messageBusProxySupported', 'boolean', undef, 0],
   ['vsanSupported', 'boolean', undef, 0],
   ['vFlashSupported', 'boolean', undef, 0],
   ['hostAccessManagerSupported', 'boolean', undef, 0],
   ['provisioningNicSelectionSupported', 'boolean', undef, 0],
   ['nfs41Supported', 'boolean', undef, 0],
   ['nfs41Krb5iSupported', 'boolean', undef, 0],
   ['turnDiskLocatorLedSupported', 'boolean', undef, 0],
   ['virtualVolumeDatastoreSupported', 'boolean', undef, 0],
   ['markAsSsdSupported', 'boolean', undef, 0],
   ['markAsLocalSupported', 'boolean', undef, 0],
   ['smartCardAuthenticationSupported', 'boolean', undef, 0],
   ['cryptoSupported', 'boolean', undef, 0],
   ['oneKVolumeAPIsSupported', 'boolean', undef, 0],
   ['gatewayOnNicSupported', 'boolean', undef, 0],
   ['upitSupported', 'boolean', undef, 0],
   ['cpuHwMmuSupported', 'boolean', undef, 0],
   ['encryptedVMotionSupported', 'boolean', undef, 0],
   ['encryptionChangeOnAddRemoveSupported', 'boolean', undef, 0],
   ['encryptionHotOperationSupported', 'boolean', undef, 0],
   ['encryptionWithSnapshotsSupported', 'boolean', undef, 0],
   ['encryptionFaultToleranceSupported', 'boolean', undef, 0],
   ['encryptionMemorySaveSupported', 'boolean', undef, 0],
   ['encryptionRDMSupported', 'boolean', undef, 0],
   ['encryptionVFlashSupported', 'boolean', undef, 0],
   ['encryptionCBRCSupported', 'boolean', undef, 0],
   ['encryptionHBRSupported', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostCapability', 'recursiveResourcePoolsSupported', 'cpuMemoryResourceConfigurationSupported', 'rebootSupported', 'shutdownSupported', 'vmotionSupported', 'standbySupported', 'ipmiSupported', 'maxSupportedVMs', 'maxRunningVMs', 'maxSupportedVcpus', 'maxRegisteredVMs', 'datastorePrincipalSupported', 'sanSupported', 'nfsSupported', 'iscsiSupported', 'vlanTaggingSupported', 'nicTeamingSupported', 'highGuestMemSupported', 'maintenanceModeSupported', 'suspendedRelocateSupported', 'restrictedSnapshotRelocateSupported', 'perVmSwapFiles', 'localSwapDatastoreSupported', 'unsharedSwapVMotionSupported', 'backgroundSnapshotsSupported', 'preAssignedPCIUnitNumbersSupported', 'screenshotSupported', 'scaledScreenshotSupported', 'storageVMotionSupported', 'vmotionWithStorageVMotionSupported', 'vmotionAcrossNetworkSupported', 'maxNumDisksSVMotion', 'hbrNicSelectionSupported', 'vrNfcNicSelectionSupported', 'recordReplaySupported', 'ftSupported', 'replayUnsupportedReason', 'replayCompatibilityIssues', 'smpFtSupported', 'ftCompatibilityIssues', 'smpFtCompatibilityIssues', 'maxVcpusPerFtVm', 'loginBySSLThumbprintSupported', 'cloneFromSnapshotSupported', 'deltaDiskBackingsSupported', 'perVMNetworkTrafficShapingSupported', 'tpmSupported', 'supportedCpuFeature', 'virtualExecUsageSupported', 'storageIORMSupported', 'vmDirectPathGen2Supported', 'vmDirectPathGen2UnsupportedReason', 'vmDirectPathGen2UnsupportedReasonExtended', 'supportedVmfsMajorVersion', 'vStorageCapable', 'snapshotRelayoutSupported', 'firewallIpRulesSupported', 'servicePackageInfoSupported', 'maxHostRunningVms', 'maxHostSupportedVcpus', 'vmfsDatastoreMountCapable', 'eightPlusHostVmfsSharedAccessSupported', 'nestedHVSupported', 'vPMCSupported', 'interVMCommunicationThroughVMCISupported', 'scheduledHardwareUpgradeSupported', 'featureCapabilitiesSupported', 'latencySensitivitySupported', 'storagePolicySupported', 'accel3dSupported', 'reliableMemoryAware', 'multipleNetworkStackInstanceSupported', 'messageBusProxySupported', 'vsanSupported', 'vFlashSupported', 'hostAccessManagerSupported', 'provisioningNicSelectionSupported', 'nfs41Supported', 'nfs41Krb5iSupported', 'turnDiskLocatorLedSupported', 'virtualVolumeDatastoreSupported', 'markAsSsdSupported', 'markAsLocalSupported', 'smartCardAuthenticationSupported', 'cryptoSupported', 'oneKVolumeAPIsSupported', 'gatewayOnNicSupported', 'upitSupported', 'cpuHwMmuSupported', 'encryptedVMotionSupported', 'encryptionChangeOnAddRemoveSupported', 'encryptionHotOperationSupported', 'encryptionWithSnapshotsSupported', 'encryptionFaultToleranceSupported', 'encryptionMemorySaveSupported', 'encryptionRDMSupported', 'encryptionVFlashSupported', 'encryptionCBRCSupported', 'encryptionHBRSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostCertificateManagerCertificateInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['issuer', undef, undef, 0],
   ['notBefore', undef, undef, 0],
   ['notAfter', undef, undef, 0],
   ['subject', undef, undef, 0],
   ['status', undef, undef, 1],
);


VIMRuntime::make_get_set('HostCertificateManagerCertificateInfo', 'issuer', 'notBefore', 'notAfter', 'subject', 'status');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostConfigChange;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('HostConfigChange');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
   ['product', 'AboutInfo', undef, 1],
   ['deploymentInfo', 'HostDeploymentInfo', undef, 0],
   ['hyperThread', 'HostHyperThreadScheduleInfo', undef, 0],
   ['consoleReservation', 'ServiceConsoleReservationInfo', undef, 0],
   ['virtualMachineReservation', 'VirtualMachineMemoryReservationInfo', undef, 0],
   ['storageDevice', 'HostStorageDeviceInfo', undef, 0],
   ['multipathState', 'HostMultipathStateInfo', undef, 0],
   ['fileSystemVolume', 'HostFileSystemVolumeInfo', undef, 0],
   ['systemFile', undef, 1, 0],
   ['network', 'HostNetworkInfo', undef, 0],
   ['vmotion', 'HostVMotionInfo', undef, 0],
   ['virtualNicManagerInfo', 'HostVirtualNicManagerInfo', undef, 0],
   ['capabilities', 'HostNetCapabilities', undef, 0],
   ['datastoreCapabilities', 'HostDatastoreSystemCapabilities', undef, 0],
   ['offloadCapabilities', 'HostNetOffloadCapabilities', undef, 0],
   ['service', 'HostServiceInfo', undef, 0],
   ['firewall', 'HostFirewallInfo', undef, 0],
   ['autoStart', 'HostAutoStartManagerConfig', undef, 0],
   ['activeDiagnosticPartition', 'HostDiagnosticPartition', undef, 0],
   ['option', 'OptionValue', 1, 0],
   ['optionDef', 'OptionDef', 1, 0],
   ['datastorePrincipal', undef, undef, 0],
   ['localSwapDatastore', 'ManagedObjectReference', undef, 0],
   ['systemSwapConfiguration', 'HostSystemSwapConfiguration', undef, 0],
   ['systemResources', 'HostSystemResourceInfo', undef, 0],
   ['dateTimeInfo', 'HostDateTimeInfo', undef, 0],
   ['flags', 'HostFlagInfo', undef, 0],
   ['adminDisabled', 'boolean', undef, 0],
   ['lockdownMode', 'HostLockdownMode', undef, 0],
   ['ipmi', 'HostIpmiInfo', undef, 0],
   ['sslThumbprintInfo', 'HostSslThumbprintInfo', undef, 0],
   ['sslThumbprintData', 'HostSslThumbprintInfo', 1, 0],
   ['certificate', undef, 1, 0],
   ['pciPassthruInfo', 'HostPciPassthruInfo', 1, 0],
   ['authenticationManagerInfo', 'HostAuthenticationManagerInfo', undef, 0],
   ['featureVersion', 'HostFeatureVersionInfo', 1, 0],
   ['powerSystemCapability', 'PowerSystemCapability', undef, 0],
   ['powerSystemInfo', 'PowerSystemInfo', undef, 0],
   ['cacheConfigurationInfo', 'HostCacheConfigurationInfo', 1, 0],
   ['wakeOnLanCapable', 'boolean', undef, 0],
   ['featureCapability', 'HostFeatureCapability', 1, 0],
   ['maskedFeatureCapability', 'HostFeatureCapability', 1, 0],
   ['vFlashConfigInfo', 'HostVFlashManagerVFlashConfigInfo', undef, 0],
   ['vsanHostConfig', 'VsanHostConfigInfo', undef, 0],
   ['domainList', undef, 1, 0],
   ['scriptCheckSum', undef, undef, 0],
   ['hostConfigCheckSum', undef, undef, 0],
   ['graphicsInfo', 'HostGraphicsInfo', 1, 0],
   ['sharedPassthruGpuTypes', undef, 1, 0],
   ['graphicsConfig', 'HostGraphicsConfig', undef, 0],
   ['ioFilterInfo', 'HostIoFilterInfo', 1, 0],
   ['sriovDevicePool', 'HostSriovDevicePoolInfo', 1, 0],
);


VIMRuntime::make_get_set('HostConfigInfo', 'host', 'product', 'deploymentInfo', 'hyperThread', 'consoleReservation', 'virtualMachineReservation', 'storageDevice', 'multipathState', 'fileSystemVolume', 'systemFile', 'network', 'vmotion', 'virtualNicManagerInfo', 'capabilities', 'datastoreCapabilities', 'offloadCapabilities', 'service', 'firewall', 'autoStart', 'activeDiagnosticPartition', 'option', 'optionDef', 'datastorePrincipal', 'localSwapDatastore', 'systemSwapConfiguration', 'systemResources', 'dateTimeInfo', 'flags', 'adminDisabled', 'lockdownMode', 'ipmi', 'sslThumbprintInfo', 'sslThumbprintData', 'certificate', 'pciPassthruInfo', 'authenticationManagerInfo', 'featureVersion', 'powerSystemCapability', 'powerSystemInfo', 'cacheConfigurationInfo', 'wakeOnLanCapable', 'featureCapability', 'maskedFeatureCapability', 'vFlashConfigInfo', 'vsanHostConfig', 'domainList', 'scriptCheckSum', 'hostConfigCheckSum', 'graphicsInfo', 'sharedPassthruGpuTypes', 'graphicsConfig', 'ioFilterInfo', 'sriovDevicePool');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostConfigManager;
our @ISA = qw(DynamicData);

our @property_list = (
   ['cpuScheduler', 'ManagedObjectReference', undef, 0],
   ['datastoreSystem', 'ManagedObjectReference', undef, 0],
   ['memoryManager', 'ManagedObjectReference', undef, 0],
   ['storageSystem', 'ManagedObjectReference', undef, 0],
   ['networkSystem', 'ManagedObjectReference', undef, 0],
   ['vmotionSystem', 'ManagedObjectReference', undef, 0],
   ['virtualNicManager', 'ManagedObjectReference', undef, 0],
   ['serviceSystem', 'ManagedObjectReference', undef, 0],
   ['firewallSystem', 'ManagedObjectReference', undef, 0],
   ['advancedOption', 'ManagedObjectReference', undef, 0],
   ['diagnosticSystem', 'ManagedObjectReference', undef, 0],
   ['autoStartManager', 'ManagedObjectReference', undef, 0],
   ['snmpSystem', 'ManagedObjectReference', undef, 0],
   ['dateTimeSystem', 'ManagedObjectReference', undef, 0],
   ['patchManager', 'ManagedObjectReference', undef, 0],
   ['imageConfigManager', 'ManagedObjectReference', undef, 0],
   ['bootDeviceSystem', 'ManagedObjectReference', undef, 0],
   ['firmwareSystem', 'ManagedObjectReference', undef, 0],
   ['healthStatusSystem', 'ManagedObjectReference', undef, 0],
   ['pciPassthruSystem', 'ManagedObjectReference', undef, 0],
   ['licenseManager', 'ManagedObjectReference', undef, 0],
   ['kernelModuleSystem', 'ManagedObjectReference', undef, 0],
   ['authenticationManager', 'ManagedObjectReference', undef, 0],
   ['powerSystem', 'ManagedObjectReference', undef, 0],
   ['cacheConfigurationManager', 'ManagedObjectReference', undef, 0],
   ['esxAgentHostManager', 'ManagedObjectReference', undef, 0],
   ['iscsiManager', 'ManagedObjectReference', undef, 0],
   ['vFlashManager', 'ManagedObjectReference', undef, 0],
   ['vsanSystem', 'ManagedObjectReference', undef, 0],
   ['messageBusProxy', 'ManagedObjectReference', undef, 0],
   ['userDirectory', 'ManagedObjectReference', undef, 0],
   ['accountManager', 'ManagedObjectReference', undef, 0],
   ['hostAccessManager', 'ManagedObjectReference', undef, 0],
   ['graphicsManager', 'ManagedObjectReference', undef, 0],
   ['vsanInternalSystem', 'ManagedObjectReference', undef, 0],
   ['certificateManager', 'ManagedObjectReference', undef, 0],
   ['cryptoManager', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('HostConfigManager', 'cpuScheduler', 'datastoreSystem', 'memoryManager', 'storageSystem', 'networkSystem', 'vmotionSystem', 'virtualNicManager', 'serviceSystem', 'firewallSystem', 'advancedOption', 'diagnosticSystem', 'autoStartManager', 'snmpSystem', 'dateTimeSystem', 'patchManager', 'imageConfigManager', 'bootDeviceSystem', 'firmwareSystem', 'healthStatusSystem', 'pciPassthruSystem', 'licenseManager', 'kernelModuleSystem', 'authenticationManager', 'powerSystem', 'cacheConfigurationManager', 'esxAgentHostManager', 'iscsiManager', 'vFlashManager', 'vsanSystem', 'messageBusProxy', 'userDirectory', 'accountManager', 'hostAccessManager', 'graphicsManager', 'vsanInternalSystem', 'certificateManager', 'cryptoManager');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['nasDatastore', 'HostNasVolumeConfig', 1, 0],
   ['network', 'HostNetworkConfig', undef, 0],
   ['nicTypeSelection', 'HostVirtualNicManagerNicTypeSelection', 1, 0],
   ['service', 'HostServiceConfig', 1, 0],
   ['firewall', 'HostFirewallConfig', undef, 0],
   ['option', 'OptionValue', 1, 0],
   ['datastorePrincipal', undef, undef, 0],
   ['datastorePrincipalPasswd', undef, undef, 0],
   ['datetime', 'HostDateTimeConfig', undef, 0],
   ['storageDevice', 'HostStorageDeviceInfo', undef, 0],
   ['license', 'HostLicenseSpec', undef, 0],
   ['security', 'HostSecuritySpec', undef, 0],
   ['userAccount', 'HostAccountSpec', 1, 0],
   ['usergroupAccount', 'HostAccountSpec', 1, 0],
   ['memory', 'HostMemorySpec', undef, 0],
   ['activeDirectory', 'HostActiveDirectory', 1, 0],
   ['genericConfig', 'KeyAnyValue', 1, 0],
   ['graphicsConfig', 'HostGraphicsConfig', undef, 0],
);


VIMRuntime::make_get_set('HostConfigSpec', 'nasDatastore', 'network', 'nicTypeSelection', 'service', 'firewall', 'option', 'datastorePrincipal', 'datastorePrincipalPasswd', 'datetime', 'storageDevice', 'license', 'security', 'userAccount', 'usergroupAccount', 'memory', 'activeDirectory', 'genericConfig', 'graphicsConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostConnectInfoNetworkInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['summary', 'NetworkSummary', undef, 1],
);


VIMRuntime::make_get_set('HostConnectInfoNetworkInfo', 'summary');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostConnectInfoNetworkInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostConnectInfoNetworkInfo', 'HostConnectInfoNetworkInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostConnectInfoNetworkInfo', 'HostConnectInfoNetworkInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNewNetworkConnectInfo;
our @ISA = qw(HostConnectInfoNetworkInfo);

our @property_list = (
);


VIMRuntime::make_get_set('HostNewNetworkConnectInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDatastoreConnectInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['summary', 'DatastoreSummary', undef, 1],
);


VIMRuntime::make_get_set('HostDatastoreConnectInfo', 'summary');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostDatastoreConnectInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostDatastoreConnectInfo', 'HostDatastoreConnectInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostDatastoreConnectInfo', 'HostDatastoreConnectInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDatastoreExistsConnectInfo;
our @ISA = qw(HostDatastoreConnectInfo);

our @property_list = (
   ['newDatastoreName', undef, undef, 1],
);


VIMRuntime::make_get_set('HostDatastoreExistsConnectInfo', 'newDatastoreName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDatastoreNameConflictConnectInfo;
our @ISA = qw(HostDatastoreConnectInfo);

our @property_list = (
   ['newDatastoreName', undef, undef, 1],
);


VIMRuntime::make_get_set('HostDatastoreNameConflictConnectInfo', 'newDatastoreName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostLicenseConnectInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['license', 'LicenseManagerLicenseInfo', undef, 1],
   ['evaluation', 'LicenseManagerEvaluationInfo', undef, 1],
   ['resource', 'HostLicensableResourceInfo', undef, 0],
);


VIMRuntime::make_get_set('HostLicenseConnectInfo', 'license', 'evaluation', 'resource');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostConnectInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['serverIp', undef, undef, 0],
   ['inDasCluster', 'boolean', undef, 0],
   ['host', 'HostListSummary', undef, 1],
   ['vm', 'VirtualMachineSummary', 1, 0],
   ['vimAccountNameRequired', 'boolean', undef, 0],
   ['clusterSupported', 'boolean', undef, 0],
   ['network', 'HostConnectInfoNetworkInfo', 1, 0],
   ['datastore', 'HostDatastoreConnectInfo', 1, 0],
   ['license', 'HostLicenseConnectInfo', undef, 0],
   ['capability', 'HostCapability', undef, 0],
);


VIMRuntime::make_get_set('HostConnectInfo', 'serverIp', 'inDasCluster', 'host', 'vm', 'vimAccountNameRequired', 'clusterSupported', 'network', 'datastore', 'license', 'capability');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostConnectSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['hostName', undef, undef, 0],
   ['port', undef, undef, 0],
   ['sslThumbprint', undef, undef, 0],
   ['userName', undef, undef, 0],
   ['password', undef, undef, 0],
   ['vmFolder', 'ManagedObjectReference', undef, 0],
   ['force', 'boolean', undef, 1],
   ['vimAccountName', undef, undef, 0],
   ['vimAccountPassword', undef, undef, 0],
   ['managementIp', undef, undef, 0],
   ['lockdownMode', 'HostLockdownMode', undef, 0],
   ['hostGateway', 'HostGatewaySpec', undef, 0],
);


VIMRuntime::make_get_set('HostConnectSpec', 'hostName', 'port', 'sslThumbprint', 'userName', 'password', 'vmFolder', 'force', 'vimAccountName', 'vimAccountPassword', 'managementIp', 'lockdownMode', 'hostGateway');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostCpuIdInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['level', undef, undef, 1],
   ['vendor', undef, undef, 0],
   ['eax', undef, undef, 0],
   ['ebx', undef, undef, 0],
   ['ecx', undef, undef, 0],
   ['edx', undef, undef, 0],
);


VIMRuntime::make_get_set('HostCpuIdInfo', 'level', 'vendor', 'eax', 'ebx', 'ecx', 'edx');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostCpuIdInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostCpuIdInfo', 'HostCpuIdInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostCpuIdInfo', 'HostCpuIdInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostHyperThreadScheduleInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['available', 'boolean', undef, 1],
   ['active', 'boolean', undef, 1],
   ['config', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('HostHyperThreadScheduleInfo', 'available', 'active', 'config');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FileQueryFlags;
our @ISA = qw(DynamicData);

our @property_list = (
   ['fileType', 'boolean', undef, 1],
   ['fileSize', 'boolean', undef, 1],
   ['modification', 'boolean', undef, 1],
   ['fileOwner', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('FileQueryFlags', 'fileType', 'fileSize', 'modification', 'fileOwner');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FileInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['path', undef, undef, 1],
   ['friendlyName', undef, undef, 0],
   ['fileSize', undef, undef, 0],
   ['modification', undef, undef, 0],
   ['owner', undef, undef, 0],
);


VIMRuntime::make_get_set('FileInfo', 'path', 'friendlyName', 'fileSize', 'modification', 'owner');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfFileInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['FileInfo', 'FileInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfFileInfo', 'FileInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FileQuery;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('FileQuery');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfFileQuery;
our @ISA = qw(ComplexType);

our @property_list = (
   ['FileQuery', 'FileQuery', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfFileQuery', 'FileQuery');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmConfigFileQueryFilter;
our @ISA = qw(DynamicData);

our @property_list = (
   ['matchConfigVersion', undef, 1, 0],
   ['encrypted', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VmConfigFileQueryFilter', 'matchConfigVersion', 'encrypted');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmConfigFileQueryFlags;
our @ISA = qw(DynamicData);

our @property_list = (
   ['configVersion', 'boolean', undef, 1],
   ['encryption', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VmConfigFileQueryFlags', 'configVersion', 'encryption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmConfigFileQuery;
our @ISA = qw(FileQuery);

our @property_list = (
   ['filter', 'VmConfigFileQueryFilter', undef, 0],
   ['details', 'VmConfigFileQueryFlags', undef, 0],
);


VIMRuntime::make_get_set('VmConfigFileQuery', 'filter', 'details');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TemplateConfigFileQuery;
our @ISA = qw(VmConfigFileQuery);

our @property_list = (
);


VIMRuntime::make_get_set('TemplateConfigFileQuery');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmDiskFileQueryFilter;
our @ISA = qw(DynamicData);

our @property_list = (
   ['diskType', undef, 1, 0],
   ['matchHardwareVersion', undef, 1, 0],
   ['controllerType', undef, 1, 0],
   ['thin', 'boolean', undef, 0],
   ['encrypted', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VmDiskFileQueryFilter', 'diskType', 'matchHardwareVersion', 'controllerType', 'thin', 'encrypted');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmDiskFileQueryFlags;
our @ISA = qw(DynamicData);

our @property_list = (
   ['diskType', 'boolean', undef, 1],
   ['capacityKb', 'boolean', undef, 1],
   ['hardwareVersion', 'boolean', undef, 1],
   ['controllerType', 'boolean', undef, 0],
   ['diskExtents', 'boolean', undef, 0],
   ['thin', 'boolean', undef, 0],
   ['encryption', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VmDiskFileQueryFlags', 'diskType', 'capacityKb', 'hardwareVersion', 'controllerType', 'diskExtents', 'thin', 'encryption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmDiskFileQuery;
our @ISA = qw(FileQuery);

our @property_list = (
   ['filter', 'VmDiskFileQueryFilter', undef, 0],
   ['details', 'VmDiskFileQueryFlags', undef, 0],
);


VIMRuntime::make_get_set('VmDiskFileQuery', 'filter', 'details');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FolderFileQuery;
our @ISA = qw(FileQuery);

our @property_list = (
);


VIMRuntime::make_get_set('FolderFileQuery');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmSnapshotFileQuery;
our @ISA = qw(FileQuery);

our @property_list = (
);


VIMRuntime::make_get_set('VmSnapshotFileQuery');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IsoImageFileQuery;
our @ISA = qw(FileQuery);

our @property_list = (
);


VIMRuntime::make_get_set('IsoImageFileQuery');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FloppyImageFileQuery;
our @ISA = qw(FileQuery);

our @property_list = (
);


VIMRuntime::make_get_set('FloppyImageFileQuery');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmNvramFileQuery;
our @ISA = qw(FileQuery);

our @property_list = (
);


VIMRuntime::make_get_set('VmNvramFileQuery');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmLogFileQuery;
our @ISA = qw(FileQuery);

our @property_list = (
);


VIMRuntime::make_get_set('VmLogFileQuery');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmConfigFileEncryptionInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['keyId', 'CryptoKeyId', undef, 0],
);


VIMRuntime::make_get_set('VmConfigFileEncryptionInfo', 'keyId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmConfigFileInfo;
our @ISA = qw(FileInfo);

our @property_list = (
   ['configVersion', undef, undef, 0],
   ['encryption', 'VmConfigFileEncryptionInfo', undef, 0],
);


VIMRuntime::make_get_set('VmConfigFileInfo', 'configVersion', 'encryption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TemplateConfigFileInfo;
our @ISA = qw(VmConfigFileInfo);

our @property_list = (
);


VIMRuntime::make_get_set('TemplateConfigFileInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmDiskFileEncryptionInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['keyId', 'CryptoKeyId', undef, 0],
);


VIMRuntime::make_get_set('VmDiskFileEncryptionInfo', 'keyId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmDiskFileInfo;
our @ISA = qw(FileInfo);

our @property_list = (
   ['diskType', undef, undef, 0],
   ['capacityKb', undef, undef, 0],
   ['hardwareVersion', undef, undef, 0],
   ['controllerType', undef, undef, 0],
   ['diskExtents', undef, 1, 0],
   ['thin', 'boolean', undef, 0],
   ['encryption', 'VmDiskFileEncryptionInfo', undef, 0],
);


VIMRuntime::make_get_set('VmDiskFileInfo', 'diskType', 'capacityKb', 'hardwareVersion', 'controllerType', 'diskExtents', 'thin', 'encryption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FolderFileInfo;
our @ISA = qw(FileInfo);

our @property_list = (
);


VIMRuntime::make_get_set('FolderFileInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmSnapshotFileInfo;
our @ISA = qw(FileInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VmSnapshotFileInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IsoImageFileInfo;
our @ISA = qw(FileInfo);

our @property_list = (
);


VIMRuntime::make_get_set('IsoImageFileInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FloppyImageFileInfo;
our @ISA = qw(FileInfo);

our @property_list = (
);


VIMRuntime::make_get_set('FloppyImageFileInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmNvramFileInfo;
our @ISA = qw(FileInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VmNvramFileInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmLogFileInfo;
our @ISA = qw(FileInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VmLogFileInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDatastoreBrowserSearchSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['query', 'FileQuery', 1, 0],
   ['details', 'FileQueryFlags', undef, 0],
   ['searchCaseInsensitive', 'boolean', undef, 0],
   ['matchPattern', undef, 1, 0],
   ['sortFoldersFirst', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostDatastoreBrowserSearchSpec', 'query', 'details', 'searchCaseInsensitive', 'matchPattern', 'sortFoldersFirst');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDatastoreBrowserSearchResults;
our @ISA = qw(DynamicData);

our @property_list = (
   ['datastore', 'ManagedObjectReference', undef, 0],
   ['folderPath', undef, undef, 0],
   ['file', 'FileInfo', 1, 0],
);


VIMRuntime::make_get_set('HostDatastoreBrowserSearchResults', 'datastore', 'folderPath', 'file');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostDatastoreBrowserSearchResults;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostDatastoreBrowserSearchResults', 'HostDatastoreBrowserSearchResults', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostDatastoreBrowserSearchResults', 'HostDatastoreBrowserSearchResults');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDatastoreSystemCapabilities;
our @ISA = qw(DynamicData);

our @property_list = (
   ['nfsMountCreationRequired', 'boolean', undef, 1],
   ['nfsMountCreationSupported', 'boolean', undef, 1],
   ['localDatastoreSupported', 'boolean', undef, 1],
   ['vmfsExtentExpansionSupported', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostDatastoreSystemCapabilities', 'nfsMountCreationRequired', 'nfsMountCreationSupported', 'localDatastoreSupported', 'vmfsExtentExpansionSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDatastoreSystemVvolDatastoreSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['scId', undef, undef, 1],
);


VIMRuntime::make_get_set('HostDatastoreSystemVvolDatastoreSpec', 'name', 'scId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDatastoreSystemDatastoreResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', 'ManagedObjectReference', undef, 1],
   ['fault', 'LocalizedMethodFault', undef, 0],
);


VIMRuntime::make_get_set('HostDatastoreSystemDatastoreResult', 'key', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostDatastoreSystemDatastoreResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostDatastoreSystemDatastoreResult', 'HostDatastoreSystemDatastoreResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostDatastoreSystemDatastoreResult', 'HostDatastoreSystemDatastoreResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmfsDatastoreInfo;
our @ISA = qw(DatastoreInfo);

our @property_list = (
   ['maxPhysicalRDMFileSize', undef, undef, 0],
   ['maxVirtualRDMFileSize', undef, undef, 0],
   ['vmfs', 'HostVmfsVolume', undef, 0],
);


VIMRuntime::make_get_set('VmfsDatastoreInfo', 'maxPhysicalRDMFileSize', 'maxVirtualRDMFileSize', 'vmfs');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NasDatastoreInfo;
our @ISA = qw(DatastoreInfo);

our @property_list = (
   ['nas', 'HostNasVolume', undef, 0],
);


VIMRuntime::make_get_set('NasDatastoreInfo', 'nas');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LocalDatastoreInfo;
our @ISA = qw(DatastoreInfo);

our @property_list = (
   ['path', undef, undef, 0],
);


VIMRuntime::make_get_set('LocalDatastoreInfo', 'path');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmfsDatastoreSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['diskUuid', undef, undef, 1],
);


VIMRuntime::make_get_set('VmfsDatastoreSpec', 'diskUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmfsDatastoreCreateSpec;
our @ISA = qw(VmfsDatastoreSpec);

our @property_list = (
   ['partition', 'HostDiskPartitionSpec', undef, 1],
   ['vmfs', 'HostVmfsSpec', undef, 1],
   ['extent', 'HostScsiDiskPartition', 1, 0],
);


VIMRuntime::make_get_set('VmfsDatastoreCreateSpec', 'partition', 'vmfs', 'extent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmfsDatastoreExtendSpec;
our @ISA = qw(VmfsDatastoreSpec);

our @property_list = (
   ['partition', 'HostDiskPartitionSpec', undef, 1],
   ['extent', 'HostScsiDiskPartition', 1, 1],
);


VIMRuntime::make_get_set('VmfsDatastoreExtendSpec', 'partition', 'extent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmfsDatastoreExpandSpec;
our @ISA = qw(VmfsDatastoreSpec);

our @property_list = (
   ['partition', 'HostDiskPartitionSpec', undef, 1],
   ['extent', 'HostScsiDiskPartition', undef, 1],
);


VIMRuntime::make_get_set('VmfsDatastoreExpandSpec', 'partition', 'extent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmfsDatastoreBaseOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['layout', 'HostDiskPartitionLayout', undef, 1],
   ['partitionFormatChange', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VmfsDatastoreBaseOption', 'layout', 'partitionFormatChange');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmfsDatastoreSingleExtentOption;
our @ISA = qw(VmfsDatastoreBaseOption);

our @property_list = (
   ['vmfsExtent', 'HostDiskPartitionBlockRange', undef, 1],
);


VIMRuntime::make_get_set('VmfsDatastoreSingleExtentOption', 'vmfsExtent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmfsDatastoreAllExtentOption;
our @ISA = qw(VmfsDatastoreSingleExtentOption);

our @property_list = (
);


VIMRuntime::make_get_set('VmfsDatastoreAllExtentOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmfsDatastoreMultipleExtentOption;
our @ISA = qw(VmfsDatastoreBaseOption);

our @property_list = (
   ['vmfsExtent', 'HostDiskPartitionBlockRange', 1, 1],
);


VIMRuntime::make_get_set('VmfsDatastoreMultipleExtentOption', 'vmfsExtent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmfsDatastoreOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['info', 'VmfsDatastoreBaseOption', undef, 1],
   ['spec', 'VmfsDatastoreSpec', undef, 1],
);


VIMRuntime::make_get_set('VmfsDatastoreOption', 'info', 'spec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVmfsDatastoreOption;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VmfsDatastoreOption', 'VmfsDatastoreOption', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVmfsDatastoreOption', 'VmfsDatastoreOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VvolDatastoreInfo;
our @ISA = qw(DatastoreInfo);

our @property_list = (
   ['vvolDS', 'HostVvolVolume', undef, 0],
);


VIMRuntime::make_get_set('VvolDatastoreInfo', 'vvolDS');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDateTimeConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['timeZone', undef, undef, 0],
   ['ntpConfig', 'HostNtpConfig', undef, 0],
);


VIMRuntime::make_get_set('HostDateTimeConfig', 'timeZone', 'ntpConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDateTimeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['timeZone', 'HostDateTimeSystemTimeZone', undef, 1],
   ['ntpConfig', 'HostNtpConfig', undef, 0],
);


VIMRuntime::make_get_set('HostDateTimeInfo', 'timeZone', 'ntpConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDateTimeSystemTimeZone;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['name', undef, undef, 1],
   ['description', undef, undef, 1],
   ['gmtOffset', undef, undef, 1],
);


VIMRuntime::make_get_set('HostDateTimeSystemTimeZone', 'key', 'name', 'description', 'gmtOffset');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostDateTimeSystemTimeZone;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostDateTimeSystemTimeZone', 'HostDateTimeSystemTimeZone', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostDateTimeSystemTimeZone', 'HostDateTimeSystemTimeZone');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDeploymentInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['bootedFromStatelessCache', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostDeploymentInfo', 'bootedFromStatelessCache');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDevice;
our @ISA = qw(DynamicData);

our @property_list = (
   ['deviceName', undef, undef, 1],
   ['deviceType', undef, undef, 1],
);


VIMRuntime::make_get_set('HostDevice', 'deviceName', 'deviceType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDhcpServiceSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['virtualSwitch', undef, undef, 1],
   ['defaultLeaseDuration', undef, undef, 1],
   ['leaseBeginIp', undef, undef, 1],
   ['leaseEndIp', undef, undef, 1],
   ['maxLeaseDuration', undef, undef, 1],
   ['unlimitedLease', 'boolean', undef, 1],
   ['ipSubnetAddr', undef, undef, 1],
   ['ipSubnetMask', undef, undef, 1],
);


VIMRuntime::make_get_set('HostDhcpServiceSpec', 'virtualSwitch', 'defaultLeaseDuration', 'leaseBeginIp', 'leaseEndIp', 'maxLeaseDuration', 'unlimitedLease', 'ipSubnetAddr', 'ipSubnetMask');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDhcpServiceConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['changeOperation', undef, undef, 0],
   ['key', undef, undef, 1],
   ['spec', 'HostDhcpServiceSpec', undef, 1],
);


VIMRuntime::make_get_set('HostDhcpServiceConfig', 'changeOperation', 'key', 'spec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostDhcpServiceConfig;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostDhcpServiceConfig', 'HostDhcpServiceConfig', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostDhcpServiceConfig', 'HostDhcpServiceConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDhcpService;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['spec', 'HostDhcpServiceSpec', undef, 1],
);


VIMRuntime::make_get_set('HostDhcpService', 'key', 'spec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostDhcpService;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostDhcpService', 'HostDhcpService', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostDhcpService', 'HostDhcpService');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDiagnosticPartitionCreateOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['storageType', undef, undef, 1],
   ['diagnosticType', undef, undef, 1],
   ['disk', 'HostScsiDisk', undef, 1],
);


VIMRuntime::make_get_set('HostDiagnosticPartitionCreateOption', 'storageType', 'diagnosticType', 'disk');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostDiagnosticPartitionCreateOption;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostDiagnosticPartitionCreateOption', 'HostDiagnosticPartitionCreateOption', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostDiagnosticPartitionCreateOption', 'HostDiagnosticPartitionCreateOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDiagnosticPartitionCreateSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['storageType', undef, undef, 1],
   ['diagnosticType', undef, undef, 1],
   ['id', 'HostScsiDiskPartition', undef, 1],
   ['partition', 'HostDiskPartitionSpec', undef, 1],
   ['active', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostDiagnosticPartitionCreateSpec', 'storageType', 'diagnosticType', 'id', 'partition', 'active');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDiagnosticPartitionCreateDescription;
our @ISA = qw(DynamicData);

our @property_list = (
   ['layout', 'HostDiskPartitionLayout', undef, 1],
   ['diskUuid', undef, undef, 1],
   ['spec', 'HostDiagnosticPartitionCreateSpec', undef, 1],
);


VIMRuntime::make_get_set('HostDiagnosticPartitionCreateDescription', 'layout', 'diskUuid', 'spec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDiagnosticPartition;
our @ISA = qw(DynamicData);

our @property_list = (
   ['storageType', undef, undef, 1],
   ['diagnosticType', undef, undef, 1],
   ['slots', undef, undef, 1],
   ['id', 'HostScsiDiskPartition', undef, 1],
);


VIMRuntime::make_get_set('HostDiagnosticPartition', 'storageType', 'diagnosticType', 'slots', 'id');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostDiagnosticPartition;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostDiagnosticPartition', 'HostDiagnosticPartition', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostDiagnosticPartition', 'HostDiagnosticPartition');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDirectoryStoreInfo;
our @ISA = qw(HostAuthenticationStoreInfo);

our @property_list = (
);


VIMRuntime::make_get_set('HostDirectoryStoreInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDiskConfigurationResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['devicePath', undef, undef, 0],
   ['success', 'boolean', undef, 0],
   ['fault', 'LocalizedMethodFault', undef, 0],
);


VIMRuntime::make_get_set('HostDiskConfigurationResult', 'devicePath', 'success', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostDiskConfigurationResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostDiskConfigurationResult', 'HostDiskConfigurationResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostDiskConfigurationResult', 'HostDiskConfigurationResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDiskDimensionsChs;
our @ISA = qw(DynamicData);

our @property_list = (
   ['cylinder', undef, undef, 1],
   ['head', undef, undef, 1],
   ['sector', undef, undef, 1],
);


VIMRuntime::make_get_set('HostDiskDimensionsChs', 'cylinder', 'head', 'sector');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDiskDimensionsLba;
our @ISA = qw(DynamicData);

our @property_list = (
   ['blockSize', undef, undef, 1],
   ['block', undef, undef, 1],
);


VIMRuntime::make_get_set('HostDiskDimensionsLba', 'blockSize', 'block');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDiskDimensions;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('HostDiskDimensions');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDiskPartitionAttributes;
our @ISA = qw(DynamicData);

our @property_list = (
   ['partition', undef, undef, 1],
   ['startSector', undef, undef, 1],
   ['endSector', undef, undef, 1],
   ['type', undef, undef, 1],
   ['guid', undef, undef, 0],
   ['logical', 'boolean', undef, 1],
   ['attributes', undef, undef, 1],
   ['partitionAlignment', undef, undef, 0],
);


VIMRuntime::make_get_set('HostDiskPartitionAttributes', 'partition', 'startSector', 'endSector', 'type', 'guid', 'logical', 'attributes', 'partitionAlignment');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostDiskPartitionAttributes;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostDiskPartitionAttributes', 'HostDiskPartitionAttributes', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostDiskPartitionAttributes', 'HostDiskPartitionAttributes');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDiskPartitionBlockRange;
our @ISA = qw(DynamicData);

our @property_list = (
   ['partition', undef, undef, 0],
   ['type', undef, undef, 1],
   ['start', 'HostDiskDimensionsLba', undef, 1],
   ['end', 'HostDiskDimensionsLba', undef, 1],
);


VIMRuntime::make_get_set('HostDiskPartitionBlockRange', 'partition', 'type', 'start', 'end');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostDiskPartitionBlockRange;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostDiskPartitionBlockRange', 'HostDiskPartitionBlockRange', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostDiskPartitionBlockRange', 'HostDiskPartitionBlockRange');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDiskPartitionSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['partitionFormat', undef, undef, 0],
   ['chs', 'HostDiskDimensionsChs', undef, 0],
   ['totalSectors', undef, undef, 0],
   ['partition', 'HostDiskPartitionAttributes', 1, 0],
);


VIMRuntime::make_get_set('HostDiskPartitionSpec', 'partitionFormat', 'chs', 'totalSectors', 'partition');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDiskPartitionLayout;
our @ISA = qw(DynamicData);

our @property_list = (
   ['total', 'HostDiskDimensionsLba', undef, 0],
   ['partition', 'HostDiskPartitionBlockRange', 1, 1],
);


VIMRuntime::make_get_set('HostDiskPartitionLayout', 'total', 'partition');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDiskPartitionInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['deviceName', undef, undef, 1],
   ['spec', 'HostDiskPartitionSpec', undef, 1],
   ['layout', 'HostDiskPartitionLayout', undef, 1],
);


VIMRuntime::make_get_set('HostDiskPartitionInfo', 'deviceName', 'spec', 'layout');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostDiskPartitionInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostDiskPartitionInfo', 'HostDiskPartitionInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostDiskPartitionInfo', 'HostDiskPartitionInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDnsConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['dhcp', 'boolean', undef, 1],
   ['virtualNicDevice', undef, undef, 0],
   ['hostName', undef, undef, 1],
   ['domainName', undef, undef, 1],
   ['address', undef, 1, 0],
   ['searchDomain', undef, 1, 0],
);


VIMRuntime::make_get_set('HostDnsConfig', 'dhcp', 'virtualNicDevice', 'hostName', 'domainName', 'address', 'searchDomain');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDnsConfigSpec;
our @ISA = qw(HostDnsConfig);

our @property_list = (
   ['virtualNicConnection', 'HostVirtualNicConnection', undef, 0],
);


VIMRuntime::make_get_set('HostDnsConfigSpec', 'virtualNicConnection');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostEsxAgentHostManagerConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['agentVmDatastore', 'ManagedObjectReference', undef, 0],
   ['agentVmNetwork', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('HostEsxAgentHostManagerConfigInfo', 'agentVmDatastore', 'agentVmNetwork');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostFaultToleranceManagerComponentHealthInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['isStorageHealthy', 'boolean', undef, 1],
   ['isNetworkHealthy', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('HostFaultToleranceManagerComponentHealthInfo', 'isStorageHealthy', 'isNetworkHealthy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FcoeConfigVlanRange;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vlanLow', undef, undef, 1],
   ['vlanHigh', undef, undef, 1],
);


VIMRuntime::make_get_set('FcoeConfigVlanRange', 'vlanLow', 'vlanHigh');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfFcoeConfigVlanRange;
our @ISA = qw(ComplexType);

our @property_list = (
   ['FcoeConfigVlanRange', 'FcoeConfigVlanRange', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfFcoeConfigVlanRange', 'FcoeConfigVlanRange');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FcoeConfigFcoeCapabilities;
our @ISA = qw(DynamicData);

our @property_list = (
   ['priorityClass', 'boolean', undef, 1],
   ['sourceMacAddress', 'boolean', undef, 1],
   ['vlanRange', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('FcoeConfigFcoeCapabilities', 'priorityClass', 'sourceMacAddress', 'vlanRange');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FcoeConfigFcoeSpecification;
our @ISA = qw(DynamicData);

our @property_list = (
   ['underlyingPnic', undef, undef, 1],
   ['priorityClass', undef, undef, 0],
   ['sourceMac', undef, undef, 0],
   ['vlanRange', 'FcoeConfigVlanRange', 1, 0],
);


VIMRuntime::make_get_set('FcoeConfigFcoeSpecification', 'underlyingPnic', 'priorityClass', 'sourceMac', 'vlanRange');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FcoeConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['priorityClass', undef, undef, 1],
   ['sourceMac', undef, undef, 1],
   ['vlanRange', 'FcoeConfigVlanRange', 1, 1],
   ['capabilities', 'FcoeConfigFcoeCapabilities', undef, 1],
   ['fcoeActive', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('FcoeConfig', 'priorityClass', 'sourceMac', 'vlanRange', 'capabilities', 'fcoeActive');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostFeatureCapability;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['featureName', undef, undef, 1],
   ['value', undef, undef, 1],
);


VIMRuntime::make_get_set('HostFeatureCapability', 'key', 'featureName', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostFeatureCapability;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostFeatureCapability', 'HostFeatureCapability', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostFeatureCapability', 'HostFeatureCapability');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostFeatureMask;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['featureName', undef, undef, 1],
   ['value', undef, undef, 1],
);


VIMRuntime::make_get_set('HostFeatureMask', 'key', 'featureName', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostFeatureMask;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostFeatureMask', 'HostFeatureMask', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostFeatureMask', 'HostFeatureMask');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostFeatureVersionInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['value', undef, undef, 1],
);


VIMRuntime::make_get_set('HostFeatureVersionInfo', 'key', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostFeatureVersionInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostFeatureVersionInfo', 'HostFeatureVersionInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostFeatureVersionInfo', 'HostFeatureVersionInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ModeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['browse', undef, undef, 0],
   ['read', undef, undef, 1],
   ['modify', undef, undef, 1],
   ['use', undef, undef, 1],
   ['admin', undef, undef, 0],
   ['full', undef, undef, 1],
);


VIMRuntime::make_get_set('ModeInfo', 'browse', 'read', 'modify', 'use', 'admin', 'full');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostFileAccess;
our @ISA = qw(DynamicData);

our @property_list = (
   ['who', undef, undef, 1],
   ['what', undef, undef, 1],
);


VIMRuntime::make_get_set('HostFileAccess', 'who', 'what');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostFileSystemVolumeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['volumeTypeList', undef, 1, 0],
   ['mountInfo', 'HostFileSystemMountInfo', 1, 0],
);


VIMRuntime::make_get_set('HostFileSystemVolumeInfo', 'volumeTypeList', 'mountInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostFileSystemMountInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['mountInfo', 'HostMountInfo', undef, 1],
   ['volume', 'HostFileSystemVolume', undef, 1],
   ['vStorageSupport', undef, undef, 0],
);


VIMRuntime::make_get_set('HostFileSystemMountInfo', 'mountInfo', 'volume', 'vStorageSupport');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostFileSystemMountInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostFileSystemMountInfo', 'HostFileSystemMountInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostFileSystemMountInfo', 'HostFileSystemMountInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostFileSystemVolume;
our @ISA = qw(DynamicData);

our @property_list = (
   ['type', undef, undef, 1],
   ['name', undef, undef, 1],
   ['capacity', undef, undef, 1],
);


VIMRuntime::make_get_set('HostFileSystemVolume', 'type', 'name', 'capacity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNasVolumeUserInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['user', undef, undef, 1],
);


VIMRuntime::make_get_set('HostNasVolumeUserInfo', 'user');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNasVolumeSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['remoteHost', undef, undef, 1],
   ['remotePath', undef, undef, 1],
   ['localPath', undef, undef, 1],
   ['accessMode', undef, undef, 1],
   ['type', undef, undef, 0],
   ['userName', undef, undef, 0],
   ['password', undef, undef, 0],
   ['remoteHostNames', undef, 1, 0],
   ['securityType', undef, undef, 0],
);


VIMRuntime::make_get_set('HostNasVolumeSpec', 'remoteHost', 'remotePath', 'localPath', 'accessMode', 'type', 'userName', 'password', 'remoteHostNames', 'securityType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNasVolumeConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['changeOperation', undef, undef, 0],
   ['spec', 'HostNasVolumeSpec', undef, 0],
);


VIMRuntime::make_get_set('HostNasVolumeConfig', 'changeOperation', 'spec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostNasVolumeConfig;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostNasVolumeConfig', 'HostNasVolumeConfig', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostNasVolumeConfig', 'HostNasVolumeConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNasVolume;
our @ISA = qw(HostFileSystemVolume);

our @property_list = (
   ['remoteHost', undef, undef, 1],
   ['remotePath', undef, undef, 1],
   ['userName', undef, undef, 0],
   ['remoteHostNames', undef, 1, 0],
   ['securityType', undef, undef, 0],
   ['protocolEndpoint', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostNasVolume', 'remoteHost', 'remotePath', 'userName', 'remoteHostNames', 'securityType', 'protocolEndpoint');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostLocalFileSystemVolumeSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['device', undef, undef, 1],
   ['localPath', undef, undef, 1],
);


VIMRuntime::make_get_set('HostLocalFileSystemVolumeSpec', 'device', 'localPath');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostLocalFileSystemVolume;
our @ISA = qw(HostFileSystemVolume);

our @property_list = (
   ['device', undef, undef, 1],
);


VIMRuntime::make_get_set('HostLocalFileSystemVolume', 'device');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVfatVolume;
our @ISA = qw(HostFileSystemVolume);

our @property_list = (
);


VIMRuntime::make_get_set('HostVfatVolume');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostFirewallConfigRuleSetConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['rulesetId', undef, undef, 1],
   ['enabled', 'boolean', undef, 1],
   ['allowedHosts', 'HostFirewallRulesetIpList', undef, 0],
);


VIMRuntime::make_get_set('HostFirewallConfigRuleSetConfig', 'rulesetId', 'enabled', 'allowedHosts');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostFirewallConfigRuleSetConfig;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostFirewallConfigRuleSetConfig', 'HostFirewallConfigRuleSetConfig', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostFirewallConfigRuleSetConfig', 'HostFirewallConfigRuleSetConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostFirewallConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['rule', 'HostFirewallConfigRuleSetConfig', 1, 0],
   ['defaultBlockingPolicy', 'HostFirewallDefaultPolicy', undef, 1],
);


VIMRuntime::make_get_set('HostFirewallConfig', 'rule', 'defaultBlockingPolicy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostFirewallDefaultPolicy;
our @ISA = qw(DynamicData);

our @property_list = (
   ['incomingBlocked', 'boolean', undef, 0],
   ['outgoingBlocked', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostFirewallDefaultPolicy', 'incomingBlocked', 'outgoingBlocked');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostFirewallInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['defaultPolicy', 'HostFirewallDefaultPolicy', undef, 1],
   ['ruleset', 'HostFirewallRuleset', 1, 0],
);


VIMRuntime::make_get_set('HostFirewallInfo', 'defaultPolicy', 'ruleset');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostFlagInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['backgroundSnapshotsEnabled', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostFlagInfo', 'backgroundSnapshotsEnabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostForceMountedInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['persist', 'boolean', undef, 1],
   ['mounted', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('HostForceMountedInfo', 'persist', 'mounted');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostGatewaySpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['gatewayType', undef, undef, 1],
   ['gatewayId', undef, undef, 0],
   ['trustVerificationToken', undef, undef, 0],
   ['hostAuthParams', 'KeyValue', 1, 0],
);


VIMRuntime::make_get_set('HostGatewaySpec', 'gatewayType', 'gatewayId', 'trustVerificationToken', 'hostAuthParams');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostGraphicsConfigDeviceType;
our @ISA = qw(DynamicData);

our @property_list = (
   ['deviceId', undef, undef, 1],
   ['graphicsType', undef, undef, 1],
);


VIMRuntime::make_get_set('HostGraphicsConfigDeviceType', 'deviceId', 'graphicsType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostGraphicsConfigDeviceType;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostGraphicsConfigDeviceType', 'HostGraphicsConfigDeviceType', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostGraphicsConfigDeviceType', 'HostGraphicsConfigDeviceType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostGraphicsConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['hostDefaultGraphicsType', undef, undef, 1],
   ['sharedPassthruAssignmentPolicy', undef, undef, 1],
   ['deviceType', 'HostGraphicsConfigDeviceType', 1, 0],
);


VIMRuntime::make_get_set('HostGraphicsConfig', 'hostDefaultGraphicsType', 'sharedPassthruAssignmentPolicy', 'deviceType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostGraphicsInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['deviceName', undef, undef, 1],
   ['vendorName', undef, undef, 1],
   ['pciId', undef, undef, 1],
   ['graphicsType', undef, undef, 1],
   ['memorySizeInKB', undef, undef, 1],
   ['vm', 'ManagedObjectReference', 1, 0],
);


VIMRuntime::make_get_set('HostGraphicsInfo', 'deviceName', 'vendorName', 'pciId', 'graphicsType', 'memorySizeInKB', 'vm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostGraphicsInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostGraphicsInfo', 'HostGraphicsInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostGraphicsInfo', 'HostGraphicsInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostHardwareInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['systemInfo', 'HostSystemInfo', undef, 1],
   ['cpuPowerManagementInfo', 'HostCpuPowerManagementInfo', undef, 0],
   ['cpuInfo', 'HostCpuInfo', undef, 1],
   ['cpuPkg', 'HostCpuPackage', 1, 1],
   ['memorySize', undef, undef, 1],
   ['numaInfo', 'HostNumaInfo', undef, 0],
   ['smcPresent', 'boolean', undef, 0],
   ['pciDevice', 'HostPciDevice', 1, 0],
   ['cpuFeature', 'HostCpuIdInfo', 1, 0],
   ['biosInfo', 'HostBIOSInfo', undef, 0],
   ['reliableMemoryInfo', 'HostReliableMemoryInfo', undef, 0],
);


VIMRuntime::make_get_set('HostHardwareInfo', 'systemInfo', 'cpuPowerManagementInfo', 'cpuInfo', 'cpuPkg', 'memorySize', 'numaInfo', 'smcPresent', 'pciDevice', 'cpuFeature', 'biosInfo', 'reliableMemoryInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSystemInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vendor', undef, undef, 1],
   ['model', undef, undef, 1],
   ['uuid', undef, undef, 1],
   ['otherIdentifyingInfo', 'HostSystemIdentificationInfo', 1, 0],
);


VIMRuntime::make_get_set('HostSystemInfo', 'vendor', 'model', 'uuid', 'otherIdentifyingInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostCpuPowerManagementInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['currentPolicy', undef, undef, 0],
   ['hardwareSupport', undef, undef, 0],
);


VIMRuntime::make_get_set('HostCpuPowerManagementInfo', 'currentPolicy', 'hardwareSupport');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostCpuInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['numCpuPackages', undef, undef, 1],
   ['numCpuCores', undef, undef, 1],
   ['numCpuThreads', undef, undef, 1],
   ['hz', undef, undef, 1],
);


VIMRuntime::make_get_set('HostCpuInfo', 'numCpuPackages', 'numCpuCores', 'numCpuThreads', 'hz');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostCpuPackage;
our @ISA = qw(DynamicData);

our @property_list = (
   ['index', undef, undef, 1],
   ['vendor', undef, undef, 1],
   ['hz', undef, undef, 1],
   ['busHz', undef, undef, 1],
   ['description', undef, undef, 1],
   ['threadId', undef, 1, 1],
   ['cpuFeature', 'HostCpuIdInfo', 1, 0],
);


VIMRuntime::make_get_set('HostCpuPackage', 'index', 'vendor', 'hz', 'busHz', 'description', 'threadId', 'cpuFeature');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostCpuPackage;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostCpuPackage', 'HostCpuPackage', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostCpuPackage', 'HostCpuPackage');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNumaInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['type', undef, undef, 1],
   ['numNodes', undef, undef, 1],
   ['numaNode', 'HostNumaNode', 1, 0],
);


VIMRuntime::make_get_set('HostNumaInfo', 'type', 'numNodes', 'numaNode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNumaNode;
our @ISA = qw(DynamicData);

our @property_list = (
   ['typeId', undef, undef, 1],
   ['cpuID', undef, 1, 1],
   ['memoryRangeBegin', undef, undef, 1],
   ['memoryRangeLength', undef, undef, 1],
);


VIMRuntime::make_get_set('HostNumaNode', 'typeId', 'cpuID', 'memoryRangeBegin', 'memoryRangeLength');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostNumaNode;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostNumaNode', 'HostNumaNode', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostNumaNode', 'HostNumaNode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostBIOSInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['biosVersion', undef, undef, 0],
   ['releaseDate', undef, undef, 0],
   ['vendor', undef, undef, 0],
   ['majorRelease', undef, undef, 0],
   ['minorRelease', undef, undef, 0],
   ['firmwareMajorRelease', undef, undef, 0],
   ['firmwareMinorRelease', undef, undef, 0],
);


VIMRuntime::make_get_set('HostBIOSInfo', 'biosVersion', 'releaseDate', 'vendor', 'majorRelease', 'minorRelease', 'firmwareMajorRelease', 'firmwareMinorRelease');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostReliableMemoryInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['memorySize', undef, undef, 1],
);


VIMRuntime::make_get_set('HostReliableMemoryInfo', 'memorySize');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostHardwareElementInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['status', 'ElementDescription', undef, 1],
);


VIMRuntime::make_get_set('HostHardwareElementInfo', 'name', 'status');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostHardwareElementInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostHardwareElementInfo', 'HostHardwareElementInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostHardwareElementInfo', 'HostHardwareElementInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostStorageOperationalInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['property', undef, undef, 1],
   ['value', undef, undef, 1],
);


VIMRuntime::make_get_set('HostStorageOperationalInfo', 'property', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostStorageOperationalInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostStorageOperationalInfo', 'HostStorageOperationalInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostStorageOperationalInfo', 'HostStorageOperationalInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostStorageElementInfo;
our @ISA = qw(HostHardwareElementInfo);

our @property_list = (
   ['operationalInfo', 'HostStorageOperationalInfo', 1, 0],
);


VIMRuntime::make_get_set('HostStorageElementInfo', 'operationalInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostStorageElementInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostStorageElementInfo', 'HostStorageElementInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostStorageElementInfo', 'HostStorageElementInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostHardwareStatusInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['memoryStatusInfo', 'HostHardwareElementInfo', 1, 0],
   ['cpuStatusInfo', 'HostHardwareElementInfo', 1, 0],
   ['storageStatusInfo', 'HostStorageElementInfo', 1, 0],
);


VIMRuntime::make_get_set('HostHardwareStatusInfo', 'memoryStatusInfo', 'cpuStatusInfo', 'storageStatusInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HealthSystemRuntime;
our @ISA = qw(DynamicData);

our @property_list = (
   ['systemHealthInfo', 'HostSystemHealthInfo', undef, 0],
   ['hardwareStatusInfo', 'HostHardwareStatusInfo', undef, 0],
);


VIMRuntime::make_get_set('HealthSystemRuntime', 'systemHealthInfo', 'hardwareStatusInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostAccessControlEntry;
our @ISA = qw(DynamicData);

our @property_list = (
   ['principal', undef, undef, 1],
   ['group', 'boolean', undef, 1],
   ['accessMode', 'HostAccessMode', undef, 1],
);


VIMRuntime::make_get_set('HostAccessControlEntry', 'principal', 'group', 'accessMode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostAccessControlEntry;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostAccessControlEntry', 'HostAccessControlEntry', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostAccessControlEntry', 'HostAccessControlEntry');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostHostBusAdapter;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 0],
   ['device', undef, undef, 1],
   ['bus', undef, undef, 1],
   ['status', undef, undef, 1],
   ['model', undef, undef, 1],
   ['driver', undef, undef, 0],
   ['pci', undef, undef, 0],
);


VIMRuntime::make_get_set('HostHostBusAdapter', 'key', 'device', 'bus', 'status', 'model', 'driver', 'pci');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostHostBusAdapter;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostHostBusAdapter', 'HostHostBusAdapter', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostHostBusAdapter', 'HostHostBusAdapter');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostParallelScsiHba;
our @ISA = qw(HostHostBusAdapter);

our @property_list = (
);


VIMRuntime::make_get_set('HostParallelScsiHba');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSerialAttachedHba;
our @ISA = qw(HostHostBusAdapter);

our @property_list = (
   ['nodeWorldWideName', undef, undef, 1],
);


VIMRuntime::make_get_set('HostSerialAttachedHba', 'nodeWorldWideName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostBlockHba;
our @ISA = qw(HostHostBusAdapter);

our @property_list = (
);


VIMRuntime::make_get_set('HostBlockHba');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostFibreChannelHba;
our @ISA = qw(HostHostBusAdapter);

our @property_list = (
   ['portWorldWideName', undef, undef, 1],
   ['nodeWorldWideName', undef, undef, 1],
   ['portType', 'FibreChannelPortType', undef, 1],
   ['speed', undef, undef, 1],
);


VIMRuntime::make_get_set('HostFibreChannelHba', 'portWorldWideName', 'nodeWorldWideName', 'portType', 'speed');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostInternetScsiHbaParamValue;
our @ISA = qw(OptionValue);

our @property_list = (
   ['isInherited', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostInternetScsiHbaParamValue', 'isInherited');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostInternetScsiHbaParamValue;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostInternetScsiHbaParamValue', 'HostInternetScsiHbaParamValue', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostInternetScsiHbaParamValue', 'HostInternetScsiHbaParamValue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostInternetScsiHbaDiscoveryCapabilities;
our @ISA = qw(DynamicData);

our @property_list = (
   ['iSnsDiscoverySettable', 'boolean', undef, 1],
   ['slpDiscoverySettable', 'boolean', undef, 1],
   ['staticTargetDiscoverySettable', 'boolean', undef, 1],
   ['sendTargetsDiscoverySettable', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('HostInternetScsiHbaDiscoveryCapabilities', 'iSnsDiscoverySettable', 'slpDiscoverySettable', 'staticTargetDiscoverySettable', 'sendTargetsDiscoverySettable');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostInternetScsiHbaDiscoveryProperties;
our @ISA = qw(DynamicData);

our @property_list = (
   ['iSnsDiscoveryEnabled', 'boolean', undef, 1],
   ['iSnsDiscoveryMethod', undef, undef, 0],
   ['iSnsHost', undef, undef, 0],
   ['slpDiscoveryEnabled', 'boolean', undef, 1],
   ['slpDiscoveryMethod', undef, undef, 0],
   ['slpHost', undef, undef, 0],
   ['staticTargetDiscoveryEnabled', 'boolean', undef, 1],
   ['sendTargetsDiscoveryEnabled', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('HostInternetScsiHbaDiscoveryProperties', 'iSnsDiscoveryEnabled', 'iSnsDiscoveryMethod', 'iSnsHost', 'slpDiscoveryEnabled', 'slpDiscoveryMethod', 'slpHost', 'staticTargetDiscoveryEnabled', 'sendTargetsDiscoveryEnabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostInternetScsiHbaAuthenticationCapabilities;
our @ISA = qw(DynamicData);

our @property_list = (
   ['chapAuthSettable', 'boolean', undef, 1],
   ['krb5AuthSettable', 'boolean', undef, 1],
   ['srpAuthSettable', 'boolean', undef, 1],
   ['spkmAuthSettable', 'boolean', undef, 1],
   ['mutualChapSettable', 'boolean', undef, 0],
   ['targetChapSettable', 'boolean', undef, 0],
   ['targetMutualChapSettable', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostInternetScsiHbaAuthenticationCapabilities', 'chapAuthSettable', 'krb5AuthSettable', 'srpAuthSettable', 'spkmAuthSettable', 'mutualChapSettable', 'targetChapSettable', 'targetMutualChapSettable');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostInternetScsiHbaAuthenticationProperties;
our @ISA = qw(DynamicData);

our @property_list = (
   ['chapAuthEnabled', 'boolean', undef, 1],
   ['chapName', undef, undef, 0],
   ['chapSecret', undef, undef, 0],
   ['chapAuthenticationType', undef, undef, 0],
   ['chapInherited', 'boolean', undef, 0],
   ['mutualChapName', undef, undef, 0],
   ['mutualChapSecret', undef, undef, 0],
   ['mutualChapAuthenticationType', undef, undef, 0],
   ['mutualChapInherited', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostInternetScsiHbaAuthenticationProperties', 'chapAuthEnabled', 'chapName', 'chapSecret', 'chapAuthenticationType', 'chapInherited', 'mutualChapName', 'mutualChapSecret', 'mutualChapAuthenticationType', 'mutualChapInherited');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostInternetScsiHbaDigestCapabilities;
our @ISA = qw(DynamicData);

our @property_list = (
   ['headerDigestSettable', 'boolean', undef, 0],
   ['dataDigestSettable', 'boolean', undef, 0],
   ['targetHeaderDigestSettable', 'boolean', undef, 0],
   ['targetDataDigestSettable', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostInternetScsiHbaDigestCapabilities', 'headerDigestSettable', 'dataDigestSettable', 'targetHeaderDigestSettable', 'targetDataDigestSettable');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostInternetScsiHbaDigestProperties;
our @ISA = qw(DynamicData);

our @property_list = (
   ['headerDigestType', undef, undef, 0],
   ['headerDigestInherited', 'boolean', undef, 0],
   ['dataDigestType', undef, undef, 0],
   ['dataDigestInherited', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostInternetScsiHbaDigestProperties', 'headerDigestType', 'headerDigestInherited', 'dataDigestType', 'dataDigestInherited');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostInternetScsiHbaIPCapabilities;
our @ISA = qw(DynamicData);

our @property_list = (
   ['addressSettable', 'boolean', undef, 1],
   ['ipConfigurationMethodSettable', 'boolean', undef, 1],
   ['subnetMaskSettable', 'boolean', undef, 1],
   ['defaultGatewaySettable', 'boolean', undef, 1],
   ['primaryDnsServerAddressSettable', 'boolean', undef, 1],
   ['alternateDnsServerAddressSettable', 'boolean', undef, 1],
   ['ipv6Supported', 'boolean', undef, 0],
   ['arpRedirectSettable', 'boolean', undef, 0],
   ['mtuSettable', 'boolean', undef, 0],
   ['hostNameAsTargetAddress', 'boolean', undef, 0],
   ['nameAliasSettable', 'boolean', undef, 0],
   ['ipv4EnableSettable', 'boolean', undef, 0],
   ['ipv6EnableSettable', 'boolean', undef, 0],
   ['ipv6PrefixLengthSettable', 'boolean', undef, 0],
   ['ipv6PrefixLength', undef, undef, 0],
   ['ipv6DhcpConfigurationSettable', 'boolean', undef, 0],
   ['ipv6LinkLocalAutoConfigurationSettable', 'boolean', undef, 0],
   ['ipv6RouterAdvertisementConfigurationSettable', 'boolean', undef, 0],
   ['ipv6DefaultGatewaySettable', 'boolean', undef, 0],
   ['ipv6MaxStaticAddressesSupported', undef, undef, 0],
);


VIMRuntime::make_get_set('HostInternetScsiHbaIPCapabilities', 'addressSettable', 'ipConfigurationMethodSettable', 'subnetMaskSettable', 'defaultGatewaySettable', 'primaryDnsServerAddressSettable', 'alternateDnsServerAddressSettable', 'ipv6Supported', 'arpRedirectSettable', 'mtuSettable', 'hostNameAsTargetAddress', 'nameAliasSettable', 'ipv4EnableSettable', 'ipv6EnableSettable', 'ipv6PrefixLengthSettable', 'ipv6PrefixLength', 'ipv6DhcpConfigurationSettable', 'ipv6LinkLocalAutoConfigurationSettable', 'ipv6RouterAdvertisementConfigurationSettable', 'ipv6DefaultGatewaySettable', 'ipv6MaxStaticAddressesSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostInternetScsiHbaIscsiIpv6Address;
our @ISA = qw(DynamicData);

our @property_list = (
   ['address', undef, undef, 1],
   ['prefixLength', undef, undef, 1],
   ['origin', undef, undef, 1],
   ['operation', undef, undef, 0],
);


VIMRuntime::make_get_set('HostInternetScsiHbaIscsiIpv6Address', 'address', 'prefixLength', 'origin', 'operation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostInternetScsiHbaIscsiIpv6Address;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostInternetScsiHbaIscsiIpv6Address', 'HostInternetScsiHbaIscsiIpv6Address', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostInternetScsiHbaIscsiIpv6Address', 'HostInternetScsiHbaIscsiIpv6Address');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostInternetScsiHbaIPv6Properties;
our @ISA = qw(DynamicData);

our @property_list = (
   ['iscsiIpv6Address', 'HostInternetScsiHbaIscsiIpv6Address', 1, 0],
   ['ipv6DhcpConfigurationEnabled', 'boolean', undef, 0],
   ['ipv6LinkLocalAutoConfigurationEnabled', 'boolean', undef, 0],
   ['ipv6RouterAdvertisementConfigurationEnabled', 'boolean', undef, 0],
   ['ipv6DefaultGateway', undef, undef, 0],
);


VIMRuntime::make_get_set('HostInternetScsiHbaIPv6Properties', 'iscsiIpv6Address', 'ipv6DhcpConfigurationEnabled', 'ipv6LinkLocalAutoConfigurationEnabled', 'ipv6RouterAdvertisementConfigurationEnabled', 'ipv6DefaultGateway');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostInternetScsiHbaIPProperties;
our @ISA = qw(DynamicData);

our @property_list = (
   ['mac', undef, undef, 0],
   ['address', undef, undef, 0],
   ['dhcpConfigurationEnabled', 'boolean', undef, 1],
   ['subnetMask', undef, undef, 0],
   ['defaultGateway', undef, undef, 0],
   ['primaryDnsServerAddress', undef, undef, 0],
   ['alternateDnsServerAddress', undef, undef, 0],
   ['ipv6Address', undef, undef, 0],
   ['ipv6SubnetMask', undef, undef, 0],
   ['ipv6DefaultGateway', undef, undef, 0],
   ['arpRedirectEnabled', 'boolean', undef, 0],
   ['mtu', undef, undef, 0],
   ['jumboFramesEnabled', 'boolean', undef, 0],
   ['ipv4Enabled', 'boolean', undef, 0],
   ['ipv6Enabled', 'boolean', undef, 0],
   ['ipv6properties', 'HostInternetScsiHbaIPv6Properties', undef, 0],
);


VIMRuntime::make_get_set('HostInternetScsiHbaIPProperties', 'mac', 'address', 'dhcpConfigurationEnabled', 'subnetMask', 'defaultGateway', 'primaryDnsServerAddress', 'alternateDnsServerAddress', 'ipv6Address', 'ipv6SubnetMask', 'ipv6DefaultGateway', 'arpRedirectEnabled', 'mtu', 'jumboFramesEnabled', 'ipv4Enabled', 'ipv6Enabled', 'ipv6properties');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostInternetScsiHbaSendTarget;
our @ISA = qw(DynamicData);

our @property_list = (
   ['address', undef, undef, 1],
   ['port', undef, undef, 0],
   ['authenticationProperties', 'HostInternetScsiHbaAuthenticationProperties', undef, 0],
   ['digestProperties', 'HostInternetScsiHbaDigestProperties', undef, 0],
   ['supportedAdvancedOptions', 'OptionDef', 1, 0],
   ['advancedOptions', 'HostInternetScsiHbaParamValue', 1, 0],
   ['parent', undef, undef, 0],
);


VIMRuntime::make_get_set('HostInternetScsiHbaSendTarget', 'address', 'port', 'authenticationProperties', 'digestProperties', 'supportedAdvancedOptions', 'advancedOptions', 'parent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostInternetScsiHbaSendTarget;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostInternetScsiHbaSendTarget', 'HostInternetScsiHbaSendTarget', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostInternetScsiHbaSendTarget', 'HostInternetScsiHbaSendTarget');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostInternetScsiHbaStaticTarget;
our @ISA = qw(DynamicData);

our @property_list = (
   ['address', undef, undef, 1],
   ['port', undef, undef, 0],
   ['iScsiName', undef, undef, 1],
   ['discoveryMethod', undef, undef, 0],
   ['authenticationProperties', 'HostInternetScsiHbaAuthenticationProperties', undef, 0],
   ['digestProperties', 'HostInternetScsiHbaDigestProperties', undef, 0],
   ['supportedAdvancedOptions', 'OptionDef', 1, 0],
   ['advancedOptions', 'HostInternetScsiHbaParamValue', 1, 0],
   ['parent', undef, undef, 0],
);


VIMRuntime::make_get_set('HostInternetScsiHbaStaticTarget', 'address', 'port', 'iScsiName', 'discoveryMethod', 'authenticationProperties', 'digestProperties', 'supportedAdvancedOptions', 'advancedOptions', 'parent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostInternetScsiHbaStaticTarget;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostInternetScsiHbaStaticTarget', 'HostInternetScsiHbaStaticTarget', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostInternetScsiHbaStaticTarget', 'HostInternetScsiHbaStaticTarget');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostInternetScsiHbaTargetSet;
our @ISA = qw(DynamicData);

our @property_list = (
   ['staticTargets', 'HostInternetScsiHbaStaticTarget', 1, 0],
   ['sendTargets', 'HostInternetScsiHbaSendTarget', 1, 0],
);


VIMRuntime::make_get_set('HostInternetScsiHbaTargetSet', 'staticTargets', 'sendTargets');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostInternetScsiHba;
our @ISA = qw(HostHostBusAdapter);

our @property_list = (
   ['isSoftwareBased', 'boolean', undef, 1],
   ['canBeDisabled', 'boolean', undef, 0],
   ['networkBindingSupport', 'HostInternetScsiHbaNetworkBindingSupportType', undef, 0],
   ['discoveryCapabilities', 'HostInternetScsiHbaDiscoveryCapabilities', undef, 1],
   ['discoveryProperties', 'HostInternetScsiHbaDiscoveryProperties', undef, 1],
   ['authenticationCapabilities', 'HostInternetScsiHbaAuthenticationCapabilities', undef, 1],
   ['authenticationProperties', 'HostInternetScsiHbaAuthenticationProperties', undef, 1],
   ['digestCapabilities', 'HostInternetScsiHbaDigestCapabilities', undef, 0],
   ['digestProperties', 'HostInternetScsiHbaDigestProperties', undef, 0],
   ['ipCapabilities', 'HostInternetScsiHbaIPCapabilities', undef, 1],
   ['ipProperties', 'HostInternetScsiHbaIPProperties', undef, 1],
   ['supportedAdvancedOptions', 'OptionDef', 1, 0],
   ['advancedOptions', 'HostInternetScsiHbaParamValue', 1, 0],
   ['iScsiName', undef, undef, 1],
   ['iScsiAlias', undef, undef, 0],
   ['configuredSendTarget', 'HostInternetScsiHbaSendTarget', 1, 0],
   ['configuredStaticTarget', 'HostInternetScsiHbaStaticTarget', 1, 0],
   ['maxSpeedMb', undef, undef, 0],
   ['currentSpeedMb', undef, undef, 0],
);


VIMRuntime::make_get_set('HostInternetScsiHba', 'isSoftwareBased', 'canBeDisabled', 'networkBindingSupport', 'discoveryCapabilities', 'discoveryProperties', 'authenticationCapabilities', 'authenticationProperties', 'digestCapabilities', 'digestProperties', 'ipCapabilities', 'ipProperties', 'supportedAdvancedOptions', 'advancedOptions', 'iScsiName', 'iScsiAlias', 'configuredSendTarget', 'configuredStaticTarget', 'maxSpeedMb', 'currentSpeedMb');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostFibreChannelOverEthernetHbaLinkInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vnportMac', undef, undef, 1],
   ['fcfMac', undef, undef, 1],
   ['vlanId', undef, undef, 1],
);


VIMRuntime::make_get_set('HostFibreChannelOverEthernetHbaLinkInfo', 'vnportMac', 'fcfMac', 'vlanId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostFibreChannelOverEthernetHba;
our @ISA = qw(HostFibreChannelHba);

our @property_list = (
   ['underlyingNic', undef, undef, 1],
   ['linkInfo', 'HostFibreChannelOverEthernetHbaLinkInfo', undef, 1],
   ['isSoftwareFcoe', 'boolean', undef, 1],
   ['markedForRemoval', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('HostFibreChannelOverEthernetHba', 'underlyingNic', 'linkInfo', 'isSoftwareFcoe', 'markedForRemoval');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostProxySwitchSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['backing', 'DistributedVirtualSwitchHostMemberBacking', undef, 0],
);


VIMRuntime::make_get_set('HostProxySwitchSpec', 'backing');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostProxySwitchConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['changeOperation', undef, undef, 0],
   ['uuid', undef, undef, 1],
   ['spec', 'HostProxySwitchSpec', undef, 0],
);


VIMRuntime::make_get_set('HostProxySwitchConfig', 'changeOperation', 'uuid', 'spec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostProxySwitchConfig;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostProxySwitchConfig', 'HostProxySwitchConfig', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostProxySwitchConfig', 'HostProxySwitchConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostProxySwitchHostLagConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['lagKey', undef, undef, 1],
   ['lagName', undef, undef, 0],
   ['uplinkPort', 'KeyValue', 1, 0],
);


VIMRuntime::make_get_set('HostProxySwitchHostLagConfig', 'lagKey', 'lagName', 'uplinkPort');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostProxySwitchHostLagConfig;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostProxySwitchHostLagConfig', 'HostProxySwitchHostLagConfig', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostProxySwitchHostLagConfig', 'HostProxySwitchHostLagConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostProxySwitch;
our @ISA = qw(DynamicData);

our @property_list = (
   ['dvsUuid', undef, undef, 1],
   ['dvsName', undef, undef, 1],
   ['key', undef, undef, 1],
   ['numPorts', undef, undef, 1],
   ['configNumPorts', undef, undef, 0],
   ['numPortsAvailable', undef, undef, 1],
   ['uplinkPort', 'KeyValue', 1, 0],
   ['mtu', undef, undef, 0],
   ['pnic', undef, 1, 0],
   ['spec', 'HostProxySwitchSpec', undef, 1],
   ['hostLag', 'HostProxySwitchHostLagConfig', 1, 0],
   ['networkReservationSupported', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostProxySwitch', 'dvsUuid', 'dvsName', 'key', 'numPorts', 'configNumPorts', 'numPortsAvailable', 'uplinkPort', 'mtu', 'pnic', 'spec', 'hostLag', 'networkReservationSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostProxySwitch;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostProxySwitch', 'HostProxySwitch', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostProxySwitch', 'HostProxySwitch');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostImageProfileSummary;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['vendor', undef, undef, 1],
);


VIMRuntime::make_get_set('HostImageProfileSummary', 'name', 'vendor');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostIpConfigIpV6Address;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipAddress', undef, undef, 1],
   ['prefixLength', undef, undef, 1],
   ['origin', undef, undef, 0],
   ['dadState', undef, undef, 0],
   ['lifetime', undef, undef, 0],
   ['operation', undef, undef, 0],
);


VIMRuntime::make_get_set('HostIpConfigIpV6Address', 'ipAddress', 'prefixLength', 'origin', 'dadState', 'lifetime', 'operation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostIpConfigIpV6Address;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostIpConfigIpV6Address', 'HostIpConfigIpV6Address', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostIpConfigIpV6Address', 'HostIpConfigIpV6Address');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostIpConfigIpV6AddressConfiguration;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipV6Address', 'HostIpConfigIpV6Address', 1, 0],
   ['autoConfigurationEnabled', 'boolean', undef, 0],
   ['dhcpV6Enabled', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostIpConfigIpV6AddressConfiguration', 'ipV6Address', 'autoConfigurationEnabled', 'dhcpV6Enabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostIpConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['dhcp', 'boolean', undef, 1],
   ['ipAddress', undef, undef, 0],
   ['subnetMask', undef, undef, 0],
   ['ipV6Config', 'HostIpConfigIpV6AddressConfiguration', undef, 0],
);


VIMRuntime::make_get_set('HostIpConfig', 'dhcp', 'ipAddress', 'subnetMask', 'ipV6Config');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostIpRouteConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['defaultGateway', undef, undef, 0],
   ['gatewayDevice', undef, undef, 0],
   ['ipV6DefaultGateway', undef, undef, 0],
   ['ipV6GatewayDevice', undef, undef, 0],
);


VIMRuntime::make_get_set('HostIpRouteConfig', 'defaultGateway', 'gatewayDevice', 'ipV6DefaultGateway', 'ipV6GatewayDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostIpRouteConfigSpec;
our @ISA = qw(HostIpRouteConfig);

our @property_list = (
   ['gatewayDeviceConnection', 'HostVirtualNicConnection', undef, 0],
   ['ipV6GatewayDeviceConnection', 'HostVirtualNicConnection', undef, 0],
);


VIMRuntime::make_get_set('HostIpRouteConfigSpec', 'gatewayDeviceConnection', 'ipV6GatewayDeviceConnection');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostIpRouteEntry;
our @ISA = qw(DynamicData);

our @property_list = (
   ['network', undef, undef, 1],
   ['prefixLength', undef, undef, 1],
   ['gateway', undef, undef, 1],
   ['deviceName', undef, undef, 0],
);


VIMRuntime::make_get_set('HostIpRouteEntry', 'network', 'prefixLength', 'gateway', 'deviceName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostIpRouteEntry;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostIpRouteEntry', 'HostIpRouteEntry', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostIpRouteEntry', 'HostIpRouteEntry');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostIpRouteOp;
our @ISA = qw(DynamicData);

our @property_list = (
   ['changeOperation', undef, undef, 1],
   ['route', 'HostIpRouteEntry', undef, 1],
);


VIMRuntime::make_get_set('HostIpRouteOp', 'changeOperation', 'route');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostIpRouteOp;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostIpRouteOp', 'HostIpRouteOp', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostIpRouteOp', 'HostIpRouteOp');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostIpRouteTableConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipRoute', 'HostIpRouteOp', 1, 0],
   ['ipv6Route', 'HostIpRouteOp', 1, 0],
);


VIMRuntime::make_get_set('HostIpRouteTableConfig', 'ipRoute', 'ipv6Route');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostIpRouteTableInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipRoute', 'HostIpRouteEntry', 1, 0],
   ['ipv6Route', 'HostIpRouteEntry', 1, 0],
);


VIMRuntime::make_get_set('HostIpRouteTableInfo', 'ipRoute', 'ipv6Route');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostIpmiInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['bmcIpAddress', undef, undef, 0],
   ['bmcMacAddress', undef, undef, 0],
   ['login', undef, undef, 0],
   ['password', undef, undef, 0],
);


VIMRuntime::make_get_set('HostIpmiInfo', 'bmcIpAddress', 'bmcMacAddress', 'login', 'password');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IscsiStatus;
our @ISA = qw(DynamicData);

our @property_list = (
   ['reason', 'LocalizedMethodFault', 1, 0],
);


VIMRuntime::make_get_set('IscsiStatus', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IscsiPortInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vnicDevice', undef, undef, 0],
   ['vnic', 'HostVirtualNic', undef, 0],
   ['pnicDevice', undef, undef, 0],
   ['pnic', 'PhysicalNic', undef, 0],
   ['switchName', undef, undef, 0],
   ['switchUuid', undef, undef, 0],
   ['portgroupName', undef, undef, 0],
   ['portgroupKey', undef, undef, 0],
   ['portKey', undef, undef, 0],
   ['opaqueNetworkId', undef, undef, 0],
   ['opaqueNetworkType', undef, undef, 0],
   ['opaqueNetworkName', undef, undef, 0],
   ['externalId', undef, undef, 0],
   ['complianceStatus', 'IscsiStatus', undef, 0],
   ['pathStatus', undef, undef, 0],
);


VIMRuntime::make_get_set('IscsiPortInfo', 'vnicDevice', 'vnic', 'pnicDevice', 'pnic', 'switchName', 'switchUuid', 'portgroupName', 'portgroupKey', 'portKey', 'opaqueNetworkId', 'opaqueNetworkType', 'opaqueNetworkName', 'externalId', 'complianceStatus', 'pathStatus');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfIscsiPortInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['IscsiPortInfo', 'IscsiPortInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfIscsiPortInfo', 'IscsiPortInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IscsiDependencyEntity;
our @ISA = qw(DynamicData);

our @property_list = (
   ['pnicDevice', undef, undef, 1],
   ['vnicDevice', undef, undef, 1],
   ['vmhbaName', undef, undef, 1],
);


VIMRuntime::make_get_set('IscsiDependencyEntity', 'pnicDevice', 'vnicDevice', 'vmhbaName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfIscsiDependencyEntity;
our @ISA = qw(ComplexType);

our @property_list = (
   ['IscsiDependencyEntity', 'IscsiDependencyEntity', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfIscsiDependencyEntity', 'IscsiDependencyEntity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IscsiMigrationDependency;
our @ISA = qw(DynamicData);

our @property_list = (
   ['migrationAllowed', 'boolean', undef, 1],
   ['disallowReason', 'IscsiStatus', undef, 0],
   ['dependency', 'IscsiDependencyEntity', 1, 0],
);


VIMRuntime::make_get_set('IscsiMigrationDependency', 'migrationAllowed', 'disallowReason', 'dependency');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package KernelModuleSectionInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['address', undef, undef, 1],
   ['length', undef, undef, 0],
);


VIMRuntime::make_get_set('KernelModuleSectionInfo', 'address', 'length');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package KernelModuleInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
   ['name', undef, undef, 1],
   ['version', undef, undef, 1],
   ['filename', undef, undef, 1],
   ['optionString', undef, undef, 1],
   ['loaded', 'boolean', undef, 1],
   ['enabled', 'boolean', undef, 1],
   ['useCount', undef, undef, 1],
   ['readOnlySection', 'KernelModuleSectionInfo', undef, 1],
   ['writableSection', 'KernelModuleSectionInfo', undef, 1],
   ['textSection', 'KernelModuleSectionInfo', undef, 1],
   ['dataSection', 'KernelModuleSectionInfo', undef, 1],
   ['bssSection', 'KernelModuleSectionInfo', undef, 1],
);


VIMRuntime::make_get_set('KernelModuleInfo', 'id', 'name', 'version', 'filename', 'optionString', 'loaded', 'enabled', 'useCount', 'readOnlySection', 'writableSection', 'textSection', 'dataSection', 'bssSection');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfKernelModuleInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['KernelModuleInfo', 'KernelModuleInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfKernelModuleInfo', 'KernelModuleInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostLicenseSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['source', 'LicenseSource', undef, 0],
   ['editionKey', undef, undef, 0],
   ['disabledFeatureKey', undef, 1, 0],
   ['enabledFeatureKey', undef, 1, 0],
);


VIMRuntime::make_get_set('HostLicenseSpec', 'source', 'editionKey', 'disabledFeatureKey', 'enabledFeatureKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LinkDiscoveryProtocolConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['protocol', undef, undef, 1],
   ['operation', undef, undef, 1],
);


VIMRuntime::make_get_set('LinkDiscoveryProtocolConfig', 'protocol', 'operation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostAccountSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
   ['password', undef, undef, 0],
   ['description', undef, undef, 0],
);


VIMRuntime::make_get_set('HostAccountSpec', 'id', 'password', 'description');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostAccountSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostAccountSpec', 'HostAccountSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostAccountSpec', 'HostAccountSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPosixAccountSpec;
our @ISA = qw(HostAccountSpec);

our @property_list = (
   ['posixId', undef, undef, 0],
   ['shellAccess', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostPosixAccountSpec', 'posixId', 'shellAccess');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostLocalAuthenticationInfo;
our @ISA = qw(HostAuthenticationStoreInfo);

our @property_list = (
);


VIMRuntime::make_get_set('HostLocalAuthenticationInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostLowLevelProvisioningManagerVmRecoveryInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['version', undef, undef, 1],
   ['biosUUID', undef, undef, 1],
   ['instanceUUID', undef, undef, 1],
   ['ftInfo', 'FaultToleranceConfigInfo', undef, 0],
);


VIMRuntime::make_get_set('HostLowLevelProvisioningManagerVmRecoveryInfo', 'version', 'biosUUID', 'instanceUUID', 'ftInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostLowLevelProvisioningManagerVmMigrationStatus;
our @ISA = qw(DynamicData);

our @property_list = (
   ['migrationId', undef, undef, 1],
   ['type', undef, undef, 1],
   ['source', 'boolean', undef, 1],
   ['consideredSuccessful', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('HostLowLevelProvisioningManagerVmMigrationStatus', 'migrationId', 'type', 'source', 'consideredSuccessful');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostLowLevelProvisioningManagerDiskLayoutSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['controllerType', undef, undef, 1],
   ['busNumber', undef, undef, 1],
   ['unitNumber', undef, undef, 1],
   ['srcFilename', undef, undef, 1],
   ['dstFilename', undef, undef, 1],
);


VIMRuntime::make_get_set('HostLowLevelProvisioningManagerDiskLayoutSpec', 'controllerType', 'busNumber', 'unitNumber', 'srcFilename', 'dstFilename');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostLowLevelProvisioningManagerDiskLayoutSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostLowLevelProvisioningManagerDiskLayoutSpec', 'HostLowLevelProvisioningManagerDiskLayoutSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostLowLevelProvisioningManagerDiskLayoutSpec', 'HostLowLevelProvisioningManagerDiskLayoutSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostLowLevelProvisioningManagerSnapshotLayoutSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
   ['srcFilename', undef, undef, 1],
   ['dstFilename', undef, undef, 1],
   ['disk', 'HostLowLevelProvisioningManagerDiskLayoutSpec', 1, 0],
);


VIMRuntime::make_get_set('HostLowLevelProvisioningManagerSnapshotLayoutSpec', 'id', 'srcFilename', 'dstFilename', 'disk');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostLowLevelProvisioningManagerSnapshotLayoutSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostLowLevelProvisioningManagerSnapshotLayoutSpec', 'HostLowLevelProvisioningManagerSnapshotLayoutSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostLowLevelProvisioningManagerSnapshotLayoutSpec', 'HostLowLevelProvisioningManagerSnapshotLayoutSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostLowLevelProvisioningManagerFileReserveSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['baseName', undef, undef, 1],
   ['parentDir', undef, undef, 1],
   ['fileType', undef, undef, 1],
   ['storageProfile', undef, undef, 1],
);


VIMRuntime::make_get_set('HostLowLevelProvisioningManagerFileReserveSpec', 'baseName', 'parentDir', 'fileType', 'storageProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostLowLevelProvisioningManagerFileReserveSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostLowLevelProvisioningManagerFileReserveSpec', 'HostLowLevelProvisioningManagerFileReserveSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostLowLevelProvisioningManagerFileReserveSpec', 'HostLowLevelProvisioningManagerFileReserveSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostLowLevelProvisioningManagerFileReserveResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['baseName', undef, undef, 1],
   ['parentDir', undef, undef, 1],
   ['reservedName', undef, undef, 1],
);


VIMRuntime::make_get_set('HostLowLevelProvisioningManagerFileReserveResult', 'baseName', 'parentDir', 'reservedName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostLowLevelProvisioningManagerFileReserveResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostLowLevelProvisioningManagerFileReserveResult', 'HostLowLevelProvisioningManagerFileReserveResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostLowLevelProvisioningManagerFileReserveResult', 'HostLowLevelProvisioningManagerFileReserveResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostLowLevelProvisioningManagerFileDeleteSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['fileName', undef, undef, 1],
   ['fileType', undef, undef, 1],
);


VIMRuntime::make_get_set('HostLowLevelProvisioningManagerFileDeleteSpec', 'fileName', 'fileType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostLowLevelProvisioningManagerFileDeleteSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostLowLevelProvisioningManagerFileDeleteSpec', 'HostLowLevelProvisioningManagerFileDeleteSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostLowLevelProvisioningManagerFileDeleteSpec', 'HostLowLevelProvisioningManagerFileDeleteSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostLowLevelProvisioningManagerFileDeleteResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['fileName', undef, undef, 1],
   ['fault', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('HostLowLevelProvisioningManagerFileDeleteResult', 'fileName', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostLowLevelProvisioningManagerFileDeleteResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostLowLevelProvisioningManagerFileDeleteResult', 'HostLowLevelProvisioningManagerFileDeleteResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostLowLevelProvisioningManagerFileDeleteResult', 'HostLowLevelProvisioningManagerFileDeleteResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostMaintenanceSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vsanMode', 'VsanHostDecommissionMode', undef, 0],
);


VIMRuntime::make_get_set('HostMaintenanceSpec', 'vsanMode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ServiceConsoleReservationInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['serviceConsoleReservedCfg', undef, undef, 1],
   ['serviceConsoleReserved', undef, undef, 1],
   ['unreserved', undef, undef, 1],
);


VIMRuntime::make_get_set('ServiceConsoleReservationInfo', 'serviceConsoleReservedCfg', 'serviceConsoleReserved', 'unreserved');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineMemoryReservationInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['virtualMachineMin', undef, undef, 1],
   ['virtualMachineMax', undef, undef, 1],
   ['virtualMachineReserved', undef, undef, 1],
   ['allocationPolicy', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualMachineMemoryReservationInfo', 'virtualMachineMin', 'virtualMachineMax', 'virtualMachineReserved', 'allocationPolicy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineMemoryReservationSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['virtualMachineReserved', undef, undef, 0],
   ['allocationPolicy', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineMemoryReservationSpec', 'virtualMachineReserved', 'allocationPolicy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostMemorySpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['serviceConsoleReservation', undef, undef, 0],
);


VIMRuntime::make_get_set('HostMemorySpec', 'serviceConsoleReservation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostMountInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['path', undef, undef, 0],
   ['accessMode', undef, undef, 1],
   ['mounted', 'boolean', undef, 0],
   ['accessible', 'boolean', undef, 0],
   ['inaccessibleReason', undef, undef, 0],
);


VIMRuntime::make_get_set('HostMountInfo', 'path', 'accessMode', 'mounted', 'accessible', 'inaccessibleReason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostMultipathInfoLogicalUnitPolicy;
our @ISA = qw(DynamicData);

our @property_list = (
   ['policy', undef, undef, 1],
);


VIMRuntime::make_get_set('HostMultipathInfoLogicalUnitPolicy', 'policy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostMultipathInfoLogicalUnitStorageArrayTypePolicy;
our @ISA = qw(DynamicData);

our @property_list = (
   ['policy', undef, undef, 1],
);


VIMRuntime::make_get_set('HostMultipathInfoLogicalUnitStorageArrayTypePolicy', 'policy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostMultipathInfoFixedLogicalUnitPolicy;
our @ISA = qw(HostMultipathInfoLogicalUnitPolicy);

our @property_list = (
   ['prefer', undef, undef, 1],
);


VIMRuntime::make_get_set('HostMultipathInfoFixedLogicalUnitPolicy', 'prefer');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostMultipathInfoLogicalUnit;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['id', undef, undef, 1],
   ['lun', undef, undef, 1],
   ['path', 'HostMultipathInfoPath', 1, 1],
   ['policy', 'HostMultipathInfoLogicalUnitPolicy', undef, 1],
   ['storageArrayTypePolicy', 'HostMultipathInfoLogicalUnitStorageArrayTypePolicy', undef, 0],
);


VIMRuntime::make_get_set('HostMultipathInfoLogicalUnit', 'key', 'id', 'lun', 'path', 'policy', 'storageArrayTypePolicy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostMultipathInfoLogicalUnit;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostMultipathInfoLogicalUnit', 'HostMultipathInfoLogicalUnit', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostMultipathInfoLogicalUnit', 'HostMultipathInfoLogicalUnit');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostMultipathInfoPath;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['name', undef, undef, 1],
   ['pathState', undef, undef, 1],
   ['state', undef, undef, 0],
   ['isWorkingPath', 'boolean', undef, 0],
   ['adapter', undef, undef, 1],
   ['lun', undef, undef, 1],
   ['transport', 'HostTargetTransport', undef, 0],
);


VIMRuntime::make_get_set('HostMultipathInfoPath', 'key', 'name', 'pathState', 'state', 'isWorkingPath', 'adapter', 'lun', 'transport');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostMultipathInfoPath;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostMultipathInfoPath', 'HostMultipathInfoPath', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostMultipathInfoPath', 'HostMultipathInfoPath');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostMultipathInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['lun', 'HostMultipathInfoLogicalUnit', 1, 0],
);


VIMRuntime::make_get_set('HostMultipathInfo', 'lun');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostMultipathStateInfoPath;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['pathState', undef, undef, 1],
);


VIMRuntime::make_get_set('HostMultipathStateInfoPath', 'name', 'pathState');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostMultipathStateInfoPath;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostMultipathStateInfoPath', 'HostMultipathStateInfoPath', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostMultipathStateInfoPath', 'HostMultipathStateInfoPath');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostMultipathStateInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['path', 'HostMultipathStateInfoPath', 1, 0],
);


VIMRuntime::make_get_set('HostMultipathStateInfo', 'path');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNatServicePortForwardSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['type', undef, undef, 1],
   ['name', undef, undef, 1],
   ['hostPort', undef, undef, 1],
   ['guestPort', undef, undef, 1],
   ['guestIpAddress', undef, undef, 1],
);


VIMRuntime::make_get_set('HostNatServicePortForwardSpec', 'type', 'name', 'hostPort', 'guestPort', 'guestIpAddress');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostNatServicePortForwardSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostNatServicePortForwardSpec', 'HostNatServicePortForwardSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostNatServicePortForwardSpec', 'HostNatServicePortForwardSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNatServiceNameServiceSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['dnsAutoDetect', 'boolean', undef, 1],
   ['dnsPolicy', undef, undef, 1],
   ['dnsRetries', undef, undef, 1],
   ['dnsTimeout', undef, undef, 1],
   ['dnsNameServer', undef, 1, 0],
   ['nbdsTimeout', undef, undef, 1],
   ['nbnsRetries', undef, undef, 1],
   ['nbnsTimeout', undef, undef, 1],
);


VIMRuntime::make_get_set('HostNatServiceNameServiceSpec', 'dnsAutoDetect', 'dnsPolicy', 'dnsRetries', 'dnsTimeout', 'dnsNameServer', 'nbdsTimeout', 'nbnsRetries', 'nbnsTimeout');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNatServiceSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['virtualSwitch', undef, undef, 1],
   ['activeFtp', 'boolean', undef, 1],
   ['allowAnyOui', 'boolean', undef, 1],
   ['configPort', 'boolean', undef, 1],
   ['ipGatewayAddress', undef, undef, 1],
   ['udpTimeout', undef, undef, 1],
   ['portForward', 'HostNatServicePortForwardSpec', 1, 0],
   ['nameService', 'HostNatServiceNameServiceSpec', undef, 0],
);


VIMRuntime::make_get_set('HostNatServiceSpec', 'virtualSwitch', 'activeFtp', 'allowAnyOui', 'configPort', 'ipGatewayAddress', 'udpTimeout', 'portForward', 'nameService');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNatServiceConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['changeOperation', undef, undef, 0],
   ['key', undef, undef, 1],
   ['spec', 'HostNatServiceSpec', undef, 1],
);


VIMRuntime::make_get_set('HostNatServiceConfig', 'changeOperation', 'key', 'spec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostNatServiceConfig;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostNatServiceConfig', 'HostNatServiceConfig', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostNatServiceConfig', 'HostNatServiceConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNatService;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['spec', 'HostNatServiceSpec', undef, 1],
);


VIMRuntime::make_get_set('HostNatService', 'key', 'spec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostNatService;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostNatService', 'HostNatService', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostNatService', 'HostNatService');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNetCapabilities;
our @ISA = qw(DynamicData);

our @property_list = (
   ['canSetPhysicalNicLinkSpeed', 'boolean', undef, 1],
   ['supportsNicTeaming', 'boolean', undef, 1],
   ['nicTeamingPolicy', undef, 1, 0],
   ['supportsVlan', 'boolean', undef, 1],
   ['usesServiceConsoleNic', 'boolean', undef, 1],
   ['supportsNetworkHints', 'boolean', undef, 1],
   ['maxPortGroupsPerVswitch', undef, undef, 0],
   ['vswitchConfigSupported', 'boolean', undef, 1],
   ['vnicConfigSupported', 'boolean', undef, 1],
   ['ipRouteConfigSupported', 'boolean', undef, 1],
   ['dnsConfigSupported', 'boolean', undef, 1],
   ['dhcpOnVnicSupported', 'boolean', undef, 1],
   ['ipV6Supported', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostNetCapabilities', 'canSetPhysicalNicLinkSpeed', 'supportsNicTeaming', 'nicTeamingPolicy', 'supportsVlan', 'usesServiceConsoleNic', 'supportsNetworkHints', 'maxPortGroupsPerVswitch', 'vswitchConfigSupported', 'vnicConfigSupported', 'ipRouteConfigSupported', 'dnsConfigSupported', 'dhcpOnVnicSupported', 'ipV6Supported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNetOffloadCapabilities;
our @ISA = qw(DynamicData);

our @property_list = (
   ['csumOffload', 'boolean', undef, 0],
   ['tcpSegmentation', 'boolean', undef, 0],
   ['zeroCopyXmit', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostNetOffloadCapabilities', 'csumOffload', 'tcpSegmentation', 'zeroCopyXmit');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNetStackInstance;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 0],
   ['name', undef, undef, 0],
   ['dnsConfig', 'HostDnsConfig', undef, 0],
   ['ipRouteConfig', 'HostIpRouteConfig', undef, 0],
   ['requestedMaxNumberOfConnections', undef, undef, 0],
   ['congestionControlAlgorithm', undef, undef, 0],
   ['ipV6Enabled', 'boolean', undef, 0],
   ['routeTableConfig', 'HostIpRouteTableConfig', undef, 0],
);


VIMRuntime::make_get_set('HostNetStackInstance', 'key', 'name', 'dnsConfig', 'ipRouteConfig', 'requestedMaxNumberOfConnections', 'congestionControlAlgorithm', 'ipV6Enabled', 'routeTableConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostNetStackInstance;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostNetStackInstance', 'HostNetStackInstance', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostNetStackInstance', 'HostNetStackInstance');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNetworkConfigResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vnicDevice', undef, 1, 0],
   ['consoleVnicDevice', undef, 1, 0],
);


VIMRuntime::make_get_set('HostNetworkConfigResult', 'vnicDevice', 'consoleVnicDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNetworkConfigNetStackSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['netStackInstance', 'HostNetStackInstance', undef, 1],
   ['operation', undef, undef, 0],
);


VIMRuntime::make_get_set('HostNetworkConfigNetStackSpec', 'netStackInstance', 'operation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostNetworkConfigNetStackSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostNetworkConfigNetStackSpec', 'HostNetworkConfigNetStackSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostNetworkConfigNetStackSpec', 'HostNetworkConfigNetStackSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNetworkConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vswitch', 'HostVirtualSwitchConfig', 1, 0],
   ['proxySwitch', 'HostProxySwitchConfig', 1, 0],
   ['portgroup', 'HostPortGroupConfig', 1, 0],
   ['pnic', 'PhysicalNicConfig', 1, 0],
   ['vnic', 'HostVirtualNicConfig', 1, 0],
   ['consoleVnic', 'HostVirtualNicConfig', 1, 0],
   ['dnsConfig', 'HostDnsConfig', undef, 0],
   ['ipRouteConfig', 'HostIpRouteConfig', undef, 0],
   ['consoleIpRouteConfig', 'HostIpRouteConfig', undef, 0],
   ['routeTableConfig', 'HostIpRouteTableConfig', undef, 0],
   ['dhcp', 'HostDhcpServiceConfig', 1, 0],
   ['nat', 'HostNatServiceConfig', 1, 0],
   ['ipV6Enabled', 'boolean', undef, 0],
   ['netStackSpec', 'HostNetworkConfigNetStackSpec', 1, 0],
);


VIMRuntime::make_get_set('HostNetworkConfig', 'vswitch', 'proxySwitch', 'portgroup', 'pnic', 'vnic', 'consoleVnic', 'dnsConfig', 'ipRouteConfig', 'consoleIpRouteConfig', 'routeTableConfig', 'dhcp', 'nat', 'ipV6Enabled', 'netStackSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNetworkInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vswitch', 'HostVirtualSwitch', 1, 0],
   ['proxySwitch', 'HostProxySwitch', 1, 0],
   ['portgroup', 'HostPortGroup', 1, 0],
   ['pnic', 'PhysicalNic', 1, 0],
   ['vnic', 'HostVirtualNic', 1, 0],
   ['consoleVnic', 'HostVirtualNic', 1, 0],
   ['dnsConfig', 'HostDnsConfig', undef, 0],
   ['ipRouteConfig', 'HostIpRouteConfig', undef, 0],
   ['consoleIpRouteConfig', 'HostIpRouteConfig', undef, 0],
   ['routeTableInfo', 'HostIpRouteTableInfo', undef, 0],
   ['dhcp', 'HostDhcpService', 1, 0],
   ['nat', 'HostNatService', 1, 0],
   ['ipV6Enabled', 'boolean', undef, 0],
   ['atBootIpV6Enabled', 'boolean', undef, 0],
   ['netStackInstance', 'HostNetStackInstance', 1, 0],
   ['opaqueSwitch', 'HostOpaqueSwitch', 1, 0],
   ['opaqueNetwork', 'HostOpaqueNetworkInfo', 1, 0],
);


VIMRuntime::make_get_set('HostNetworkInfo', 'vswitch', 'proxySwitch', 'portgroup', 'pnic', 'vnic', 'consoleVnic', 'dnsConfig', 'ipRouteConfig', 'consoleIpRouteConfig', 'routeTableInfo', 'dhcp', 'nat', 'ipV6Enabled', 'atBootIpV6Enabled', 'netStackInstance', 'opaqueSwitch', 'opaqueNetwork');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNetworkSecurityPolicy;
our @ISA = qw(DynamicData);

our @property_list = (
   ['allowPromiscuous', 'boolean', undef, 0],
   ['macChanges', 'boolean', undef, 0],
   ['forgedTransmits', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostNetworkSecurityPolicy', 'allowPromiscuous', 'macChanges', 'forgedTransmits');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNetworkTrafficShapingPolicy;
our @ISA = qw(DynamicData);

our @property_list = (
   ['enabled', 'boolean', undef, 0],
   ['averageBandwidth', undef, undef, 0],
   ['peakBandwidth', undef, undef, 0],
   ['burstSize', undef, undef, 0],
);


VIMRuntime::make_get_set('HostNetworkTrafficShapingPolicy', 'enabled', 'averageBandwidth', 'peakBandwidth', 'burstSize');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNicFailureCriteria;
our @ISA = qw(DynamicData);

our @property_list = (
   ['checkSpeed', undef, undef, 0],
   ['speed', undef, undef, 0],
   ['checkDuplex', 'boolean', undef, 0],
   ['fullDuplex', 'boolean', undef, 0],
   ['checkErrorPercent', 'boolean', undef, 0],
   ['percentage', undef, undef, 0],
   ['checkBeacon', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostNicFailureCriteria', 'checkSpeed', 'speed', 'checkDuplex', 'fullDuplex', 'checkErrorPercent', 'percentage', 'checkBeacon');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNicOrderPolicy;
our @ISA = qw(DynamicData);

our @property_list = (
   ['activeNic', undef, 1, 0],
   ['standbyNic', undef, 1, 0],
);


VIMRuntime::make_get_set('HostNicOrderPolicy', 'activeNic', 'standbyNic');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNicTeamingPolicy;
our @ISA = qw(DynamicData);

our @property_list = (
   ['policy', undef, undef, 0],
   ['reversePolicy', 'boolean', undef, 0],
   ['notifySwitches', 'boolean', undef, 0],
   ['rollingOrder', 'boolean', undef, 0],
   ['failureCriteria', 'HostNicFailureCriteria', undef, 0],
   ['nicOrder', 'HostNicOrderPolicy', undef, 0],
);


VIMRuntime::make_get_set('HostNicTeamingPolicy', 'policy', 'reversePolicy', 'notifySwitches', 'rollingOrder', 'failureCriteria', 'nicOrder');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNetworkPolicy;
our @ISA = qw(DynamicData);

our @property_list = (
   ['security', 'HostNetworkSecurityPolicy', undef, 0],
   ['nicTeaming', 'HostNicTeamingPolicy', undef, 0],
   ['offloadPolicy', 'HostNetOffloadCapabilities', undef, 0],
   ['shapingPolicy', 'HostNetworkTrafficShapingPolicy', undef, 0],
);


VIMRuntime::make_get_set('HostNetworkPolicy', 'security', 'nicTeaming', 'offloadPolicy', 'shapingPolicy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNtpConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['server', undef, 1, 0],
   ['configFile', undef, 1, 0],
);


VIMRuntime::make_get_set('HostNtpConfig', 'server', 'configFile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNumericSensorInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['healthState', 'ElementDescription', undef, 0],
   ['currentReading', undef, undef, 1],
   ['unitModifier', undef, undef, 1],
   ['baseUnits', undef, undef, 1],
   ['rateUnits', undef, undef, 0],
   ['sensorType', undef, undef, 1],
   ['id', undef, undef, 0],
   ['timeStamp', undef, undef, 0],
);


VIMRuntime::make_get_set('HostNumericSensorInfo', 'name', 'healthState', 'currentReading', 'unitModifier', 'baseUnits', 'rateUnits', 'sensorType', 'id', 'timeStamp');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostNumericSensorInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostNumericSensorInfo', 'HostNumericSensorInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostNumericSensorInfo', 'HostNumericSensorInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostOpaqueNetworkInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['opaqueNetworkId', undef, undef, 1],
   ['opaqueNetworkName', undef, undef, 1],
   ['opaqueNetworkType', undef, undef, 1],
   ['pnicZone', undef, 1, 0],
   ['capability', 'OpaqueNetworkCapability', undef, 0],
   ['extraConfig', 'OptionValue', 1, 0],
);


VIMRuntime::make_get_set('HostOpaqueNetworkInfo', 'opaqueNetworkId', 'opaqueNetworkName', 'opaqueNetworkType', 'pnicZone', 'capability', 'extraConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostOpaqueNetworkInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostOpaqueNetworkInfo', 'HostOpaqueNetworkInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostOpaqueNetworkInfo', 'HostOpaqueNetworkInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostOpaqueSwitchPhysicalNicZone;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['pnicDevice', undef, 1, 0],
);


VIMRuntime::make_get_set('HostOpaqueSwitchPhysicalNicZone', 'key', 'pnicDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostOpaqueSwitchPhysicalNicZone;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostOpaqueSwitchPhysicalNicZone', 'HostOpaqueSwitchPhysicalNicZone', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostOpaqueSwitchPhysicalNicZone', 'HostOpaqueSwitchPhysicalNicZone');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostOpaqueSwitch;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['name', undef, undef, 0],
   ['pnic', undef, 1, 0],
   ['pnicZone', 'HostOpaqueSwitchPhysicalNicZone', 1, 0],
   ['status', undef, undef, 0],
   ['vtep', 'HostVirtualNic', 1, 0],
   ['extraConfig', 'OptionValue', 1, 0],
);


VIMRuntime::make_get_set('HostOpaqueSwitch', 'key', 'name', 'pnic', 'pnicZone', 'status', 'vtep', 'extraConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostOpaqueSwitch;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostOpaqueSwitch', 'HostOpaqueSwitch', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostOpaqueSwitch', 'HostOpaqueSwitch');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPatchManagerResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['version', undef, undef, 1],
   ['status', 'HostPatchManagerStatus', 1, 0],
   ['xmlResult', undef, undef, 0],
);


VIMRuntime::make_get_set('HostPatchManagerResult', 'version', 'status', 'xmlResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPatchManagerStatusPrerequisitePatch;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
   ['installState', undef, 1, 0],
);


VIMRuntime::make_get_set('HostPatchManagerStatusPrerequisitePatch', 'id', 'installState');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostPatchManagerStatusPrerequisitePatch;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostPatchManagerStatusPrerequisitePatch', 'HostPatchManagerStatusPrerequisitePatch', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostPatchManagerStatusPrerequisitePatch', 'HostPatchManagerStatusPrerequisitePatch');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPatchManagerStatus;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
   ['applicable', 'boolean', undef, 1],
   ['reason', undef, 1, 0],
   ['integrity', undef, undef, 0],
   ['installed', 'boolean', undef, 1],
   ['installState', undef, 1, 0],
   ['prerequisitePatch', 'HostPatchManagerStatusPrerequisitePatch', 1, 0],
   ['restartRequired', 'boolean', undef, 1],
   ['reconnectRequired', 'boolean', undef, 1],
   ['vmOffRequired', 'boolean', undef, 1],
   ['supersededPatchIds', undef, 1, 0],
);


VIMRuntime::make_get_set('HostPatchManagerStatus', 'id', 'applicable', 'reason', 'integrity', 'installed', 'installState', 'prerequisitePatch', 'restartRequired', 'reconnectRequired', 'vmOffRequired', 'supersededPatchIds');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostPatchManagerStatus;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostPatchManagerStatus', 'HostPatchManagerStatus', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostPatchManagerStatus', 'HostPatchManagerStatus');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPatchManagerLocator;
our @ISA = qw(DynamicData);

our @property_list = (
   ['url', undef, undef, 1],
   ['proxy', undef, undef, 0],
);


VIMRuntime::make_get_set('HostPatchManagerLocator', 'url', 'proxy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPatchManagerPatchManagerOperationSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['proxy', undef, undef, 0],
   ['port', undef, undef, 0],
   ['userName', undef, undef, 0],
   ['password', undef, undef, 0],
   ['cmdOption', undef, undef, 0],
);


VIMRuntime::make_get_set('HostPatchManagerPatchManagerOperationSpec', 'proxy', 'port', 'userName', 'password', 'cmdOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPathSelectionPolicyOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['policy', 'ElementDescription', undef, 1],
);


VIMRuntime::make_get_set('HostPathSelectionPolicyOption', 'policy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostPathSelectionPolicyOption;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostPathSelectionPolicyOption', 'HostPathSelectionPolicyOption', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostPathSelectionPolicyOption', 'HostPathSelectionPolicyOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPciDevice;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
   ['classId', undef, undef, 1],
   ['bus', undef, undef, 1],
   ['slot', undef, undef, 1],
   ['function', undef, undef, 1],
   ['vendorId', undef, undef, 1],
   ['subVendorId', undef, undef, 1],
   ['vendorName', undef, undef, 1],
   ['deviceId', undef, undef, 1],
   ['subDeviceId', undef, undef, 1],
   ['parentBridge', undef, undef, 0],
   ['deviceName', undef, undef, 1],
);


VIMRuntime::make_get_set('HostPciDevice', 'id', 'classId', 'bus', 'slot', 'function', 'vendorId', 'subVendorId', 'vendorName', 'deviceId', 'subDeviceId', 'parentBridge', 'deviceName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostPciDevice;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostPciDevice', 'HostPciDevice', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostPciDevice', 'HostPciDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPciPassthruConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
   ['passthruEnabled', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('HostPciPassthruConfig', 'id', 'passthruEnabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostPciPassthruConfig;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostPciPassthruConfig', 'HostPciPassthruConfig', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostPciPassthruConfig', 'HostPciPassthruConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPciPassthruInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
   ['dependentDevice', undef, undef, 1],
   ['passthruEnabled', 'boolean', undef, 1],
   ['passthruCapable', 'boolean', undef, 1],
   ['passthruActive', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('HostPciPassthruInfo', 'id', 'dependentDevice', 'passthruEnabled', 'passthruCapable', 'passthruActive');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostPciPassthruInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostPciPassthruInfo', 'HostPciPassthruInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostPciPassthruInfo', 'HostPciPassthruInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PhysicalNicSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ip', 'HostIpConfig', undef, 0],
   ['linkSpeed', 'PhysicalNicLinkInfo', undef, 0],
);


VIMRuntime::make_get_set('PhysicalNicSpec', 'ip', 'linkSpeed');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PhysicalNicConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['device', undef, undef, 1],
   ['spec', 'PhysicalNicSpec', undef, 1],
);


VIMRuntime::make_get_set('PhysicalNicConfig', 'device', 'spec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPhysicalNicConfig;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PhysicalNicConfig', 'PhysicalNicConfig', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPhysicalNicConfig', 'PhysicalNicConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PhysicalNicLinkInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['speedMb', undef, undef, 1],
   ['duplex', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('PhysicalNicLinkInfo', 'speedMb', 'duplex');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPhysicalNicLinkInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PhysicalNicLinkInfo', 'PhysicalNicLinkInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPhysicalNicLinkInfo', 'PhysicalNicLinkInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PhysicalNicHint;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vlanId', undef, undef, 0],
);


VIMRuntime::make_get_set('PhysicalNicHint', 'vlanId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PhysicalNicIpHint;
our @ISA = qw(PhysicalNicHint);

our @property_list = (
   ['ipSubnet', undef, undef, 1],
);


VIMRuntime::make_get_set('PhysicalNicIpHint', 'ipSubnet');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPhysicalNicIpHint;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PhysicalNicIpHint', 'PhysicalNicIpHint', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPhysicalNicIpHint', 'PhysicalNicIpHint');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PhysicalNicNameHint;
our @ISA = qw(PhysicalNicHint);

our @property_list = (
   ['network', undef, undef, 1],
);


VIMRuntime::make_get_set('PhysicalNicNameHint', 'network');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPhysicalNicNameHint;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PhysicalNicNameHint', 'PhysicalNicNameHint', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPhysicalNicNameHint', 'PhysicalNicNameHint');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PhysicalNicHintInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['device', undef, undef, 1],
   ['subnet', 'PhysicalNicIpHint', 1, 0],
   ['network', 'PhysicalNicNameHint', 1, 0],
   ['connectedSwitchPort', 'PhysicalNicCdpInfo', undef, 0],
   ['lldpInfo', 'LinkLayerDiscoveryProtocolInfo', undef, 0],
);


VIMRuntime::make_get_set('PhysicalNicHintInfo', 'device', 'subnet', 'network', 'connectedSwitchPort', 'lldpInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPhysicalNicHintInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PhysicalNicHintInfo', 'PhysicalNicHintInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPhysicalNicHintInfo', 'PhysicalNicHintInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PhysicalNicCdpDeviceCapability;
our @ISA = qw(DynamicData);

our @property_list = (
   ['router', 'boolean', undef, 1],
   ['transparentBridge', 'boolean', undef, 1],
   ['sourceRouteBridge', 'boolean', undef, 1],
   ['networkSwitch', 'boolean', undef, 1],
   ['host', 'boolean', undef, 1],
   ['igmpEnabled', 'boolean', undef, 1],
   ['repeater', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('PhysicalNicCdpDeviceCapability', 'router', 'transparentBridge', 'sourceRouteBridge', 'networkSwitch', 'host', 'igmpEnabled', 'repeater');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PhysicalNicCdpInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['cdpVersion', undef, undef, 0],
   ['timeout', undef, undef, 0],
   ['ttl', undef, undef, 0],
   ['samples', undef, undef, 0],
   ['devId', undef, undef, 0],
   ['address', undef, undef, 0],
   ['portId', undef, undef, 0],
   ['deviceCapability', 'PhysicalNicCdpDeviceCapability', undef, 0],
   ['softwareVersion', undef, undef, 0],
   ['hardwarePlatform', undef, undef, 0],
   ['ipPrefix', undef, undef, 0],
   ['ipPrefixLen', undef, undef, 0],
   ['vlan', undef, undef, 0],
   ['fullDuplex', 'boolean', undef, 0],
   ['mtu', undef, undef, 0],
   ['systemName', undef, undef, 0],
   ['systemOID', undef, undef, 0],
   ['mgmtAddr', undef, undef, 0],
   ['location', undef, undef, 0],
);


VIMRuntime::make_get_set('PhysicalNicCdpInfo', 'cdpVersion', 'timeout', 'ttl', 'samples', 'devId', 'address', 'portId', 'deviceCapability', 'softwareVersion', 'hardwarePlatform', 'ipPrefix', 'ipPrefixLen', 'vlan', 'fullDuplex', 'mtu', 'systemName', 'systemOID', 'mgmtAddr', 'location');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LinkLayerDiscoveryProtocolInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['chassisId', undef, undef, 1],
   ['portId', undef, undef, 1],
   ['timeToLive', undef, undef, 1],
   ['parameter', 'KeyAnyValue', 1, 0],
);


VIMRuntime::make_get_set('LinkLayerDiscoveryProtocolInfo', 'chassisId', 'portId', 'timeToLive', 'parameter');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PhysicalNic;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 0],
   ['device', undef, undef, 1],
   ['pci', undef, undef, 1],
   ['driver', undef, undef, 0],
   ['linkSpeed', 'PhysicalNicLinkInfo', undef, 0],
   ['validLinkSpecification', 'PhysicalNicLinkInfo', 1, 0],
   ['spec', 'PhysicalNicSpec', undef, 1],
   ['wakeOnLanSupported', 'boolean', undef, 1],
   ['mac', undef, undef, 1],
   ['fcoeConfiguration', 'FcoeConfig', undef, 0],
   ['vmDirectPathGen2Supported', 'boolean', undef, 0],
   ['vmDirectPathGen2SupportedMode', undef, undef, 0],
   ['resourcePoolSchedulerAllowed', 'boolean', undef, 0],
   ['resourcePoolSchedulerDisallowedReason', undef, 1, 0],
   ['autoNegotiateSupported', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('PhysicalNic', 'key', 'device', 'pci', 'driver', 'linkSpeed', 'validLinkSpecification', 'spec', 'wakeOnLanSupported', 'mac', 'fcoeConfiguration', 'vmDirectPathGen2Supported', 'vmDirectPathGen2SupportedMode', 'resourcePoolSchedulerAllowed', 'resourcePoolSchedulerDisallowedReason', 'autoNegotiateSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPhysicalNic;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PhysicalNic', 'PhysicalNic', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPhysicalNic', 'PhysicalNic');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPlugStoreTopologyAdapter;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['adapter', undef, undef, 1],
   ['path', undef, 1, 0],
);


VIMRuntime::make_get_set('HostPlugStoreTopologyAdapter', 'key', 'adapter', 'path');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostPlugStoreTopologyAdapter;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostPlugStoreTopologyAdapter', 'HostPlugStoreTopologyAdapter', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostPlugStoreTopologyAdapter', 'HostPlugStoreTopologyAdapter');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPlugStoreTopologyPath;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['name', undef, undef, 1],
   ['channelNumber', undef, undef, 0],
   ['targetNumber', undef, undef, 0],
   ['lunNumber', undef, undef, 0],
   ['adapter', undef, undef, 0],
   ['target', undef, undef, 0],
   ['device', undef, undef, 0],
);


VIMRuntime::make_get_set('HostPlugStoreTopologyPath', 'key', 'name', 'channelNumber', 'targetNumber', 'lunNumber', 'adapter', 'target', 'device');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostPlugStoreTopologyPath;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostPlugStoreTopologyPath', 'HostPlugStoreTopologyPath', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostPlugStoreTopologyPath', 'HostPlugStoreTopologyPath');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPlugStoreTopologyDevice;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['lun', undef, undef, 1],
   ['path', undef, 1, 0],
);


VIMRuntime::make_get_set('HostPlugStoreTopologyDevice', 'key', 'lun', 'path');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostPlugStoreTopologyDevice;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostPlugStoreTopologyDevice', 'HostPlugStoreTopologyDevice', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostPlugStoreTopologyDevice', 'HostPlugStoreTopologyDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPlugStoreTopologyPlugin;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['name', undef, undef, 1],
   ['device', undef, 1, 0],
   ['claimedPath', undef, 1, 0],
);


VIMRuntime::make_get_set('HostPlugStoreTopologyPlugin', 'key', 'name', 'device', 'claimedPath');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostPlugStoreTopologyPlugin;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostPlugStoreTopologyPlugin', 'HostPlugStoreTopologyPlugin', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostPlugStoreTopologyPlugin', 'HostPlugStoreTopologyPlugin');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPlugStoreTopologyTarget;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['transport', 'HostTargetTransport', undef, 0],
);


VIMRuntime::make_get_set('HostPlugStoreTopologyTarget', 'key', 'transport');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostPlugStoreTopologyTarget;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostPlugStoreTopologyTarget', 'HostPlugStoreTopologyTarget', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostPlugStoreTopologyTarget', 'HostPlugStoreTopologyTarget');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPlugStoreTopology;
our @ISA = qw(DynamicData);

our @property_list = (
   ['adapter', 'HostPlugStoreTopologyAdapter', 1, 0],
   ['path', 'HostPlugStoreTopologyPath', 1, 0],
   ['target', 'HostPlugStoreTopologyTarget', 1, 0],
   ['device', 'HostPlugStoreTopologyDevice', 1, 0],
   ['plugin', 'HostPlugStoreTopologyPlugin', 1, 0],
);


VIMRuntime::make_get_set('HostPlugStoreTopology', 'adapter', 'path', 'target', 'device', 'plugin');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPortGroupSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['vlanId', undef, undef, 1],
   ['vswitchName', undef, undef, 1],
   ['policy', 'HostNetworkPolicy', undef, 1],
);


VIMRuntime::make_get_set('HostPortGroupSpec', 'name', 'vlanId', 'vswitchName', 'policy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPortGroupConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['changeOperation', undef, undef, 0],
   ['spec', 'HostPortGroupSpec', undef, 0],
);


VIMRuntime::make_get_set('HostPortGroupConfig', 'changeOperation', 'spec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostPortGroupConfig;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostPortGroupConfig', 'HostPortGroupConfig', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostPortGroupConfig', 'HostPortGroupConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPortGroupPort;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 0],
   ['mac', undef, 1, 0],
   ['type', undef, undef, 1],
);


VIMRuntime::make_get_set('HostPortGroupPort', 'key', 'mac', 'type');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostPortGroupPort;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostPortGroupPort', 'HostPortGroupPort', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostPortGroupPort', 'HostPortGroupPort');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPortGroup;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 0],
   ['port', 'HostPortGroupPort', 1, 0],
   ['vswitch', undef, undef, 0],
   ['computedPolicy', 'HostNetworkPolicy', undef, 1],
   ['spec', 'HostPortGroupSpec', undef, 1],
);


VIMRuntime::make_get_set('HostPortGroup', 'key', 'port', 'vswitch', 'computedPolicy', 'spec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostPortGroup;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostPortGroup', 'HostPortGroup', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostPortGroup', 'HostPortGroup');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPowerPolicy;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['name', undef, undef, 1],
   ['shortName', undef, undef, 1],
   ['description', undef, undef, 1],
);


VIMRuntime::make_get_set('HostPowerPolicy', 'key', 'name', 'shortName', 'description');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostPowerPolicy;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostPowerPolicy', 'HostPowerPolicy', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostPowerPolicy', 'HostPowerPolicy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PowerSystemCapability;
our @ISA = qw(DynamicData);

our @property_list = (
   ['availablePolicy', 'HostPowerPolicy', 1, 1],
);


VIMRuntime::make_get_set('PowerSystemCapability', 'availablePolicy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PowerSystemInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['currentPolicy', 'HostPowerPolicy', undef, 1],
);


VIMRuntime::make_get_set('PowerSystemInfo', 'currentPolicy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostProtocolEndpoint;
our @ISA = qw(DynamicData);

our @property_list = (
   ['peType', undef, undef, 1],
   ['type', undef, undef, 0],
   ['uuid', undef, undef, 1],
   ['hostKey', 'ManagedObjectReference', 1, 0],
   ['storageArray', undef, undef, 0],
   ['nfsServer', undef, undef, 0],
   ['nfsDir', undef, undef, 0],
   ['nfsServerScope', undef, undef, 0],
   ['nfsServerMajor', undef, undef, 0],
   ['nfsServerAuthType', undef, undef, 0],
   ['nfsServerUser', undef, undef, 0],
   ['deviceId', undef, undef, 0],
);


VIMRuntime::make_get_set('HostProtocolEndpoint', 'peType', 'type', 'uuid', 'hostKey', 'storageArray', 'nfsServer', 'nfsDir', 'nfsServerScope', 'nfsServerMajor', 'nfsServerAuthType', 'nfsServerUser', 'deviceId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostProtocolEndpoint;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostProtocolEndpoint', 'HostProtocolEndpoint', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostProtocolEndpoint', 'HostProtocolEndpoint');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostResignatureRescanResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['rescan', 'HostVmfsRescanResult', 1, 0],
   ['result', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('HostResignatureRescanResult', 'rescan', 'result');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostFirewallRulesetIpNetwork;
our @ISA = qw(DynamicData);

our @property_list = (
   ['network', undef, undef, 1],
   ['prefixLength', undef, undef, 1],
);


VIMRuntime::make_get_set('HostFirewallRulesetIpNetwork', 'network', 'prefixLength');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostFirewallRulesetIpNetwork;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostFirewallRulesetIpNetwork', 'HostFirewallRulesetIpNetwork', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostFirewallRulesetIpNetwork', 'HostFirewallRulesetIpNetwork');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostFirewallRulesetIpList;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipAddress', undef, 1, 0],
   ['ipNetwork', 'HostFirewallRulesetIpNetwork', 1, 0],
   ['allIp', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('HostFirewallRulesetIpList', 'ipAddress', 'ipNetwork', 'allIp');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostFirewallRulesetRulesetSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['allowedHosts', 'HostFirewallRulesetIpList', undef, 1],
);


VIMRuntime::make_get_set('HostFirewallRulesetRulesetSpec', 'allowedHosts');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostFirewallRule;
our @ISA = qw(DynamicData);

our @property_list = (
   ['port', undef, undef, 1],
   ['endPort', undef, undef, 0],
   ['direction', 'HostFirewallRuleDirection', undef, 1],
   ['portType', 'HostFirewallRulePortType', undef, 0],
   ['protocol', undef, undef, 1],
);


VIMRuntime::make_get_set('HostFirewallRule', 'port', 'endPort', 'direction', 'portType', 'protocol');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostFirewallRule;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostFirewallRule', 'HostFirewallRule', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostFirewallRule', 'HostFirewallRule');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostFirewallRuleset;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['label', undef, undef, 1],
   ['required', 'boolean', undef, 1],
   ['rule', 'HostFirewallRule', 1, 1],
   ['service', undef, undef, 0],
   ['enabled', 'boolean', undef, 1],
   ['allowedHosts', 'HostFirewallRulesetIpList', undef, 0],
);


VIMRuntime::make_get_set('HostFirewallRuleset', 'key', 'label', 'required', 'rule', 'service', 'enabled', 'allowedHosts');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostFirewallRuleset;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostFirewallRuleset', 'HostFirewallRuleset', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostFirewallRuleset', 'HostFirewallRuleset');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostRuntimeInfoNetStackInstanceRuntimeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['netStackInstanceKey', undef, undef, 1],
   ['state', undef, undef, 0],
   ['vmknicKeys', undef, 1, 0],
   ['maxNumberOfConnections', undef, undef, 0],
   ['currentIpV6Enabled', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostRuntimeInfoNetStackInstanceRuntimeInfo', 'netStackInstanceKey', 'state', 'vmknicKeys', 'maxNumberOfConnections', 'currentIpV6Enabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostRuntimeInfoNetStackInstanceRuntimeInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostRuntimeInfoNetStackInstanceRuntimeInfo', 'HostRuntimeInfoNetStackInstanceRuntimeInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostRuntimeInfoNetStackInstanceRuntimeInfo', 'HostRuntimeInfoNetStackInstanceRuntimeInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPlacedVirtualNicIdentifier;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 1],
   ['vnicKey', undef, undef, 1],
   ['reservation', undef, undef, 0],
);


VIMRuntime::make_get_set('HostPlacedVirtualNicIdentifier', 'vm', 'vnicKey', 'reservation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostPlacedVirtualNicIdentifier;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostPlacedVirtualNicIdentifier', 'HostPlacedVirtualNicIdentifier', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostPlacedVirtualNicIdentifier', 'HostPlacedVirtualNicIdentifier');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPnicNetworkResourceInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['pnicDevice', undef, undef, 1],
   ['availableBandwidthForVMTraffic', undef, undef, 0],
   ['unusedBandwidthForVMTraffic', undef, undef, 0],
   ['placedVirtualNics', 'HostPlacedVirtualNicIdentifier', 1, 0],
);


VIMRuntime::make_get_set('HostPnicNetworkResourceInfo', 'pnicDevice', 'availableBandwidthForVMTraffic', 'unusedBandwidthForVMTraffic', 'placedVirtualNics');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostPnicNetworkResourceInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostPnicNetworkResourceInfo', 'HostPnicNetworkResourceInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostPnicNetworkResourceInfo', 'HostPnicNetworkResourceInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNetworkResourceRuntime;
our @ISA = qw(DynamicData);

our @property_list = (
   ['pnicResourceInfo', 'HostPnicNetworkResourceInfo', 1, 1],
);


VIMRuntime::make_get_set('HostNetworkResourceRuntime', 'pnicResourceInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostRuntimeInfoNetworkRuntimeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['netStackInstanceRuntimeInfo', 'HostRuntimeInfoNetStackInstanceRuntimeInfo', 1, 0],
   ['networkResourceRuntime', 'HostNetworkResourceRuntime', undef, 0],
);


VIMRuntime::make_get_set('HostRuntimeInfoNetworkRuntimeInfo', 'netStackInstanceRuntimeInfo', 'networkResourceRuntime');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostRuntimeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['connectionState', 'HostSystemConnectionState', undef, 1],
   ['powerState', 'HostSystemPowerState', undef, 1],
   ['standbyMode', undef, undef, 0],
   ['inMaintenanceMode', 'boolean', undef, 1],
   ['inQuarantineMode', 'boolean', undef, 0],
   ['bootTime', undef, undef, 0],
   ['healthSystemRuntime', 'HealthSystemRuntime', undef, 0],
   ['dasHostState', 'ClusterDasFdmHostState', undef, 0],
   ['tpmPcrValues', 'HostTpmDigestInfo', 1, 0],
   ['vsanRuntimeInfo', 'VsanHostRuntimeInfo', undef, 0],
   ['networkRuntimeInfo', 'HostRuntimeInfoNetworkRuntimeInfo', undef, 0],
   ['vFlashResourceRuntimeInfo', 'HostVFlashManagerVFlashResourceRunTimeInfo', undef, 0],
   ['hostMaxVirtualDiskCapacity', undef, undef, 0],
   ['cryptoState', undef, undef, 0],
   ['cryptoKeyId', 'CryptoKeyId', undef, 0],
);


VIMRuntime::make_get_set('HostRuntimeInfo', 'connectionState', 'powerState', 'standbyMode', 'inMaintenanceMode', 'inQuarantineMode', 'bootTime', 'healthSystemRuntime', 'dasHostState', 'tpmPcrValues', 'vsanRuntimeInfo', 'networkRuntimeInfo', 'vFlashResourceRuntimeInfo', 'hostMaxVirtualDiskCapacity', 'cryptoState', 'cryptoKeyId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostScsiDiskPartition;
our @ISA = qw(DynamicData);

our @property_list = (
   ['diskName', undef, undef, 1],
   ['partition', undef, undef, 1],
);


VIMRuntime::make_get_set('HostScsiDiskPartition', 'diskName', 'partition');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostScsiDiskPartition;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostScsiDiskPartition', 'HostScsiDiskPartition', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostScsiDiskPartition', 'HostScsiDiskPartition');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostScsiDisk;
our @ISA = qw(ScsiLun);

our @property_list = (
   ['capacity', 'HostDiskDimensionsLba', undef, 1],
   ['devicePath', undef, undef, 1],
   ['ssd', 'boolean', undef, 0],
   ['localDisk', 'boolean', undef, 0],
   ['physicalLocation', undef, 1, 0],
   ['emulatedDIXDIFEnabled', 'boolean', undef, 0],
   ['vsanDiskInfo', 'VsanHostVsanDiskInfo', undef, 0],
   ['scsiDiskType', undef, undef, 0],
);


VIMRuntime::make_get_set('HostScsiDisk', 'capacity', 'devicePath', 'ssd', 'localDisk', 'physicalLocation', 'emulatedDIXDIFEnabled', 'vsanDiskInfo', 'scsiDiskType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostScsiDisk;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostScsiDisk', 'HostScsiDisk', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostScsiDisk', 'HostScsiDisk');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ScsiLunCapabilities;
our @ISA = qw(DynamicData);

our @property_list = (
   ['updateDisplayNameSupported', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('ScsiLunCapabilities', 'updateDisplayNameSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ScsiLunDurableName;
our @ISA = qw(DynamicData);

our @property_list = (
   ['namespace', undef, undef, 1],
   ['namespaceId', undef, undef, 1],
   ['data', undef, 1, 0],
);


VIMRuntime::make_get_set('ScsiLunDurableName', 'namespace', 'namespaceId', 'data');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfScsiLunDurableName;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ScsiLunDurableName', 'ScsiLunDurableName', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfScsiLunDurableName', 'ScsiLunDurableName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ScsiLunDescriptor;
our @ISA = qw(DynamicData);

our @property_list = (
   ['quality', undef, undef, 1],
   ['id', undef, undef, 1],
);


VIMRuntime::make_get_set('ScsiLunDescriptor', 'quality', 'id');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfScsiLunDescriptor;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ScsiLunDescriptor', 'ScsiLunDescriptor', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfScsiLunDescriptor', 'ScsiLunDescriptor');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ScsiLun;
our @ISA = qw(HostDevice);

our @property_list = (
   ['key', undef, undef, 0],
   ['uuid', undef, undef, 1],
   ['descriptor', 'ScsiLunDescriptor', 1, 0],
   ['canonicalName', undef, undef, 0],
   ['displayName', undef, undef, 0],
   ['lunType', undef, undef, 1],
   ['vendor', undef, undef, 0],
   ['model', undef, undef, 0],
   ['revision', undef, undef, 0],
   ['scsiLevel', undef, undef, 0],
   ['serialNumber', undef, undef, 0],
   ['durableName', 'ScsiLunDurableName', undef, 0],
   ['alternateName', 'ScsiLunDurableName', 1, 0],
   ['standardInquiry', undef, 1, 0],
   ['queueDepth', undef, undef, 0],
   ['operationalState', undef, 1, 1],
   ['capabilities', 'ScsiLunCapabilities', undef, 0],
   ['vStorageSupport', undef, undef, 0],
   ['protocolEndpoint', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('ScsiLun', 'key', 'uuid', 'descriptor', 'canonicalName', 'displayName', 'lunType', 'vendor', 'model', 'revision', 'scsiLevel', 'serialNumber', 'durableName', 'alternateName', 'standardInquiry', 'queueDepth', 'operationalState', 'capabilities', 'vStorageSupport', 'protocolEndpoint');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfScsiLun;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ScsiLun', 'ScsiLun', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfScsiLun', 'ScsiLun');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostScsiTopologyInterface;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['adapter', undef, undef, 1],
   ['target', 'HostScsiTopologyTarget', 1, 0],
);


VIMRuntime::make_get_set('HostScsiTopologyInterface', 'key', 'adapter', 'target');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostScsiTopologyInterface;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostScsiTopologyInterface', 'HostScsiTopologyInterface', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostScsiTopologyInterface', 'HostScsiTopologyInterface');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostScsiTopologyTarget;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['target', undef, undef, 1],
   ['lun', 'HostScsiTopologyLun', 1, 0],
   ['transport', 'HostTargetTransport', undef, 0],
);


VIMRuntime::make_get_set('HostScsiTopologyTarget', 'key', 'target', 'lun', 'transport');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostScsiTopologyTarget;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostScsiTopologyTarget', 'HostScsiTopologyTarget', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostScsiTopologyTarget', 'HostScsiTopologyTarget');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostScsiTopologyLun;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['lun', undef, undef, 1],
   ['scsiLun', undef, undef, 1],
);


VIMRuntime::make_get_set('HostScsiTopologyLun', 'key', 'lun', 'scsiLun');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostScsiTopologyLun;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostScsiTopologyLun', 'HostScsiTopologyLun', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostScsiTopologyLun', 'HostScsiTopologyLun');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostScsiTopology;
our @ISA = qw(DynamicData);

our @property_list = (
   ['adapter', 'HostScsiTopologyInterface', 1, 0],
);


VIMRuntime::make_get_set('HostScsiTopology', 'adapter');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSecuritySpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['adminPassword', undef, undef, 0],
   ['removePermission', 'Permission', 1, 0],
   ['addPermission', 'Permission', 1, 0],
);


VIMRuntime::make_get_set('HostSecuritySpec', 'adminPassword', 'removePermission', 'addPermission');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostServiceSourcePackage;
our @ISA = qw(DynamicData);

our @property_list = (
   ['sourcePackageName', undef, undef, 1],
   ['description', undef, undef, 1],
);


VIMRuntime::make_get_set('HostServiceSourcePackage', 'sourcePackageName', 'description');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostService;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['label', undef, undef, 1],
   ['required', 'boolean', undef, 1],
   ['uninstallable', 'boolean', undef, 1],
   ['running', 'boolean', undef, 1],
   ['ruleset', undef, 1, 0],
   ['policy', undef, undef, 1],
   ['sourcePackage', 'HostServiceSourcePackage', undef, 0],
);


VIMRuntime::make_get_set('HostService', 'key', 'label', 'required', 'uninstallable', 'running', 'ruleset', 'policy', 'sourcePackage');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostService;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostService', 'HostService', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostService', 'HostService');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostServiceConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['serviceId', undef, undef, 1],
   ['startupPolicy', undef, undef, 1],
);


VIMRuntime::make_get_set('HostServiceConfig', 'serviceId', 'startupPolicy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostServiceConfig;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostServiceConfig', 'HostServiceConfig', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostServiceConfig', 'HostServiceConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostServiceInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['service', 'HostService', 1, 0],
);


VIMRuntime::make_get_set('HostServiceInfo', 'service');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSnmpDestination;
our @ISA = qw(DynamicData);

our @property_list = (
   ['hostName', undef, undef, 1],
   ['port', undef, undef, 1],
   ['community', undef, undef, 1],
);


VIMRuntime::make_get_set('HostSnmpDestination', 'hostName', 'port', 'community');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostSnmpDestination;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostSnmpDestination', 'HostSnmpDestination', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostSnmpDestination', 'HostSnmpDestination');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSnmpConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['enabled', 'boolean', undef, 0],
   ['port', undef, undef, 0],
   ['readOnlyCommunities', undef, 1, 0],
   ['trapTargets', 'HostSnmpDestination', 1, 0],
   ['option', 'KeyValue', 1, 0],
);


VIMRuntime::make_get_set('HostSnmpConfigSpec', 'enabled', 'port', 'readOnlyCommunities', 'trapTargets', 'option');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSnmpSystemAgentLimits;
our @ISA = qw(DynamicData);

our @property_list = (
   ['maxReadOnlyCommunities', undef, undef, 1],
   ['maxTrapDestinations', undef, undef, 1],
   ['maxCommunityLength', undef, undef, 1],
   ['maxBufferSize', undef, undef, 1],
   ['capability', 'HostSnmpAgentCapability', undef, 0],
);


VIMRuntime::make_get_set('HostSnmpSystemAgentLimits', 'maxReadOnlyCommunities', 'maxTrapDestinations', 'maxCommunityLength', 'maxBufferSize', 'capability');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SoftwarePackageCapability;
our @ISA = qw(DynamicData);

our @property_list = (
   ['liveInstallAllowed', 'boolean', undef, 0],
   ['liveRemoveAllowed', 'boolean', undef, 0],
   ['statelessReady', 'boolean', undef, 0],
   ['overlay', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('SoftwarePackageCapability', 'liveInstallAllowed', 'liveRemoveAllowed', 'statelessReady', 'overlay');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package Relation;
our @ISA = qw(DynamicData);

our @property_list = (
   ['constraint', undef, undef, 0],
   ['name', undef, undef, 1],
   ['version', undef, undef, 0],
);


VIMRuntime::make_get_set('Relation', 'constraint', 'name', 'version');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfRelation;
our @ISA = qw(ComplexType);

our @property_list = (
   ['Relation', 'Relation', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfRelation', 'Relation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SoftwarePackage;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['version', undef, undef, 1],
   ['type', undef, undef, 1],
   ['vendor', undef, undef, 1],
   ['acceptanceLevel', undef, undef, 1],
   ['summary', undef, undef, 1],
   ['description', undef, undef, 1],
   ['referenceURL', undef, 1, 0],
   ['creationDate', undef, undef, 0],
   ['depends', 'Relation', 1, 0],
   ['conflicts', 'Relation', 1, 0],
   ['replaces', 'Relation', 1, 0],
   ['provides', undef, 1, 0],
   ['maintenanceModeRequired', 'boolean', undef, 0],
   ['hardwarePlatformsRequired', undef, 1, 0],
   ['capability', 'SoftwarePackageCapability', undef, 1],
   ['tag', undef, 1, 0],
   ['payload', undef, 1, 0],
);


VIMRuntime::make_get_set('SoftwarePackage', 'name', 'version', 'type', 'vendor', 'acceptanceLevel', 'summary', 'description', 'referenceURL', 'creationDate', 'depends', 'conflicts', 'replaces', 'provides', 'maintenanceModeRequired', 'hardwarePlatformsRequired', 'capability', 'tag', 'payload');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfSoftwarePackage;
our @ISA = qw(ComplexType);

our @property_list = (
   ['SoftwarePackage', 'SoftwarePackage', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfSoftwarePackage', 'SoftwarePackage');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSriovConfig;
our @ISA = qw(HostPciPassthruConfig);

our @property_list = (
   ['sriovEnabled', 'boolean', undef, 1],
   ['numVirtualFunction', undef, undef, 1],
);


VIMRuntime::make_get_set('HostSriovConfig', 'sriovEnabled', 'numVirtualFunction');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSriovDevicePoolInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
);


VIMRuntime::make_get_set('HostSriovDevicePoolInfo', 'key');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostSriovDevicePoolInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostSriovDevicePoolInfo', 'HostSriovDevicePoolInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostSriovDevicePoolInfo', 'HostSriovDevicePoolInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSriovInfo;
our @ISA = qw(HostPciPassthruInfo);

our @property_list = (
   ['sriovEnabled', 'boolean', undef, 1],
   ['sriovCapable', 'boolean', undef, 1],
   ['sriovActive', 'boolean', undef, 1],
   ['numVirtualFunctionRequested', undef, undef, 1],
   ['numVirtualFunction', undef, undef, 1],
   ['maxVirtualFunctionSupported', undef, undef, 1],
);


VIMRuntime::make_get_set('HostSriovInfo', 'sriovEnabled', 'sriovCapable', 'sriovActive', 'numVirtualFunctionRequested', 'numVirtualFunction', 'maxVirtualFunctionSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSriovNetworkDevicePoolInfo;
our @ISA = qw(HostSriovDevicePoolInfo);

our @property_list = (
   ['switchKey', undef, undef, 0],
   ['switchUuid', undef, undef, 0],
   ['pnic', 'PhysicalNic', 1, 0],
);


VIMRuntime::make_get_set('HostSriovNetworkDevicePoolInfo', 'switchKey', 'switchUuid', 'pnic');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSslThumbprintInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['principal', undef, undef, 1],
   ['ownerTag', undef, undef, 0],
   ['sslThumbprints', undef, 1, 0],
);


VIMRuntime::make_get_set('HostSslThumbprintInfo', 'principal', 'ownerTag', 'sslThumbprints');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostSslThumbprintInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostSslThumbprintInfo', 'HostSslThumbprintInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostSslThumbprintInfo', 'HostSslThumbprintInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostStorageArrayTypePolicyOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['policy', 'ElementDescription', undef, 1],
);


VIMRuntime::make_get_set('HostStorageArrayTypePolicyOption', 'policy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostStorageArrayTypePolicyOption;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostStorageArrayTypePolicyOption', 'HostStorageArrayTypePolicyOption', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostStorageArrayTypePolicyOption', 'HostStorageArrayTypePolicyOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostStorageDeviceInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['hostBusAdapter', 'HostHostBusAdapter', 1, 0],
   ['scsiLun', 'ScsiLun', 1, 0],
   ['scsiTopology', 'HostScsiTopology', undef, 0],
   ['multipathInfo', 'HostMultipathInfo', undef, 0],
   ['plugStoreTopology', 'HostPlugStoreTopology', undef, 0],
   ['softwareInternetScsiEnabled', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('HostStorageDeviceInfo', 'hostBusAdapter', 'scsiLun', 'scsiTopology', 'multipathInfo', 'plugStoreTopology', 'softwareInternetScsiEnabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostStorageSystemVmfsVolumeResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['fault', 'LocalizedMethodFault', undef, 0],
);


VIMRuntime::make_get_set('HostStorageSystemVmfsVolumeResult', 'key', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostStorageSystemVmfsVolumeResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostStorageSystemVmfsVolumeResult', 'HostStorageSystemVmfsVolumeResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostStorageSystemVmfsVolumeResult', 'HostStorageSystemVmfsVolumeResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostStorageSystemScsiLunResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['fault', 'LocalizedMethodFault', undef, 0],
);


VIMRuntime::make_get_set('HostStorageSystemScsiLunResult', 'key', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostStorageSystemScsiLunResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostStorageSystemScsiLunResult', 'HostStorageSystemScsiLunResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostStorageSystemScsiLunResult', 'HostStorageSystemScsiLunResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostStorageSystemDiskLocatorLedResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['fault', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('HostStorageSystemDiskLocatorLedResult', 'key', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostStorageSystemDiskLocatorLedResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostStorageSystemDiskLocatorLedResult', 'HostStorageSystemDiskLocatorLedResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostStorageSystemDiskLocatorLedResult', 'HostStorageSystemDiskLocatorLedResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostHardwareSummary;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vendor', undef, undef, 1],
   ['model', undef, undef, 1],
   ['uuid', undef, undef, 1],
   ['otherIdentifyingInfo', 'HostSystemIdentificationInfo', 1, 0],
   ['memorySize', undef, undef, 1],
   ['cpuModel', undef, undef, 1],
   ['cpuMhz', undef, undef, 1],
   ['numCpuPkgs', undef, undef, 1],
   ['numCpuCores', undef, undef, 1],
   ['numCpuThreads', undef, undef, 1],
   ['numNics', undef, undef, 1],
   ['numHBAs', undef, undef, 1],
);


VIMRuntime::make_get_set('HostHardwareSummary', 'vendor', 'model', 'uuid', 'otherIdentifyingInfo', 'memorySize', 'cpuModel', 'cpuMhz', 'numCpuPkgs', 'numCpuCores', 'numCpuThreads', 'numNics', 'numHBAs');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostListSummaryQuickStats;
our @ISA = qw(DynamicData);

our @property_list = (
   ['overallCpuUsage', undef, undef, 0],
   ['overallMemoryUsage', undef, undef, 0],
   ['distributedCpuFairness', undef, undef, 0],
   ['distributedMemoryFairness', undef, undef, 0],
   ['uptime', undef, undef, 0],
);


VIMRuntime::make_get_set('HostListSummaryQuickStats', 'overallCpuUsage', 'overallMemoryUsage', 'distributedCpuFairness', 'distributedMemoryFairness', 'uptime');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostConfigSummary;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['port', undef, undef, 1],
   ['sslThumbprint', undef, undef, 0],
   ['product', 'AboutInfo', undef, 0],
   ['vmotionEnabled', 'boolean', undef, 1],
   ['faultToleranceEnabled', 'boolean', undef, 0],
   ['featureVersion', 'HostFeatureVersionInfo', 1, 0],
   ['agentVmDatastore', 'ManagedObjectReference', undef, 0],
   ['agentVmNetwork', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('HostConfigSummary', 'name', 'port', 'sslThumbprint', 'product', 'vmotionEnabled', 'faultToleranceEnabled', 'featureVersion', 'agentVmDatastore', 'agentVmNetwork');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostListSummaryGatewaySummary;
our @ISA = qw(DynamicData);

our @property_list = (
   ['gatewayType', undef, undef, 1],
   ['gatewayId', undef, undef, 1],
);


VIMRuntime::make_get_set('HostListSummaryGatewaySummary', 'gatewayType', 'gatewayId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostListSummary;
our @ISA = qw(DynamicData);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 0],
   ['hardware', 'HostHardwareSummary', undef, 0],
   ['runtime', 'HostRuntimeInfo', undef, 0],
   ['config', 'HostConfigSummary', undef, 1],
   ['quickStats', 'HostListSummaryQuickStats', undef, 1],
   ['overallStatus', 'ManagedEntityStatus', undef, 1],
   ['rebootRequired', 'boolean', undef, 1],
   ['customValue', 'CustomFieldValue', 1, 0],
   ['managementServerIp', undef, undef, 0],
   ['maxEVCModeKey', undef, undef, 0],
   ['currentEVCModeKey', undef, undef, 0],
   ['gateway', 'HostListSummaryGatewaySummary', undef, 0],
);


VIMRuntime::make_get_set('HostListSummary', 'host', 'hardware', 'runtime', 'config', 'quickStats', 'overallStatus', 'rebootRequired', 'customValue', 'managementServerIp', 'maxEVCModeKey', 'currentEVCModeKey', 'gateway');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SystemEventInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['recordId', undef, undef, 1],
   ['when', undef, undef, 1],
   ['selType', undef, undef, 1],
   ['message', undef, undef, 1],
   ['sensorNumber', undef, undef, 1],
);


VIMRuntime::make_get_set('SystemEventInfo', 'recordId', 'when', 'selType', 'message', 'sensorNumber');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfSystemEventInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['SystemEventInfo', 'SystemEventInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfSystemEventInfo', 'SystemEventInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterTransitionalEVCManagerEVCState;
our @ISA = qw(DynamicData);

our @property_list = (
   ['badHardwareHostsBlockingEVC', 'ManagedObjectReference', undef, 0],
   ['badSoftwareHostsBlockingEVC', 'ManagedObjectReference', undef, 0],
   ['clusterCPUVendor', undef, undef, 0],
   ['currentEVCModeKey' , undef, undef, 0],
   ['disconnectedHostsBlockingEVC', 'boolean', undef, 1],
   ['guaranteedCPUFeatures', 'HostCpuIdInfo', 1, 0],
   ['heterogenousHostsBlockingEVC', 'boolean', undef, 1],
   ['legalEVCMode', 'EVCMode', 1, 0],
   ['supportedEVCMode', 'EVCMode', 1, 0],
);


VIMRuntime::make_get_set('ClusterTransitionalEVCManagerEVCState', 'badHardwareHostsBlockingEVC',  'badSoftwareHostsBlockingEVC',  'clusterCPUVendor',  'currentEVCModeKey',  'disconnectedHostsBlockingEVC',  'guaranteedCPUFeatures',  'heterogenousHostsBlockingEVC',  'legalEVCMode',  'supportedEVCMode', );


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);
}

1;
##################################################################################




##################################################################################
package HostSystemHealthInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['numericSensorInfo', 'HostNumericSensorInfo', 1, 0],
);


VIMRuntime::make_get_set('HostSystemHealthInfo', 'numericSensorInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSystemIdentificationInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['identifierValue', undef, undef, 1],
   ['identifierType', 'ElementDescription', undef, 1],
);


VIMRuntime::make_get_set('HostSystemIdentificationInfo', 'identifierValue', 'identifierType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostSystemIdentificationInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostSystemIdentificationInfo', 'HostSystemIdentificationInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostSystemIdentificationInfo', 'HostSystemIdentificationInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSystemResourceInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['config', 'ResourceConfigSpec', undef, 0],
   ['child', 'HostSystemResourceInfo', 1, 0],
);


VIMRuntime::make_get_set('HostSystemResourceInfo', 'key', 'config', 'child');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostSystemResourceInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostSystemResourceInfo', 'HostSystemResourceInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostSystemResourceInfo', 'HostSystemResourceInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSystemSwapConfigurationSystemSwapOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
);


VIMRuntime::make_get_set('HostSystemSwapConfigurationSystemSwapOption', 'key');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostSystemSwapConfigurationSystemSwapOption;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostSystemSwapConfigurationSystemSwapOption', 'HostSystemSwapConfigurationSystemSwapOption', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostSystemSwapConfigurationSystemSwapOption', 'HostSystemSwapConfigurationSystemSwapOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSystemSwapConfigurationDisabledOption;
our @ISA = qw(HostSystemSwapConfigurationSystemSwapOption);

our @property_list = (
);


VIMRuntime::make_get_set('HostSystemSwapConfigurationDisabledOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSystemSwapConfigurationHostCacheOption;
our @ISA = qw(HostSystemSwapConfigurationSystemSwapOption);

our @property_list = (
);


VIMRuntime::make_get_set('HostSystemSwapConfigurationHostCacheOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSystemSwapConfigurationHostLocalSwapOption;
our @ISA = qw(HostSystemSwapConfigurationSystemSwapOption);

our @property_list = (
);


VIMRuntime::make_get_set('HostSystemSwapConfigurationHostLocalSwapOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSystemSwapConfigurationDatastoreOption;
our @ISA = qw(HostSystemSwapConfigurationSystemSwapOption);

our @property_list = (
   ['datastore', undef, undef, 1],
);


VIMRuntime::make_get_set('HostSystemSwapConfigurationDatastoreOption', 'datastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSystemSwapConfiguration;
our @ISA = qw(DynamicData);

our @property_list = (
   ['option', 'HostSystemSwapConfigurationSystemSwapOption', 1, 0],
);


VIMRuntime::make_get_set('HostSystemSwapConfiguration', 'option');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostTargetTransport;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('HostTargetTransport');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostParallelScsiTargetTransport;
our @ISA = qw(HostTargetTransport);

our @property_list = (
);


VIMRuntime::make_get_set('HostParallelScsiTargetTransport');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostBlockAdapterTargetTransport;
our @ISA = qw(HostTargetTransport);

our @property_list = (
);


VIMRuntime::make_get_set('HostBlockAdapterTargetTransport');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSerialAttachedTargetTransport;
our @ISA = qw(HostTargetTransport);

our @property_list = (
);


VIMRuntime::make_get_set('HostSerialAttachedTargetTransport');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostFibreChannelTargetTransport;
our @ISA = qw(HostTargetTransport);

our @property_list = (
   ['portWorldWideName', undef, undef, 1],
   ['nodeWorldWideName', undef, undef, 1],
);


VIMRuntime::make_get_set('HostFibreChannelTargetTransport', 'portWorldWideName', 'nodeWorldWideName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostInternetScsiTargetTransport;
our @ISA = qw(HostTargetTransport);

our @property_list = (
   ['iScsiName', undef, undef, 1],
   ['iScsiAlias', undef, undef, 1],
   ['address', undef, 1, 0],
);


VIMRuntime::make_get_set('HostInternetScsiTargetTransport', 'iScsiName', 'iScsiAlias', 'address');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostFibreChannelOverEthernetTargetTransport;
our @ISA = qw(HostFibreChannelTargetTransport);

our @property_list = (
   ['vnportMac', undef, undef, 1],
   ['fcfMac', undef, undef, 1],
   ['vlanId', undef, undef, 1],
);


VIMRuntime::make_get_set('HostFibreChannelOverEthernetTargetTransport', 'vnportMac', 'fcfMac', 'vlanId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostTpmAttestationReport;
our @ISA = qw(DynamicData);

our @property_list = (
   ['tpmPcrValues', 'HostTpmDigestInfo', 1, 1],
   ['tpmEvents', 'HostTpmEventLogEntry', 1, 1],
   ['tpmLogReliable', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('HostTpmAttestationReport', 'tpmPcrValues', 'tpmEvents', 'tpmLogReliable');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostTpmBootSecurityOptionEventDetails;
our @ISA = qw(HostTpmEventDetails);

our @property_list = (
   ['bootSecurityOption', undef, undef, 1],
);


VIMRuntime::make_get_set('HostTpmBootSecurityOptionEventDetails', 'bootSecurityOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostTpmCommandEventDetails;
our @ISA = qw(HostTpmEventDetails);

our @property_list = (
   ['commandLine', undef, undef, 1],
);


VIMRuntime::make_get_set('HostTpmCommandEventDetails', 'commandLine');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDigestInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['digestMethod', undef, undef, 1],
   ['digestValue', undef, 1, 1],
   ['objectName', undef, undef, 0],
);


VIMRuntime::make_get_set('HostDigestInfo', 'digestMethod', 'digestValue', 'objectName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostTpmDigestInfo;
our @ISA = qw(HostDigestInfo);

our @property_list = (
   ['pcrNumber', undef, undef, 1],
);


VIMRuntime::make_get_set('HostTpmDigestInfo', 'pcrNumber');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostTpmDigestInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostTpmDigestInfo', 'HostTpmDigestInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostTpmDigestInfo', 'HostTpmDigestInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostTpmEventDetails;
our @ISA = qw(DynamicData);

our @property_list = (
   ['dataHash', undef, 1, 1],
);


VIMRuntime::make_get_set('HostTpmEventDetails', 'dataHash');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostTpmEventLogEntry;
our @ISA = qw(DynamicData);

our @property_list = (
   ['pcrIndex', undef, undef, 1],
   ['eventDetails', 'HostTpmEventDetails', undef, 1],
);


VIMRuntime::make_get_set('HostTpmEventLogEntry', 'pcrIndex', 'eventDetails');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostTpmEventLogEntry;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostTpmEventLogEntry', 'HostTpmEventLogEntry', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostTpmEventLogEntry', 'HostTpmEventLogEntry');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostTpmOptionEventDetails;
our @ISA = qw(HostTpmEventDetails);

our @property_list = (
   ['optionsFileName', undef, undef, 1],
   ['bootOptions', undef, 1, 0],
);


VIMRuntime::make_get_set('HostTpmOptionEventDetails', 'optionsFileName', 'bootOptions');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostTpmSoftwareComponentEventDetails;
our @ISA = qw(HostTpmEventDetails);

our @property_list = (
   ['componentName', undef, undef, 1],
   ['vibName', undef, undef, 1],
   ['vibVersion', undef, undef, 1],
   ['vibVendor', undef, undef, 1],
);


VIMRuntime::make_get_set('HostTpmSoftwareComponentEventDetails', 'componentName', 'vibName', 'vibVersion', 'vibVendor');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostUnresolvedVmfsExtent;
our @ISA = qw(DynamicData);

our @property_list = (
   ['device', 'HostScsiDiskPartition', undef, 1],
   ['devicePath', undef, undef, 1],
   ['vmfsUuid', undef, undef, 1],
   ['isHeadExtent', 'boolean', undef, 1],
   ['ordinal', undef, undef, 1],
   ['startBlock', undef, undef, 1],
   ['endBlock', undef, undef, 1],
   ['reason', undef, undef, 1],
);


VIMRuntime::make_get_set('HostUnresolvedVmfsExtent', 'device', 'devicePath', 'vmfsUuid', 'isHeadExtent', 'ordinal', 'startBlock', 'endBlock', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostUnresolvedVmfsExtent;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostUnresolvedVmfsExtent', 'HostUnresolvedVmfsExtent', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostUnresolvedVmfsExtent', 'HostUnresolvedVmfsExtent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostUnresolvedVmfsResignatureSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['extentDevicePath', undef, 1, 1],
);


VIMRuntime::make_get_set('HostUnresolvedVmfsResignatureSpec', 'extentDevicePath');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostUnresolvedVmfsResolutionResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['spec', 'HostUnresolvedVmfsResolutionSpec', undef, 1],
   ['vmfs', 'HostVmfsVolume', undef, 0],
   ['fault', 'LocalizedMethodFault', undef, 0],
);


VIMRuntime::make_get_set('HostUnresolvedVmfsResolutionResult', 'spec', 'vmfs', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostUnresolvedVmfsResolutionResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostUnresolvedVmfsResolutionResult', 'HostUnresolvedVmfsResolutionResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostUnresolvedVmfsResolutionResult', 'HostUnresolvedVmfsResolutionResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostUnresolvedVmfsResolutionSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['extentDevicePath', undef, 1, 1],
   ['uuidResolution', undef, undef, 1],
);


VIMRuntime::make_get_set('HostUnresolvedVmfsResolutionSpec', 'extentDevicePath', 'uuidResolution');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostUnresolvedVmfsResolutionSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostUnresolvedVmfsResolutionSpec', 'HostUnresolvedVmfsResolutionSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostUnresolvedVmfsResolutionSpec', 'HostUnresolvedVmfsResolutionSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostUnresolvedVmfsVolumeResolveStatus;
our @ISA = qw(DynamicData);

our @property_list = (
   ['resolvable', 'boolean', undef, 1],
   ['incompleteExtents', 'boolean', undef, 0],
   ['multipleCopies', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostUnresolvedVmfsVolumeResolveStatus', 'resolvable', 'incompleteExtents', 'multipleCopies');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostUnresolvedVmfsVolume;
our @ISA = qw(DynamicData);

our @property_list = (
   ['extent', 'HostUnresolvedVmfsExtent', 1, 1],
   ['vmfsLabel', undef, undef, 1],
   ['vmfsUuid', undef, undef, 1],
   ['totalBlocks', undef, undef, 1],
   ['resolveStatus', 'HostUnresolvedVmfsVolumeResolveStatus', undef, 1],
);


VIMRuntime::make_get_set('HostUnresolvedVmfsVolume', 'extent', 'vmfsLabel', 'vmfsUuid', 'totalBlocks', 'resolveStatus');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostUnresolvedVmfsVolume;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostUnresolvedVmfsVolume', 'HostUnresolvedVmfsVolume', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostUnresolvedVmfsVolume', 'HostUnresolvedVmfsVolume');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVFlashManagerVFlashResourceConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vffsUuid', undef, undef, 1],
);


VIMRuntime::make_get_set('HostVFlashManagerVFlashResourceConfigSpec', 'vffsUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVFlashManagerVFlashResourceConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vffs', 'HostVffsVolume', undef, 0],
   ['capacity', undef, undef, 1],
);


VIMRuntime::make_get_set('HostVFlashManagerVFlashResourceConfigInfo', 'vffs', 'capacity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVFlashManagerVFlashResourceRunTimeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['usage', undef, undef, 1],
   ['capacity', undef, undef, 1],
   ['accessible', 'boolean', undef, 1],
   ['capacityForVmCache', undef, undef, 1],
   ['freeForVmCache', undef, undef, 1],
);


VIMRuntime::make_get_set('HostVFlashManagerVFlashResourceRunTimeInfo', 'usage', 'capacity', 'accessible', 'capacityForVmCache', 'freeForVmCache');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVFlashManagerVFlashCacheConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['defaultVFlashModule', undef, undef, 1],
   ['swapCacheReservationInGB', undef, undef, 1],
);


VIMRuntime::make_get_set('HostVFlashManagerVFlashCacheConfigSpec', 'defaultVFlashModule', 'swapCacheReservationInGB');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vFlashModule', undef, undef, 1],
   ['vFlashModuleVersion', undef, undef, 1],
   ['minSupportedModuleVersion', undef, undef, 1],
   ['cacheConsistencyType', 'ChoiceOption', undef, 1],
   ['cacheMode', 'ChoiceOption', undef, 1],
   ['blockSizeInKBOption', 'LongOption', undef, 1],
   ['reservationInMBOption', 'LongOption', undef, 1],
   ['maxDiskSizeInKB', undef, undef, 1],
);


VIMRuntime::make_get_set('HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption', 'vFlashModule', 'vFlashModuleVersion', 'minSupportedModuleVersion', 'cacheConsistencyType', 'cacheMode', 'blockSizeInKBOption', 'reservationInMBOption', 'maxDiskSizeInKB');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption', 'HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption', 'HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVFlashManagerVFlashCacheConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vFlashModuleConfigOption', 'HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption', 1, 0],
   ['defaultVFlashModule', undef, undef, 0],
   ['swapCacheReservationInGB', undef, undef, 0],
);


VIMRuntime::make_get_set('HostVFlashManagerVFlashCacheConfigInfo', 'vFlashModuleConfigOption', 'defaultVFlashModule', 'swapCacheReservationInGB');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVFlashManagerVFlashConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vFlashResourceConfigInfo', 'HostVFlashManagerVFlashResourceConfigInfo', undef, 0],
   ['vFlashCacheConfigInfo', 'HostVFlashManagerVFlashCacheConfigInfo', undef, 0],
);


VIMRuntime::make_get_set('HostVFlashManagerVFlashConfigInfo', 'vFlashResourceConfigInfo', 'vFlashCacheConfigInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVFlashResourceConfigurationResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['devicePath', undef, 1, 0],
   ['vffs', 'HostVffsVolume', undef, 0],
   ['diskConfigurationResult', 'HostDiskConfigurationResult', 1, 0],
);


VIMRuntime::make_get_set('HostVFlashResourceConfigurationResult', 'devicePath', 'vffs', 'diskConfigurationResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVMotionConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vmotionNicKey', undef, undef, 0],
   ['enabled', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('HostVMotionConfig', 'vmotionNicKey', 'enabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVMotionInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['netConfig', 'HostVMotionNetConfig', undef, 0],
   ['ipConfig', 'HostIpConfig', undef, 0],
);


VIMRuntime::make_get_set('HostVMotionInfo', 'netConfig', 'ipConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVMotionNetConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['candidateVnic', 'HostVirtualNic', 1, 0],
   ['selectedVnic', undef, undef, 0],
);


VIMRuntime::make_get_set('HostVMotionNetConfig', 'candidateVnic', 'selectedVnic');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVffsSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['devicePath', undef, undef, 1],
   ['partition', 'HostDiskPartitionSpec', undef, 0],
   ['majorVersion', undef, undef, 1],
   ['volumeName', undef, undef, 1],
);


VIMRuntime::make_get_set('HostVffsSpec', 'devicePath', 'partition', 'majorVersion', 'volumeName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVffsVolume;
our @ISA = qw(HostFileSystemVolume);

our @property_list = (
   ['majorVersion', undef, undef, 1],
   ['version', undef, undef, 1],
   ['uuid', undef, undef, 1],
   ['extent', 'HostScsiDiskPartition', 1, 1],
);


VIMRuntime::make_get_set('HostVffsVolume', 'majorVersion', 'version', 'uuid', 'extent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVirtualNicSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ip', 'HostIpConfig', undef, 0],
   ['mac', undef, undef, 0],
   ['distributedVirtualPort', 'DistributedVirtualSwitchPortConnection', undef, 0],
   ['portgroup', undef, undef, 0],
   ['mtu', undef, undef, 0],
   ['tsoEnabled', 'boolean', undef, 0],
   ['netStackInstanceKey', undef, undef, 0],
   ['opaqueNetwork', 'HostVirtualNicOpaqueNetworkSpec', undef, 0],
   ['externalId', undef, undef, 0],
   ['pinnedPnic', undef, undef, 0],
   ['ipRouteSpec', 'HostVirtualNicIpRouteSpec', undef, 0],
);


VIMRuntime::make_get_set('HostVirtualNicSpec', 'ip', 'mac', 'distributedVirtualPort', 'portgroup', 'mtu', 'tsoEnabled', 'netStackInstanceKey', 'opaqueNetwork', 'externalId', 'pinnedPnic', 'ipRouteSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVirtualNicConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['changeOperation', undef, undef, 0],
   ['device', undef, undef, 0],
   ['portgroup', undef, undef, 1],
   ['spec', 'HostVirtualNicSpec', undef, 0],
);


VIMRuntime::make_get_set('HostVirtualNicConfig', 'changeOperation', 'device', 'portgroup', 'spec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostVirtualNicConfig;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostVirtualNicConfig', 'HostVirtualNicConfig', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostVirtualNicConfig', 'HostVirtualNicConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVirtualNicOpaqueNetworkSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['opaqueNetworkId', undef, undef, 1],
   ['opaqueNetworkType', undef, undef, 1],
);


VIMRuntime::make_get_set('HostVirtualNicOpaqueNetworkSpec', 'opaqueNetworkId', 'opaqueNetworkType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVirtualNicIpRouteSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipRouteConfig', 'HostIpRouteConfig', undef, 0],
);


VIMRuntime::make_get_set('HostVirtualNicIpRouteSpec', 'ipRouteConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVirtualNic;
our @ISA = qw(DynamicData);

our @property_list = (
   ['device', undef, undef, 1],
   ['key', undef, undef, 1],
   ['portgroup', undef, undef, 1],
   ['spec', 'HostVirtualNicSpec', undef, 1],
   ['port', undef, undef, 0],
);


VIMRuntime::make_get_set('HostVirtualNic', 'device', 'key', 'portgroup', 'spec', 'port');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostVirtualNic;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostVirtualNic', 'HostVirtualNic', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostVirtualNic', 'HostVirtualNic');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVirtualNicConnection;
our @ISA = qw(DynamicData);

our @property_list = (
   ['portgroup', undef, undef, 0],
   ['dvPort', 'DistributedVirtualSwitchPortConnection', undef, 0],
);


VIMRuntime::make_get_set('HostVirtualNicConnection', 'portgroup', 'dvPort');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVirtualNicManagerNicTypeSelection;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vnic', 'HostVirtualNicConnection', undef, 1],
   ['nicType', undef, 1, 0],
);


VIMRuntime::make_get_set('HostVirtualNicManagerNicTypeSelection', 'vnic', 'nicType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostVirtualNicManagerNicTypeSelection;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostVirtualNicManagerNicTypeSelection', 'HostVirtualNicManagerNicTypeSelection', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostVirtualNicManagerNicTypeSelection', 'HostVirtualNicManagerNicTypeSelection');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualNicManagerNetConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['nicType', undef, undef, 1],
   ['multiSelectAllowed', 'boolean', undef, 1],
   ['candidateVnic', 'HostVirtualNic', 1, 0],
   ['selectedVnic', undef, 1, 0],
);


VIMRuntime::make_get_set('VirtualNicManagerNetConfig', 'nicType', 'multiSelectAllowed', 'candidateVnic', 'selectedVnic');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualNicManagerNetConfig;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualNicManagerNetConfig', 'VirtualNicManagerNetConfig', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualNicManagerNetConfig', 'VirtualNicManagerNetConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVirtualNicManagerInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['netConfig', 'VirtualNicManagerNetConfig', 1, 0],
);


VIMRuntime::make_get_set('HostVirtualNicManagerInfo', 'netConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVirtualSwitchBridge;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('HostVirtualSwitchBridge');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVirtualSwitchAutoBridge;
our @ISA = qw(HostVirtualSwitchBridge);

our @property_list = (
   ['excludedNicDevice', undef, 1, 0],
);


VIMRuntime::make_get_set('HostVirtualSwitchAutoBridge', 'excludedNicDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVirtualSwitchSimpleBridge;
our @ISA = qw(HostVirtualSwitchBridge);

our @property_list = (
   ['nicDevice', undef, undef, 1],
);


VIMRuntime::make_get_set('HostVirtualSwitchSimpleBridge', 'nicDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVirtualSwitchBondBridge;
our @ISA = qw(HostVirtualSwitchBridge);

our @property_list = (
   ['nicDevice', undef, 1, 1],
   ['beacon', 'HostVirtualSwitchBeaconConfig', undef, 0],
   ['linkDiscoveryProtocolConfig', 'LinkDiscoveryProtocolConfig', undef, 0],
);


VIMRuntime::make_get_set('HostVirtualSwitchBondBridge', 'nicDevice', 'beacon', 'linkDiscoveryProtocolConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVirtualSwitchBeaconConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['interval', undef, undef, 1],
);


VIMRuntime::make_get_set('HostVirtualSwitchBeaconConfig', 'interval');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVirtualSwitchSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['numPorts', undef, undef, 1],
   ['bridge', 'HostVirtualSwitchBridge', undef, 0],
   ['policy', 'HostNetworkPolicy', undef, 0],
   ['mtu', undef, undef, 0],
);


VIMRuntime::make_get_set('HostVirtualSwitchSpec', 'numPorts', 'bridge', 'policy', 'mtu');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVirtualSwitchConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['changeOperation', undef, undef, 0],
   ['name', undef, undef, 1],
   ['spec', 'HostVirtualSwitchSpec', undef, 0],
);


VIMRuntime::make_get_set('HostVirtualSwitchConfig', 'changeOperation', 'name', 'spec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostVirtualSwitchConfig;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostVirtualSwitchConfig', 'HostVirtualSwitchConfig', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostVirtualSwitchConfig', 'HostVirtualSwitchConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVirtualSwitch;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['key', undef, undef, 1],
   ['numPorts', undef, undef, 1],
   ['numPortsAvailable', undef, undef, 1],
   ['mtu', undef, undef, 0],
   ['portgroup', undef, 1, 0],
   ['pnic', undef, 1, 0],
   ['spec', 'HostVirtualSwitchSpec', undef, 1],
);


VIMRuntime::make_get_set('HostVirtualSwitch', 'name', 'key', 'numPorts', 'numPortsAvailable', 'mtu', 'portgroup', 'pnic', 'spec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostVirtualSwitch;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostVirtualSwitch', 'HostVirtualSwitch', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostVirtualSwitch', 'HostVirtualSwitch');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVmciAccessManagerAccessSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 1],
   ['services', undef, 1, 0],
   ['mode', undef, undef, 1],
);


VIMRuntime::make_get_set('HostVmciAccessManagerAccessSpec', 'vm', 'services', 'mode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostVmciAccessManagerAccessSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostVmciAccessManagerAccessSpec', 'HostVmciAccessManagerAccessSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostVmciAccessManagerAccessSpec', 'HostVmciAccessManagerAccessSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVmfsRescanResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
   ['fault', 'LocalizedMethodFault', undef, 0],
);


VIMRuntime::make_get_set('HostVmfsRescanResult', 'host', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostVmfsRescanResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostVmfsRescanResult', 'HostVmfsRescanResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostVmfsRescanResult', 'HostVmfsRescanResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVmfsSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['extent', 'HostScsiDiskPartition', undef, 1],
   ['blockSizeMb', undef, undef, 0],
   ['majorVersion', undef, undef, 1],
   ['volumeName', undef, undef, 1],
   ['blockSize', undef, undef, 0],
   ['unmapGranularity', undef, undef, 0],
   ['unmapPriority', undef, undef, 0],
);


VIMRuntime::make_get_set('HostVmfsSpec', 'extent', 'blockSizeMb', 'majorVersion', 'volumeName', 'blockSize', 'unmapGranularity', 'unmapPriority');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmfsConfigOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['blockSizeOption', undef, undef, 1],
   ['unmapGranularityOption', undef, 1, 0],
);


VIMRuntime::make_get_set('VmfsConfigOption', 'blockSizeOption', 'unmapGranularityOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVmfsConfigOption;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VmfsConfigOption', 'VmfsConfigOption', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVmfsConfigOption', 'VmfsConfigOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVmfsVolume;
our @ISA = qw(HostFileSystemVolume);

our @property_list = (
   ['blockSizeMb', undef, undef, 1],
   ['blockSize', undef, undef, 0],
   ['unmapGranularity', undef, undef, 0],
   ['unmapPriority', undef, undef, 0],
   ['maxBlocks', undef, undef, 1],
   ['majorVersion', undef, undef, 1],
   ['version', undef, undef, 1],
   ['uuid', undef, undef, 1],
   ['extent', 'HostScsiDiskPartition', 1, 1],
   ['vmfsUpgradable', 'boolean', undef, 1],
   ['forceMountedInfo', 'HostForceMountedInfo', undef, 0],
   ['ssd', 'boolean', undef, 0],
   ['local', 'boolean', undef, 0],
   ['scsiDiskType', undef, undef, 0],
);


VIMRuntime::make_get_set('HostVmfsVolume', 'blockSizeMb', 'blockSize', 'unmapGranularity', 'unmapPriority', 'maxBlocks', 'majorVersion', 'version', 'uuid', 'extent', 'vmfsUpgradable', 'forceMountedInfo', 'ssd', 'local', 'scsiDiskType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVsanInternalSystemCmmdsQuery;
our @ISA = qw(DynamicData);

our @property_list = (
   ['type', undef, undef, 0],
   ['uuid', undef, undef, 0],
   ['owner', undef, undef, 0],
);


VIMRuntime::make_get_set('HostVsanInternalSystemCmmdsQuery', 'type', 'uuid', 'owner');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostVsanInternalSystemCmmdsQuery;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostVsanInternalSystemCmmdsQuery', 'HostVsanInternalSystemCmmdsQuery', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostVsanInternalSystemCmmdsQuery', 'HostVsanInternalSystemCmmdsQuery');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanPolicyCost;
our @ISA = qw(DynamicData);

our @property_list = (
   ['changeDataSize', undef, undef, 0],
   ['currentDataSize', undef, undef, 0],
   ['tempDataSize', undef, undef, 0],
   ['copyDataSize', undef, undef, 0],
   ['changeFlashReadCacheSize', undef, undef, 0],
   ['currentFlashReadCacheSize', undef, undef, 0],
   ['currentDiskSpaceToAddressSpaceRatio', undef, undef, 0],
   ['diskSpaceToAddressSpaceRatio', undef, undef, 0],
);


VIMRuntime::make_get_set('VsanPolicyCost', 'changeDataSize', 'currentDataSize', 'tempDataSize', 'copyDataSize', 'changeFlashReadCacheSize', 'currentFlashReadCacheSize', 'currentDiskSpaceToAddressSpaceRatio', 'diskSpaceToAddressSpaceRatio');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanPolicySatisfiability;
our @ISA = qw(DynamicData);

our @property_list = (
   ['uuid', undef, undef, 0],
   ['isSatisfiable', 'boolean', undef, 1],
   ['reason', 'LocalizableMessage', undef, 0],
   ['cost', 'VsanPolicyCost', undef, 0],
);


VIMRuntime::make_get_set('VsanPolicySatisfiability', 'uuid', 'isSatisfiable', 'reason', 'cost');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVsanPolicySatisfiability;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VsanPolicySatisfiability', 'VsanPolicySatisfiability', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVsanPolicySatisfiability', 'VsanPolicySatisfiability');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanPolicyChangeBatch;
our @ISA = qw(DynamicData);

our @property_list = (
   ['uuid', undef, 1, 0],
   ['policy', undef, undef, 0],
);


VIMRuntime::make_get_set('VsanPolicyChangeBatch', 'uuid', 'policy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVsanPolicyChangeBatch;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VsanPolicyChangeBatch', 'VsanPolicyChangeBatch', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVsanPolicyChangeBatch', 'VsanPolicyChangeBatch');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanNewPolicyBatch;
our @ISA = qw(DynamicData);

our @property_list = (
   ['size', undef, 1, 0],
   ['policy', undef, undef, 0],
);


VIMRuntime::make_get_set('VsanNewPolicyBatch', 'size', 'policy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVsanNewPolicyBatch;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VsanNewPolicyBatch', 'VsanNewPolicyBatch', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVsanNewPolicyBatch', 'VsanNewPolicyBatch');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['diskUuid', undef, undef, 1],
   ['success', 'boolean', undef, 1],
   ['failureReason', undef, undef, 0],
);


VIMRuntime::make_get_set('HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult', 'diskUuid', 'success', 'failureReason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult', 'HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult', 'HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVsanInternalSystemDeleteVsanObjectsResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['uuid', undef, undef, 1],
   ['success', 'boolean', undef, 1],
   ['failureReason', 'LocalizableMessage', 1, 0],
);


VIMRuntime::make_get_set('HostVsanInternalSystemDeleteVsanObjectsResult', 'uuid', 'success', 'failureReason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostVsanInternalSystemDeleteVsanObjectsResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostVsanInternalSystemDeleteVsanObjectsResult', 'HostVsanInternalSystemDeleteVsanObjectsResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostVsanInternalSystemDeleteVsanObjectsResult', 'HostVsanInternalSystemDeleteVsanObjectsResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVsanInternalSystemVsanObjectOperationResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['uuid', undef, undef, 1],
   ['failureReason', 'LocalizableMessage', 1, 0],
);


VIMRuntime::make_get_set('HostVsanInternalSystemVsanObjectOperationResult', 'uuid', 'failureReason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostVsanInternalSystemVsanObjectOperationResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostVsanInternalSystemVsanObjectOperationResult', 'HostVsanInternalSystemVsanObjectOperationResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostVsanInternalSystemVsanObjectOperationResult', 'HostVsanInternalSystemVsanObjectOperationResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVvolVolumeSpecification;
our @ISA = qw(DynamicData);

our @property_list = (
   ['maxSizeInMB', undef, undef, 1],
   ['volumeName', undef, undef, 1],
   ['vasaProviderInfo', 'VimVasaProviderInfo', 1, 0],
   ['storageArray', 'VASAStorageArray', 1, 0],
   ['uuid', undef, undef, 1],
);


VIMRuntime::make_get_set('HostVvolVolumeSpecification', 'maxSizeInMB', 'volumeName', 'vasaProviderInfo', 'storageArray', 'uuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VVolHostPE;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', 'ManagedObjectReference', undef, 1],
   ['protocolEndpoint', 'HostProtocolEndpoint', 1, 1],
);


VIMRuntime::make_get_set('VVolHostPE', 'key', 'protocolEndpoint');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVVolHostPE;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VVolHostPE', 'VVolHostPE', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVVolHostPE', 'VVolHostPE');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostVvolVolume;
our @ISA = qw(HostFileSystemVolume);

our @property_list = (
   ['scId', undef, undef, 1],
   ['hostPE', 'VVolHostPE', 1, 0],
   ['vasaProviderInfo', 'VimVasaProviderInfo', 1, 0],
   ['storageArray', 'VASAStorageArray', 1, 0],
);


VIMRuntime::make_get_set('HostVvolVolume', 'scId', 'hostPE', 'vasaProviderInfo', 'storageArray');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetDhcpConfigInfoDhcpOptions;
our @ISA = qw(DynamicData);

our @property_list = (
   ['enable', 'boolean', undef, 1],
   ['config', 'KeyValue', 1, 0],
);


VIMRuntime::make_get_set('NetDhcpConfigInfoDhcpOptions', 'enable', 'config');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetDhcpConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipv6', 'NetDhcpConfigInfoDhcpOptions', undef, 0],
   ['ipv4', 'NetDhcpConfigInfoDhcpOptions', undef, 0],
);


VIMRuntime::make_get_set('NetDhcpConfigInfo', 'ipv6', 'ipv4');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetDhcpConfigSpecDhcpOptionsSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['enable', 'boolean', undef, 0],
   ['config', 'KeyValue', 1, 1],
   ['operation', undef, undef, 1],
);


VIMRuntime::make_get_set('NetDhcpConfigSpecDhcpOptionsSpec', 'enable', 'config', 'operation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetDhcpConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipv6', 'NetDhcpConfigSpecDhcpOptionsSpec', undef, 0],
   ['ipv4', 'NetDhcpConfigSpecDhcpOptionsSpec', undef, 0],
);


VIMRuntime::make_get_set('NetDhcpConfigSpec', 'ipv6', 'ipv4');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetDnsConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['dhcp', 'boolean', undef, 1],
   ['hostName', undef, undef, 1],
   ['domainName', undef, undef, 1],
   ['ipAddress', undef, 1, 0],
   ['searchDomain', undef, 1, 0],
);


VIMRuntime::make_get_set('NetDnsConfigInfo', 'dhcp', 'hostName', 'domainName', 'ipAddress', 'searchDomain');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetDnsConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['dhcp', 'boolean', undef, 0],
   ['hostName', undef, undef, 0],
   ['domainName', undef, undef, 0],
   ['ipAddress', undef, 1, 0],
   ['searchDomain', undef, 1, 0],
);


VIMRuntime::make_get_set('NetDnsConfigSpec', 'dhcp', 'hostName', 'domainName', 'ipAddress', 'searchDomain');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetIpConfigInfoIpAddress;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipAddress', undef, undef, 1],
   ['prefixLength', undef, undef, 1],
   ['origin', undef, undef, 0],
   ['state', undef, undef, 0],
   ['lifetime', undef, undef, 0],
);


VIMRuntime::make_get_set('NetIpConfigInfoIpAddress', 'ipAddress', 'prefixLength', 'origin', 'state', 'lifetime');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfNetIpConfigInfoIpAddress;
our @ISA = qw(ComplexType);

our @property_list = (
   ['NetIpConfigInfoIpAddress', 'NetIpConfigInfoIpAddress', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfNetIpConfigInfoIpAddress', 'NetIpConfigInfoIpAddress');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetIpConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipAddress', 'NetIpConfigInfoIpAddress', 1, 0],
   ['dhcp', 'NetDhcpConfigInfo', undef, 0],
   ['autoConfigurationEnabled', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('NetIpConfigInfo', 'ipAddress', 'dhcp', 'autoConfigurationEnabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetIpConfigSpecIpAddressSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipAddress', undef, undef, 1],
   ['prefixLength', undef, undef, 1],
   ['operation', undef, undef, 1],
);


VIMRuntime::make_get_set('NetIpConfigSpecIpAddressSpec', 'ipAddress', 'prefixLength', 'operation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfNetIpConfigSpecIpAddressSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['NetIpConfigSpecIpAddressSpec', 'NetIpConfigSpecIpAddressSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfNetIpConfigSpecIpAddressSpec', 'NetIpConfigSpecIpAddressSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetIpConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipAddress', 'NetIpConfigSpecIpAddressSpec', 1, 0],
   ['dhcp', 'NetDhcpConfigSpec', undef, 0],
   ['autoConfigurationEnabled', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('NetIpConfigSpec', 'ipAddress', 'dhcp', 'autoConfigurationEnabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetIpRouteConfigInfoGateway;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipAddress', undef, undef, 0],
   ['device', undef, undef, 0],
);


VIMRuntime::make_get_set('NetIpRouteConfigInfoGateway', 'ipAddress', 'device');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetIpRouteConfigInfoIpRoute;
our @ISA = qw(DynamicData);

our @property_list = (
   ['network', undef, undef, 1],
   ['prefixLength', undef, undef, 1],
   ['gateway', 'NetIpRouteConfigInfoGateway', undef, 1],
);


VIMRuntime::make_get_set('NetIpRouteConfigInfoIpRoute', 'network', 'prefixLength', 'gateway');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfNetIpRouteConfigInfoIpRoute;
our @ISA = qw(ComplexType);

our @property_list = (
   ['NetIpRouteConfigInfoIpRoute', 'NetIpRouteConfigInfoIpRoute', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfNetIpRouteConfigInfoIpRoute', 'NetIpRouteConfigInfoIpRoute');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetIpRouteConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipRoute', 'NetIpRouteConfigInfoIpRoute', 1, 0],
);


VIMRuntime::make_get_set('NetIpRouteConfigInfo', 'ipRoute');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetIpRouteConfigSpecGatewaySpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipAddress', undef, undef, 0],
   ['device', undef, undef, 0],
);


VIMRuntime::make_get_set('NetIpRouteConfigSpecGatewaySpec', 'ipAddress', 'device');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetIpRouteConfigSpecIpRouteSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['network', undef, undef, 1],
   ['prefixLength', undef, undef, 1],
   ['gateway', 'NetIpRouteConfigSpecGatewaySpec', undef, 1],
   ['operation', undef, undef, 1],
);


VIMRuntime::make_get_set('NetIpRouteConfigSpecIpRouteSpec', 'network', 'prefixLength', 'gateway', 'operation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfNetIpRouteConfigSpecIpRouteSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['NetIpRouteConfigSpecIpRouteSpec', 'NetIpRouteConfigSpecIpRouteSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfNetIpRouteConfigSpecIpRouteSpec', 'NetIpRouteConfigSpecIpRouteSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetIpRouteConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipRoute', 'NetIpRouteConfigSpecIpRouteSpec', 1, 0],
);


VIMRuntime::make_get_set('NetIpRouteConfigSpec', 'ipRoute');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetIpStackInfoNetToMedia;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipAddress', undef, undef, 1],
   ['physicalAddress', undef, undef, 1],
   ['device', undef, undef, 1],
   ['type', undef, undef, 1],
);


VIMRuntime::make_get_set('NetIpStackInfoNetToMedia', 'ipAddress', 'physicalAddress', 'device', 'type');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfNetIpStackInfoNetToMedia;
our @ISA = qw(ComplexType);

our @property_list = (
   ['NetIpStackInfoNetToMedia', 'NetIpStackInfoNetToMedia', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfNetIpStackInfoNetToMedia', 'NetIpStackInfoNetToMedia');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetIpStackInfoDefaultRouter;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipAddress', undef, undef, 1],
   ['device', undef, undef, 1],
   ['lifetime', undef, undef, 1],
   ['preference', undef, undef, 1],
);


VIMRuntime::make_get_set('NetIpStackInfoDefaultRouter', 'ipAddress', 'device', 'lifetime', 'preference');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfNetIpStackInfoDefaultRouter;
our @ISA = qw(ComplexType);

our @property_list = (
   ['NetIpStackInfoDefaultRouter', 'NetIpStackInfoDefaultRouter', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfNetIpStackInfoDefaultRouter', 'NetIpStackInfoDefaultRouter');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetIpStackInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['neighbor', 'NetIpStackInfoNetToMedia', 1, 0],
   ['defaultRouter', 'NetIpStackInfoDefaultRouter', 1, 0],
);


VIMRuntime::make_get_set('NetIpStackInfo', 'neighbor', 'defaultRouter');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetBIOSConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['mode', undef, undef, 1],
);


VIMRuntime::make_get_set('NetBIOSConfigInfo', 'mode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package WinNetBIOSConfigInfo;
our @ISA = qw(NetBIOSConfigInfo);

our @property_list = (
   ['primaryWINS', undef, undef, 1],
   ['secondaryWINS', undef, undef, 0],
);


VIMRuntime::make_get_set('WinNetBIOSConfigInfo', 'primaryWINS', 'secondaryWINS');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayUpdateSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['operation', 'ArrayUpdateOperation', undef, 1],
   ['removeKey', 'anyType', undef, 0],
);


VIMRuntime::make_get_set('ArrayUpdateSpec', 'operation', 'removeKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package BoolOption;
our @ISA = qw(OptionType);

our @property_list = (
   ['supported', 'boolean', undef, 1],
   ['defaultValue', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('BoolOption', 'supported', 'defaultValue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ChoiceOption;
our @ISA = qw(OptionType);

our @property_list = (
   ['choiceInfo', 'ElementDescription', 1, 1],
   ['defaultIndex', undef, undef, 0],
);


VIMRuntime::make_get_set('ChoiceOption', 'choiceInfo', 'defaultIndex');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FloatOption;
our @ISA = qw(OptionType);

our @property_list = (
   ['min', undef, undef, 1],
   ['max', undef, undef, 1],
   ['defaultValue', undef, undef, 1],
);


VIMRuntime::make_get_set('FloatOption', 'min', 'max', 'defaultValue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IntOption;
our @ISA = qw(OptionType);

our @property_list = (
   ['min', undef, undef, 1],
   ['max', undef, undef, 1],
   ['defaultValue', undef, undef, 1],
);


VIMRuntime::make_get_set('IntOption', 'min', 'max', 'defaultValue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LongOption;
our @ISA = qw(OptionType);

our @property_list = (
   ['min', undef, undef, 1],
   ['max', undef, undef, 1],
   ['defaultValue', undef, undef, 1],
);


VIMRuntime::make_get_set('LongOption', 'min', 'max', 'defaultValue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OptionDef;
our @ISA = qw(ElementDescription);

our @property_list = (
   ['optionType', 'OptionType', undef, 1],
);


VIMRuntime::make_get_set('OptionDef', 'optionType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfOptionDef;
our @ISA = qw(ComplexType);

our @property_list = (
   ['OptionDef', 'OptionDef', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfOptionDef', 'OptionDef');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OptionType;
our @ISA = qw(DynamicData);

our @property_list = (
   ['valueIsReadonly', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('OptionType', 'valueIsReadonly');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OptionValue;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['value', 'anyType', undef, 0],
);


VIMRuntime::make_get_set('OptionValue', 'key', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfOptionValue;
our @ISA = qw(ComplexType);

our @property_list = (
   ['OptionValue', 'OptionValue', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfOptionValue', 'OptionValue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StringOption;
our @ISA = qw(OptionType);

our @property_list = (
   ['defaultValue', undef, undef, 1],
   ['validCharacters', undef, undef, 0],
);


VIMRuntime::make_get_set('StringOption', 'defaultValue', 'validCharacters');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ApplyProfile;
our @ISA = qw(DynamicData);

our @property_list = (
   ['enabled', 'boolean', undef, 1],
   ['policy', 'ProfilePolicy', 1, 0],
   ['profileTypeName', undef, undef, 0],
   ['profileVersion', undef, undef, 0],
   ['property', 'ProfileApplyProfileProperty', 1, 0],
   ['favorite', 'boolean', undef, 0],
   ['toBeMerged', 'boolean', undef, 0],
   ['toReplaceWith', 'boolean', undef, 0],
   ['toBeDeleted', 'boolean', undef, 0],
   ['copyEnableStatus', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('ApplyProfile', 'enabled', 'policy', 'profileTypeName', 'profileVersion', 'property', 'favorite', 'toBeMerged', 'toReplaceWith', 'toBeDeleted', 'copyEnableStatus');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfApplyProfile;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ApplyProfile', 'ApplyProfile', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfApplyProfile', 'ApplyProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileApplyProfileElement;
our @ISA = qw(ApplyProfile);

our @property_list = (
   ['key', undef, undef, 1],
);


VIMRuntime::make_get_set('ProfileApplyProfileElement', 'key');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileApplyProfileProperty;
our @ISA = qw(DynamicData);

our @property_list = (
   ['propertyName', undef, undef, 1],
   ['array', 'boolean', undef, 1],
   ['profile', 'ApplyProfile', 1, 0],
);


VIMRuntime::make_get_set('ProfileApplyProfileProperty', 'propertyName', 'array', 'profile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfProfileApplyProfileProperty;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ProfileApplyProfileProperty', 'ProfileApplyProfileProperty', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfProfileApplyProfileProperty', 'ProfileApplyProfileProperty');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ComplianceLocator;
our @ISA = qw(DynamicData);

our @property_list = (
   ['expressionName', undef, undef, 1],
   ['applyPath', 'ProfilePropertyPath', undef, 1],
);


VIMRuntime::make_get_set('ComplianceLocator', 'expressionName', 'applyPath');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfComplianceLocator;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ComplianceLocator', 'ComplianceLocator', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfComplianceLocator', 'ComplianceLocator');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ComplianceProfile;
our @ISA = qw(DynamicData);

our @property_list = (
   ['expression', 'ProfileExpression', 1, 1],
   ['rootExpression', undef, undef, 1],
);


VIMRuntime::make_get_set('ComplianceProfile', 'expression', 'rootExpression');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ComplianceFailureComplianceFailureValues;
our @ISA = qw(DynamicData);

our @property_list = (
   ['comparisonIdentifier', undef, undef, 1],
   ['profileInstance', undef, undef, 0],
   ['hostValue', 'anyType', undef, 0],
   ['profileValue', 'anyType', undef, 0],
);


VIMRuntime::make_get_set('ComplianceFailureComplianceFailureValues', 'comparisonIdentifier', 'profileInstance', 'hostValue', 'profileValue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfComplianceFailureComplianceFailureValues;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ComplianceFailureComplianceFailureValues', 'ComplianceFailureComplianceFailureValues', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfComplianceFailureComplianceFailureValues', 'ComplianceFailureComplianceFailureValues');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ComplianceFailure;
our @ISA = qw(DynamicData);

our @property_list = (
   ['failureType', undef, undef, 1],
   ['message', 'LocalizableMessage', undef, 1],
   ['expressionName', undef, undef, 0],
   ['failureValues', 'ComplianceFailureComplianceFailureValues', 1, 0],
);


VIMRuntime::make_get_set('ComplianceFailure', 'failureType', 'message', 'expressionName', 'failureValues');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfComplianceFailure;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ComplianceFailure', 'ComplianceFailure', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfComplianceFailure', 'ComplianceFailure');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ComplianceResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['profile', 'ManagedObjectReference', undef, 0],
   ['complianceStatus', undef, undef, 1],
   ['entity', 'ManagedObjectReference', undef, 0],
   ['checkTime', undef, undef, 0],
   ['failure', 'ComplianceFailure', 1, 0],
);


VIMRuntime::make_get_set('ComplianceResult', 'profile', 'complianceStatus', 'entity', 'checkTime', 'failure');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfComplianceResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ComplianceResult', 'ComplianceResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfComplianceResult', 'ComplianceResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileDeferredPolicyOptionParameter;
our @ISA = qw(DynamicData);

our @property_list = (
   ['inputPath', 'ProfilePropertyPath', undef, 1],
   ['parameter', 'KeyAnyValue', 1, 0],
);


VIMRuntime::make_get_set('ProfileDeferredPolicyOptionParameter', 'inputPath', 'parameter');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfProfileDeferredPolicyOptionParameter;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ProfileDeferredPolicyOptionParameter', 'ProfileDeferredPolicyOptionParameter', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfProfileDeferredPolicyOptionParameter', 'ProfileDeferredPolicyOptionParameter');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileExpression;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
   ['displayName', undef, undef, 1],
   ['negated', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('ProfileExpression', 'id', 'displayName', 'negated');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfProfileExpression;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ProfileExpression', 'ProfileExpression', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfProfileExpression', 'ProfileExpression');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileSimpleExpression;
our @ISA = qw(ProfileExpression);

our @property_list = (
   ['expressionType', undef, undef, 1],
   ['parameter', 'KeyAnyValue', 1, 0],
);


VIMRuntime::make_get_set('ProfileSimpleExpression', 'expressionType', 'parameter');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileCompositeExpression;
our @ISA = qw(ProfileExpression);

our @property_list = (
   ['operator', undef, undef, 1],
   ['expressionName', undef, 1, 1],
);


VIMRuntime::make_get_set('ProfileCompositeExpression', 'operator', 'expressionName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileExpressionMetadata;
our @ISA = qw(DynamicData);

our @property_list = (
   ['expressionId', 'ExtendedElementDescription', undef, 1],
   ['parameter', 'ProfileParameterMetadata', 1, 0],
);


VIMRuntime::make_get_set('ProfileExpressionMetadata', 'expressionId', 'parameter');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfProfileExpressionMetadata;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ProfileExpressionMetadata', 'ProfileExpressionMetadata', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfProfileExpressionMetadata', 'ProfileExpressionMetadata');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileParameterMetadata;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', 'ExtendedElementDescription', undef, 1],
   ['type', undef, undef, 1],
   ['optional', 'boolean', undef, 1],
   ['defaultValue', 'anyType', undef, 0],
   ['hidden', 'boolean', undef, 0],
   ['securitySensitive', 'boolean', undef, 0],
   ['readOnly', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('ProfileParameterMetadata', 'id', 'type', 'optional', 'defaultValue', 'hidden', 'securitySensitive', 'readOnly');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfProfileParameterMetadata;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ProfileParameterMetadata', 'ProfileParameterMetadata', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfProfileParameterMetadata', 'ProfileParameterMetadata');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfilePolicy;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
   ['policyOption', 'PolicyOption', undef, 1],
);


VIMRuntime::make_get_set('ProfilePolicy', 'id', 'policyOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfProfilePolicy;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ProfilePolicy', 'ProfilePolicy', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfProfilePolicy', 'ProfilePolicy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfilePolicyOptionMetadata;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', 'ExtendedElementDescription', undef, 1],
   ['parameter', 'ProfileParameterMetadata', 1, 0],
);


VIMRuntime::make_get_set('ProfilePolicyOptionMetadata', 'id', 'parameter');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfProfilePolicyOptionMetadata;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ProfilePolicyOptionMetadata', 'ProfilePolicyOptionMetadata', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfProfilePolicyOptionMetadata', 'ProfilePolicyOptionMetadata');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileCompositePolicyOptionMetadata;
our @ISA = qw(ProfilePolicyOptionMetadata);

our @property_list = (
   ['option', undef, 1, 1],
);


VIMRuntime::make_get_set('ProfileCompositePolicyOptionMetadata', 'option');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UserInputRequiredParameterMetadata;
our @ISA = qw(ProfilePolicyOptionMetadata);

our @property_list = (
   ['userInputParameter', 'ProfileParameterMetadata', 1, 0],
);


VIMRuntime::make_get_set('UserInputRequiredParameterMetadata', 'userInputParameter');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfilePolicyMetadata;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', 'ExtendedElementDescription', undef, 1],
   ['possibleOption', 'ProfilePolicyOptionMetadata', 1, 1],
);


VIMRuntime::make_get_set('ProfilePolicyMetadata', 'id', 'possibleOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfProfilePolicyMetadata;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ProfilePolicyMetadata', 'ProfilePolicyMetadata', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfProfilePolicyMetadata', 'ProfilePolicyMetadata');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PolicyOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
   ['parameter', 'KeyAnyValue', 1, 0],
);


VIMRuntime::make_get_set('PolicyOption', 'id', 'parameter');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPolicyOption;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PolicyOption', 'PolicyOption', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPolicyOption', 'PolicyOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CompositePolicyOption;
our @ISA = qw(PolicyOption);

our @property_list = (
   ['option', 'PolicyOption', 1, 0],
);


VIMRuntime::make_get_set('CompositePolicyOption', 'option');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileCreateSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 0],
   ['annotation', undef, undef, 0],
   ['enabled', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('ProfileCreateSpec', 'name', 'annotation', 'enabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileSerializedCreateSpec;
our @ISA = qw(ProfileCreateSpec);

our @property_list = (
   ['profileConfigString', undef, undef, 1],
);


VIMRuntime::make_get_set('ProfileSerializedCreateSpec', 'profileConfigString');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['annotation', undef, undef, 0],
   ['enabled', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('ProfileConfigInfo', 'name', 'annotation', 'enabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileDescriptionSection;
our @ISA = qw(DynamicData);

our @property_list = (
   ['description', 'ExtendedElementDescription', undef, 1],
   ['message', 'LocalizableMessage', 1, 0],
);


VIMRuntime::make_get_set('ProfileDescriptionSection', 'description', 'message');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfProfileDescriptionSection;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ProfileDescriptionSection', 'ProfileDescriptionSection', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfProfileDescriptionSection', 'ProfileDescriptionSection');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileDescription;
our @ISA = qw(DynamicData);

our @property_list = (
   ['section', 'ProfileDescriptionSection', 1, 1],
);


VIMRuntime::make_get_set('ProfileDescription', 'section');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileMetadataProfileSortSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['policyId', undef, undef, 1],
   ['parameter', undef, undef, 1],
);


VIMRuntime::make_get_set('ProfileMetadataProfileSortSpec', 'policyId', 'parameter');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfProfileMetadataProfileSortSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ProfileMetadataProfileSortSpec', 'ProfileMetadataProfileSortSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfProfileMetadataProfileSortSpec', 'ProfileMetadataProfileSortSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileMetadata;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['profileTypeName', undef, undef, 0],
   ['description', 'ExtendedDescription', undef, 0],
   ['sortSpec', 'ProfileMetadataProfileSortSpec', 1, 0],
   ['profileCategory', undef, undef, 0],
   ['profileComponent', undef, undef, 0],
);


VIMRuntime::make_get_set('ProfileMetadata', 'key', 'profileTypeName', 'description', 'sortSpec', 'profileCategory', 'profileComponent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfProfileMetadata;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ProfileMetadata', 'ProfileMetadata', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfProfileMetadata', 'ProfileMetadata');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfilePropertyPath;
our @ISA = qw(DynamicData);

our @property_list = (
   ['profilePath', undef, undef, 1],
   ['policyId', undef, undef, 0],
   ['parameterId', undef, undef, 0],
);


VIMRuntime::make_get_set('ProfilePropertyPath', 'profilePath', 'policyId', 'parameterId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfProfilePropertyPath;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ProfilePropertyPath', 'ProfilePropertyPath', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfProfilePropertyPath', 'ProfilePropertyPath');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileProfileStructure;
our @ISA = qw(DynamicData);

our @property_list = (
   ['profileTypeName', undef, undef, 1],
   ['child', 'ProfileProfileStructureProperty', 1, 0],
);


VIMRuntime::make_get_set('ProfileProfileStructure', 'profileTypeName', 'child');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileProfileStructureProperty;
our @ISA = qw(DynamicData);

our @property_list = (
   ['propertyName', undef, undef, 1],
   ['array', 'boolean', undef, 1],
   ['element', 'ProfileProfileStructure', undef, 1],
);


VIMRuntime::make_get_set('ProfileProfileStructureProperty', 'propertyName', 'array', 'element');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfProfileProfileStructureProperty;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ProfileProfileStructureProperty', 'ProfileProfileStructureProperty', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfProfileProfileStructureProperty', 'ProfileProfileStructureProperty');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterProfileConfigInfo;
our @ISA = qw(ProfileConfigInfo);

our @property_list = (
   ['complyProfile', 'ComplianceProfile', undef, 0],
);


VIMRuntime::make_get_set('ClusterProfileConfigInfo', 'complyProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterProfileCreateSpec;
our @ISA = qw(ProfileCreateSpec);

our @property_list = (
);


VIMRuntime::make_get_set('ClusterProfileCreateSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterProfileConfigSpec;
our @ISA = qw(ClusterProfileCreateSpec);

our @property_list = (
);


VIMRuntime::make_get_set('ClusterProfileConfigSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterProfileCompleteConfigSpec;
our @ISA = qw(ClusterProfileConfigSpec);

our @property_list = (
   ['complyProfile', 'ComplianceProfile', undef, 0],
);


VIMRuntime::make_get_set('ClusterProfileCompleteConfigSpec', 'complyProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterProfileConfigServiceCreateSpec;
our @ISA = qw(ClusterProfileConfigSpec);

our @property_list = (
   ['serviceType', undef, 1, 0],
);


VIMRuntime::make_get_set('ClusterProfileConfigServiceCreateSpec', 'serviceType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AnswerFile;
our @ISA = qw(DynamicData);

our @property_list = (
   ['userInput', 'ProfileDeferredPolicyOptionParameter', 1, 0],
   ['createdTime', undef, undef, 1],
   ['modifiedTime', undef, undef, 1],
);


VIMRuntime::make_get_set('AnswerFile', 'userInput', 'createdTime', 'modifiedTime');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AnswerFileStatusError;
our @ISA = qw(DynamicData);

our @property_list = (
   ['userInputPath', 'ProfilePropertyPath', undef, 1],
   ['errMsg', 'LocalizableMessage', undef, 1],
);


VIMRuntime::make_get_set('AnswerFileStatusError', 'userInputPath', 'errMsg');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfAnswerFileStatusError;
our @ISA = qw(ComplexType);

our @property_list = (
   ['AnswerFileStatusError', 'AnswerFileStatusError', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfAnswerFileStatusError', 'AnswerFileStatusError');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AnswerFileStatusResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['checkedTime', undef, undef, 1],
   ['host', 'ManagedObjectReference', undef, 1],
   ['status', undef, undef, 1],
   ['error', 'AnswerFileStatusError', 1, 0],
);


VIMRuntime::make_get_set('AnswerFileStatusResult', 'checkedTime', 'host', 'status', 'error');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfAnswerFileStatusResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['AnswerFileStatusResult', 'AnswerFileStatusResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfAnswerFileStatusResult', 'AnswerFileStatusResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileExecuteError;
our @ISA = qw(DynamicData);

our @property_list = (
   ['path', 'ProfilePropertyPath', undef, 0],
   ['message', 'LocalizableMessage', undef, 1],
);


VIMRuntime::make_get_set('ProfileExecuteError', 'path', 'message');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfProfileExecuteError;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ProfileExecuteError', 'ProfileExecuteError', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfProfileExecuteError', 'ProfileExecuteError');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ProfileExecuteResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['status', undef, undef, 1],
   ['configSpec', 'HostConfigSpec', undef, 0],
   ['inapplicablePath', undef, 1, 0],
   ['requireInput', 'ProfileDeferredPolicyOptionParameter', 1, 0],
   ['error', 'ProfileExecuteError', 1, 0],
);


VIMRuntime::make_get_set('ProfileExecuteResult', 'status', 'configSpec', 'inapplicablePath', 'requireInput', 'error');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostApplyProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
   ['memory', 'HostMemoryProfile', undef, 0],
   ['storage', 'StorageProfile', undef, 0],
   ['network', 'NetworkProfile', undef, 0],
   ['datetime', 'DateTimeProfile', undef, 0],
   ['firewall', 'FirewallProfile', undef, 0],
   ['security', 'SecurityProfile', undef, 0],
   ['service', 'ServiceProfile', 1, 0],
   ['option', 'OptionProfile', 1, 0],
   ['userAccount', 'UserProfile', 1, 0],
   ['usergroupAccount', 'UserGroupProfile', 1, 0],
   ['authentication', 'AuthenticationProfile', undef, 0],
);


VIMRuntime::make_get_set('HostApplyProfile', 'memory', 'storage', 'network', 'datetime', 'firewall', 'security', 'service', 'option', 'userAccount', 'usergroupAccount', 'authentication');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PhysicalNicProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
   ['key', undef, undef, 1],
);


VIMRuntime::make_get_set('PhysicalNicProfile', 'key');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPhysicalNicProfile;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PhysicalNicProfile', 'PhysicalNicProfile', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPhysicalNicProfile', 'PhysicalNicProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostMemoryProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
);


VIMRuntime::make_get_set('HostMemoryProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UserProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
   ['key', undef, undef, 1],
);


VIMRuntime::make_get_set('UserProfile', 'key');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfUserProfile;
our @ISA = qw(ComplexType);

our @property_list = (
   ['UserProfile', 'UserProfile', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfUserProfile', 'UserProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UserGroupProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
   ['key', undef, undef, 1],
);


VIMRuntime::make_get_set('UserGroupProfile', 'key');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfUserGroupProfile;
our @ISA = qw(ComplexType);

our @property_list = (
   ['UserGroupProfile', 'UserGroupProfile', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfUserGroupProfile', 'UserGroupProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SecurityProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
   ['permission', 'PermissionProfile', 1, 0],
);


VIMRuntime::make_get_set('SecurityProfile', 'permission');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OptionProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
   ['key', undef, undef, 1],
);


VIMRuntime::make_get_set('OptionProfile', 'key');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfOptionProfile;
our @ISA = qw(ComplexType);

our @property_list = (
   ['OptionProfile', 'OptionProfile', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfOptionProfile', 'OptionProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DateTimeProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
);


VIMRuntime::make_get_set('DateTimeProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ServiceProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
   ['key', undef, undef, 1],
);


VIMRuntime::make_get_set('ServiceProfile', 'key');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfServiceProfile;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ServiceProfile', 'ServiceProfile', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfServiceProfile', 'ServiceProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FirewallProfileRulesetProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
   ['key', undef, undef, 1],
);


VIMRuntime::make_get_set('FirewallProfileRulesetProfile', 'key');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfFirewallProfileRulesetProfile;
our @ISA = qw(ComplexType);

our @property_list = (
   ['FirewallProfileRulesetProfile', 'FirewallProfileRulesetProfile', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfFirewallProfileRulesetProfile', 'FirewallProfileRulesetProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FirewallProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
   ['ruleset', 'FirewallProfileRulesetProfile', 1, 0],
);


VIMRuntime::make_get_set('FirewallProfile', 'ruleset');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NasStorageProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
   ['key', undef, undef, 1],
);


VIMRuntime::make_get_set('NasStorageProfile', 'key');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfNasStorageProfile;
our @ISA = qw(ComplexType);

our @property_list = (
   ['NasStorageProfile', 'NasStorageProfile', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfNasStorageProfile', 'NasStorageProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
   ['nasStorage', 'NasStorageProfile', 1, 0],
);


VIMRuntime::make_get_set('StorageProfile', 'nasStorage');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetworkProfileDnsConfigProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
);


VIMRuntime::make_get_set('NetworkProfileDnsConfigProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetworkProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
   ['vswitch', 'VirtualSwitchProfile', 1, 0],
   ['vmPortGroup', 'VmPortGroupProfile', 1, 0],
   ['hostPortGroup', 'HostPortGroupProfile', 1, 0],
   ['serviceConsolePortGroup', 'ServiceConsolePortGroupProfile', 1, 0],
   ['dnsConfig', 'NetworkProfileDnsConfigProfile', undef, 0],
   ['ipRouteConfig', 'IpRouteProfile', undef, 0],
   ['consoleIpRouteConfig', 'IpRouteProfile', undef, 0],
   ['pnic', 'PhysicalNicProfile', 1, 0],
   ['dvswitch', 'DvsProfile', 1, 0],
   ['dvsServiceConsoleNic', 'DvsServiceConsoleVNicProfile', 1, 0],
   ['dvsHostNic', 'DvsHostVNicProfile', 1, 0],
   ['netStackInstance', 'NetStackInstanceProfile', 1, 0],
);


VIMRuntime::make_get_set('NetworkProfile', 'vswitch', 'vmPortGroup', 'hostPortGroup', 'serviceConsolePortGroup', 'dnsConfig', 'ipRouteConfig', 'consoleIpRouteConfig', 'pnic', 'dvswitch', 'dvsServiceConsoleNic', 'dvsHostNic', 'netStackInstance');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsVNicProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
   ['key', undef, undef, 1],
   ['ipConfig', 'IpAddressProfile', undef, 1],
);


VIMRuntime::make_get_set('DvsVNicProfile', 'key', 'ipConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsServiceConsoleVNicProfile;
our @ISA = qw(DvsVNicProfile);

our @property_list = (
);


VIMRuntime::make_get_set('DvsServiceConsoleVNicProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDvsServiceConsoleVNicProfile;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DvsServiceConsoleVNicProfile', 'DvsServiceConsoleVNicProfile', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDvsServiceConsoleVNicProfile', 'DvsServiceConsoleVNicProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsHostVNicProfile;
our @ISA = qw(DvsVNicProfile);

our @property_list = (
);


VIMRuntime::make_get_set('DvsHostVNicProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDvsHostVNicProfile;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DvsHostVNicProfile', 'DvsHostVNicProfile', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDvsHostVNicProfile', 'DvsHostVNicProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DvsProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
   ['key', undef, undef, 1],
   ['name', undef, undef, 1],
   ['uplink', 'PnicUplinkProfile', 1, 0],
);


VIMRuntime::make_get_set('DvsProfile', 'key', 'name', 'uplink');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDvsProfile;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DvsProfile', 'DvsProfile', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDvsProfile', 'DvsProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PnicUplinkProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
   ['key', undef, undef, 1],
);


VIMRuntime::make_get_set('PnicUplinkProfile', 'key');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPnicUplinkProfile;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PnicUplinkProfile', 'PnicUplinkProfile', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPnicUplinkProfile', 'PnicUplinkProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IpRouteProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
   ['staticRoute', 'StaticRouteProfile', 1, 0],
);


VIMRuntime::make_get_set('IpRouteProfile', 'staticRoute');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StaticRouteProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
   ['key', undef, undef, 0],
);


VIMRuntime::make_get_set('StaticRouteProfile', 'key');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfStaticRouteProfile;
our @ISA = qw(ComplexType);

our @property_list = (
   ['StaticRouteProfile', 'StaticRouteProfile', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfStaticRouteProfile', 'StaticRouteProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LinkProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
);


VIMRuntime::make_get_set('LinkProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NumPortsProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
);


VIMRuntime::make_get_set('NumPortsProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSwitchProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
   ['key', undef, undef, 1],
   ['name', undef, undef, 1],
   ['link', 'LinkProfile', undef, 1],
   ['numPorts', 'NumPortsProfile', undef, 1],
   ['networkPolicy', 'NetworkPolicyProfile', undef, 1],
);


VIMRuntime::make_get_set('VirtualSwitchProfile', 'key', 'name', 'link', 'numPorts', 'networkPolicy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualSwitchProfile;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualSwitchProfile', 'VirtualSwitchProfile', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualSwitchProfile', 'VirtualSwitchProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetStackInstanceProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
   ['key', undef, undef, 1],
   ['dnsConfig', 'NetworkProfileDnsConfigProfile', undef, 1],
   ['ipRouteConfig', 'IpRouteProfile', undef, 1],
);


VIMRuntime::make_get_set('NetStackInstanceProfile', 'key', 'dnsConfig', 'ipRouteConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfNetStackInstanceProfile;
our @ISA = qw(ComplexType);

our @property_list = (
   ['NetStackInstanceProfile', 'NetStackInstanceProfile', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfNetStackInstanceProfile', 'NetStackInstanceProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VlanProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
);


VIMRuntime::make_get_set('VlanProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSwitchSelectionProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualSwitchSelectionProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PortGroupProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
   ['key', undef, undef, 1],
   ['name', undef, undef, 1],
   ['vlan', 'VlanProfile', undef, 1],
   ['vswitch', 'VirtualSwitchSelectionProfile', undef, 1],
   ['networkPolicy', 'NetworkPolicyProfile', undef, 1],
);


VIMRuntime::make_get_set('PortGroupProfile', 'key', 'name', 'vlan', 'vswitch', 'networkPolicy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmPortGroupProfile;
our @ISA = qw(PortGroupProfile);

our @property_list = (
);


VIMRuntime::make_get_set('VmPortGroupProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVmPortGroupProfile;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VmPortGroupProfile', 'VmPortGroupProfile', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVmPortGroupProfile', 'VmPortGroupProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostPortGroupProfile;
our @ISA = qw(PortGroupProfile);

our @property_list = (
   ['ipConfig', 'IpAddressProfile', undef, 1],
);


VIMRuntime::make_get_set('HostPortGroupProfile', 'ipConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostPortGroupProfile;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostPortGroupProfile', 'HostPortGroupProfile', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostPortGroupProfile', 'HostPortGroupProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ServiceConsolePortGroupProfile;
our @ISA = qw(PortGroupProfile);

our @property_list = (
   ['ipConfig', 'IpAddressProfile', undef, 1],
);


VIMRuntime::make_get_set('ServiceConsolePortGroupProfile', 'ipConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfServiceConsolePortGroupProfile;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ServiceConsolePortGroupProfile', 'ServiceConsolePortGroupProfile', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfServiceConsolePortGroupProfile', 'ServiceConsolePortGroupProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NetworkPolicyProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
);


VIMRuntime::make_get_set('NetworkPolicyProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IpAddressProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
);


VIMRuntime::make_get_set('IpAddressProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AuthenticationProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
   ['activeDirectory', 'ActiveDirectoryProfile', undef, 0],
);


VIMRuntime::make_get_set('AuthenticationProfile', 'activeDirectory');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ActiveDirectoryProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
);


VIMRuntime::make_get_set('ActiveDirectoryProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PermissionProfile;
our @ISA = qw(ApplyProfile);

our @property_list = (
   ['key', undef, undef, 1],
);


VIMRuntime::make_get_set('PermissionProfile', 'key');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPermissionProfile;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PermissionProfile', 'PermissionProfile', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPermissionProfile', 'PermissionProfile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostProfileConfigInfo;
our @ISA = qw(ProfileConfigInfo);

our @property_list = (
   ['applyProfile', 'HostApplyProfile', undef, 0],
   ['defaultComplyProfile', 'ComplianceProfile', undef, 0],
   ['defaultComplyLocator', 'ComplianceLocator', 1, 0],
   ['customComplyProfile', 'ComplianceProfile', undef, 0],
   ['disabledExpressionList', undef, 1, 0],
   ['description', 'ProfileDescription', undef, 0],
);


VIMRuntime::make_get_set('HostProfileConfigInfo', 'applyProfile', 'defaultComplyProfile', 'defaultComplyLocator', 'customComplyProfile', 'disabledExpressionList', 'description');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostProfileConfigSpec;
our @ISA = qw(ProfileCreateSpec);

our @property_list = (
);


VIMRuntime::make_get_set('HostProfileConfigSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostProfileSerializedHostProfileSpec;
our @ISA = qw(ProfileSerializedCreateSpec);

our @property_list = (
   ['validatorHost', 'ManagedObjectReference', undef, 0],
   ['validating', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostProfileSerializedHostProfileSpec', 'validatorHost', 'validating');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostProfileCompleteConfigSpec;
our @ISA = qw(HostProfileConfigSpec);

our @property_list = (
   ['applyProfile', 'HostApplyProfile', undef, 0],
   ['customComplyProfile', 'ComplianceProfile', undef, 0],
   ['disabledExpressionListChanged', 'boolean', undef, 1],
   ['disabledExpressionList', undef, 1, 0],
   ['validatorHost', 'ManagedObjectReference', undef, 0],
   ['validating', 'boolean', undef, 0],
   ['hostConfig', 'HostProfileConfigInfo', undef, 0],
);


VIMRuntime::make_get_set('HostProfileCompleteConfigSpec', 'applyProfile', 'customComplyProfile', 'disabledExpressionListChanged', 'disabledExpressionList', 'validatorHost', 'validating', 'hostConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostProfileHostBasedConfigSpec;
our @ISA = qw(HostProfileConfigSpec);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
   ['useHostProfileEngine', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostProfileHostBasedConfigSpec', 'host', 'useHostProfileEngine');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSpecification;
our @ISA = qw(DynamicData);

our @property_list = (
   ['createdTime', undef, undef, 1],
   ['lastModified', undef, undef, 0],
   ['host', 'ManagedObjectReference', undef, 1],
   ['subSpecs', 'HostSubSpecification', 1, 0],
   ['changeID', undef, undef, 0],
);


VIMRuntime::make_get_set('HostSpecification', 'createdTime', 'lastModified', 'host', 'subSpecs', 'changeID');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostSubSpecification;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['createdTime', undef, undef, 1],
   ['data', undef, 1, 0],
);


VIMRuntime::make_get_set('HostSubSpecification', 'name', 'createdTime', 'data');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostSubSpecification;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostSubSpecification', 'HostSubSpecification', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostSubSpecification', 'HostSubSpecification');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostProfileManagerConfigTaskList;
our @ISA = qw(DynamicData);

our @property_list = (
   ['configSpec', 'HostConfigSpec', undef, 0],
   ['taskDescription', 'LocalizableMessage', 1, 0],
   ['taskListRequirement', undef, 1, 0],
);


VIMRuntime::make_get_set('HostProfileManagerConfigTaskList', 'configSpec', 'taskDescription', 'taskListRequirement');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AnswerFileCreateSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['validating', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('AnswerFileCreateSpec', 'validating');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AnswerFileOptionsCreateSpec;
our @ISA = qw(AnswerFileCreateSpec);

our @property_list = (
   ['userInput', 'ProfileDeferredPolicyOptionParameter', 1, 0],
);


VIMRuntime::make_get_set('AnswerFileOptionsCreateSpec', 'userInput');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AnswerFileSerializedCreateSpec;
our @ISA = qw(AnswerFileCreateSpec);

our @property_list = (
   ['answerFileConfigString', undef, undef, 1],
);


VIMRuntime::make_get_set('AnswerFileSerializedCreateSpec', 'answerFileConfigString');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostProfilesEntityCustomizations;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('HostProfilesEntityCustomizations');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostProfilesEntityCustomizations;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostProfilesEntityCustomizations', 'HostProfilesEntityCustomizations', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostProfilesEntityCustomizations', 'HostProfilesEntityCustomizations');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StructuredCustomizations;
our @ISA = qw(HostProfilesEntityCustomizations);

our @property_list = (
   ['entity', 'ManagedObjectReference', undef, 1],
   ['customizations', 'AnswerFile', undef, 0],
);


VIMRuntime::make_get_set('StructuredCustomizations', 'entity', 'customizations');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfStructuredCustomizations;
our @ISA = qw(ComplexType);

our @property_list = (
   ['StructuredCustomizations', 'StructuredCustomizations', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfStructuredCustomizations', 'StructuredCustomizations');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostProfileManagerHostToConfigSpecMap;
our @ISA = qw(DynamicData);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
   ['configSpec', 'AnswerFileCreateSpec', undef, 1],
);


VIMRuntime::make_get_set('HostProfileManagerHostToConfigSpecMap', 'host', 'configSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostProfileManagerHostToConfigSpecMap;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostProfileManagerHostToConfigSpecMap', 'HostProfileManagerHostToConfigSpecMap', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostProfileManagerHostToConfigSpecMap', 'HostProfileManagerHostToConfigSpecMap');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ApplyHostProfileConfigurationSpec;
our @ISA = qw(ProfileExecuteResult);

our @property_list = (
   ['host', 'ManagedObjectReference', undef, 1],
   ['taskListRequirement', undef, 1, 0],
   ['taskDescription', 'LocalizableMessage', 1, 0],
   ['rebootStateless', 'boolean', undef, 0],
   ['rebootHost', 'boolean', undef, 0],
   ['faultData', 'LocalizedMethodFault', undef, 0],
);


VIMRuntime::make_get_set('ApplyHostProfileConfigurationSpec', 'host', 'taskListRequirement', 'taskDescription', 'rebootStateless', 'rebootHost', 'faultData');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfApplyHostProfileConfigurationSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ApplyHostProfileConfigurationSpec', 'ApplyHostProfileConfigurationSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfApplyHostProfileConfigurationSpec', 'ApplyHostProfileConfigurationSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostProfileManagerCompositionValidationResultResultElement;
our @ISA = qw(DynamicData);

our @property_list = (
   ['target', 'ManagedObjectReference', undef, 1],
   ['status', undef, undef, 1],
   ['errors', 'LocalizableMessage', 1, 0],
   ['sourceDiffForToBeMerged', 'HostApplyProfile', undef, 0],
   ['targetDiffForToBeMerged', 'HostApplyProfile', undef, 0],
   ['toBeAdded', 'HostApplyProfile', undef, 0],
   ['toBeDeleted', 'HostApplyProfile', undef, 0],
   ['toBeDisabled', 'HostApplyProfile', undef, 0],
   ['toBeEnabled', 'HostApplyProfile', undef, 0],
   ['toBeReenableCC', 'HostApplyProfile', undef, 0],
);


VIMRuntime::make_get_set('HostProfileManagerCompositionValidationResultResultElement', 'target', 'status', 'errors', 'sourceDiffForToBeMerged', 'targetDiffForToBeMerged', 'toBeAdded', 'toBeDeleted', 'toBeDisabled', 'toBeEnabled', 'toBeReenableCC');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostProfileManagerCompositionValidationResultResultElement;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostProfileManagerCompositionValidationResultResultElement', 'HostProfileManagerCompositionValidationResultResultElement', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostProfileManagerCompositionValidationResultResultElement', 'HostProfileManagerCompositionValidationResultResultElement');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ScheduledTaskDetail;
our @ISA = qw(TypeDescription);

our @property_list = (
   ['frequency', undef, undef, 1],
);


VIMRuntime::make_get_set('ScheduledTaskDetail', 'frequency');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfScheduledTaskDetail;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ScheduledTaskDetail', 'ScheduledTaskDetail', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfScheduledTaskDetail', 'ScheduledTaskDetail');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ScheduledTaskDescription;
our @ISA = qw(DynamicData);

our @property_list = (
   ['action', 'TypeDescription', 1, 1],
   ['schedulerInfo', 'ScheduledTaskDetail', 1, 1],
   ['state', 'ElementDescription', 1, 1],
   ['dayOfWeek', 'ElementDescription', 1, 1],
   ['weekOfMonth', 'ElementDescription', 1, 1],
);


VIMRuntime::make_get_set('ScheduledTaskDescription', 'action', 'schedulerInfo', 'state', 'dayOfWeek', 'weekOfMonth');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ScheduledTaskInfo;
our @ISA = qw(ScheduledTaskSpec);

our @property_list = (
   ['scheduledTask', 'ManagedObjectReference', undef, 1],
   ['entity', 'ManagedObjectReference', undef, 1],
   ['lastModifiedTime', undef, undef, 1],
   ['lastModifiedUser', undef, undef, 1],
   ['nextRunTime', undef, undef, 0],
   ['prevRunTime', undef, undef, 0],
   ['state', 'TaskInfoState', undef, 1],
   ['error', 'LocalizedMethodFault', undef, 0],
   ['result', 'anyType', undef, 0],
   ['progress', undef, undef, 0],
   ['activeTask', 'ManagedObjectReference', undef, 0],
   ['taskObject', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('ScheduledTaskInfo', 'scheduledTask', 'entity', 'lastModifiedTime', 'lastModifiedUser', 'nextRunTime', 'prevRunTime', 'state', 'error', 'result', 'progress', 'activeTask', 'taskObject');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TaskScheduler;
our @ISA = qw(DynamicData);

our @property_list = (
   ['activeTime', undef, undef, 0],
   ['expireTime', undef, undef, 0],
);


VIMRuntime::make_get_set('TaskScheduler', 'activeTime', 'expireTime');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package AfterStartupTaskScheduler;
our @ISA = qw(TaskScheduler);

our @property_list = (
   ['minute', undef, undef, 1],
);


VIMRuntime::make_get_set('AfterStartupTaskScheduler', 'minute');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OnceTaskScheduler;
our @ISA = qw(TaskScheduler);

our @property_list = (
   ['runAt', undef, undef, 0],
);


VIMRuntime::make_get_set('OnceTaskScheduler', 'runAt');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RecurrentTaskScheduler;
our @ISA = qw(TaskScheduler);

our @property_list = (
   ['interval', undef, undef, 1],
);


VIMRuntime::make_get_set('RecurrentTaskScheduler', 'interval');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HourlyTaskScheduler;
our @ISA = qw(RecurrentTaskScheduler);

our @property_list = (
   ['minute', undef, undef, 1],
);


VIMRuntime::make_get_set('HourlyTaskScheduler', 'minute');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DailyTaskScheduler;
our @ISA = qw(HourlyTaskScheduler);

our @property_list = (
   ['hour', undef, undef, 1],
);


VIMRuntime::make_get_set('DailyTaskScheduler', 'hour');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package WeeklyTaskScheduler;
our @ISA = qw(DailyTaskScheduler);

our @property_list = (
   ['sunday', 'boolean', undef, 1],
   ['monday', 'boolean', undef, 1],
   ['tuesday', 'boolean', undef, 1],
   ['wednesday', 'boolean', undef, 1],
   ['thursday', 'boolean', undef, 1],
   ['friday', 'boolean', undef, 1],
   ['saturday', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('WeeklyTaskScheduler', 'sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MonthlyTaskScheduler;
our @ISA = qw(DailyTaskScheduler);

our @property_list = (
);


VIMRuntime::make_get_set('MonthlyTaskScheduler');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MonthlyByDayTaskScheduler;
our @ISA = qw(MonthlyTaskScheduler);

our @property_list = (
   ['day', undef, undef, 1],
);


VIMRuntime::make_get_set('MonthlyByDayTaskScheduler', 'day');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MonthlyByWeekdayTaskScheduler;
our @ISA = qw(MonthlyTaskScheduler);

our @property_list = (
   ['offset', 'WeekOfMonth', undef, 1],
   ['weekday', 'DayOfWeek', undef, 1],
);


VIMRuntime::make_get_set('MonthlyByWeekdayTaskScheduler', 'offset', 'weekday');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ScheduledTaskSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['description', undef, undef, 1],
   ['enabled', 'boolean', undef, 1],
   ['scheduler', 'TaskScheduler', undef, 1],
   ['action', 'Action', undef, 1],
   ['notification', undef, undef, 0],
);


VIMRuntime::make_get_set('ScheduledTaskSpec', 'name', 'description', 'enabled', 'scheduler', 'action', 'notification');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ApplyStorageRecommendationResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('ApplyStorageRecommendationResult', 'vm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['podConfig', 'StorageDrsPodConfigInfo', undef, 1],
   ['vmConfig', 'StorageDrsVmConfigInfo', 1, 0],
);


VIMRuntime::make_get_set('StorageDrsConfigInfo', 'podConfig', 'vmConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['podConfigSpec', 'StorageDrsPodConfigSpec', undef, 0],
   ['vmConfigSpec', 'StorageDrsVmConfigSpec', 1, 0],
);


VIMRuntime::make_get_set('StorageDrsConfigSpec', 'podConfigSpec', 'vmConfigSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsVmConfigSpec;
our @ISA = qw(ArrayUpdateSpec);

our @property_list = (
   ['info', 'StorageDrsVmConfigInfo', undef, 0],
);


VIMRuntime::make_get_set('StorageDrsVmConfigSpec', 'info');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfStorageDrsVmConfigSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['StorageDrsVmConfigSpec', 'StorageDrsVmConfigSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfStorageDrsVmConfigSpec', 'StorageDrsVmConfigSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HbrDiskMigrationAction;
our @ISA = qw(ClusterAction);

our @property_list = (
   ['collectionId', undef, undef, 1],
   ['collectionName', undef, undef, 1],
   ['diskIds', undef, 1, 1],
   ['source', 'ManagedObjectReference', undef, 1],
   ['destination', 'ManagedObjectReference', undef, 1],
   ['sizeTransferred', undef, undef, 1],
   ['spaceUtilSrcBefore', undef, undef, 0],
   ['spaceUtilDstBefore', undef, undef, 0],
   ['spaceUtilSrcAfter', undef, undef, 0],
   ['spaceUtilDstAfter', undef, undef, 0],
   ['ioLatencySrcBefore', undef, undef, 0],
   ['ioLatencyDstBefore', undef, undef, 0],
);


VIMRuntime::make_get_set('HbrDiskMigrationAction', 'collectionId', 'collectionName', 'diskIds', 'source', 'destination', 'sizeTransferred', 'spaceUtilSrcBefore', 'spaceUtilDstBefore', 'spaceUtilSrcAfter', 'spaceUtilDstAfter', 'ioLatencySrcBefore', 'ioLatencyDstBefore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PlacementAffinityRule;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ruleType', undef, undef, 1],
   ['ruleScope', undef, undef, 1],
   ['vms', 'ManagedObjectReference', 1, 0],
   ['keys', undef, 1, 0],
);


VIMRuntime::make_get_set('PlacementAffinityRule', 'ruleType', 'ruleScope', 'vms', 'keys');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPlacementAffinityRule;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PlacementAffinityRule', 'PlacementAffinityRule', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPlacementAffinityRule', 'PlacementAffinityRule');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PlacementRankResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['candidate', 'ManagedObjectReference', undef, 1],
   ['reservedSpaceMB', undef, undef, 1],
   ['usedSpaceMB', undef, undef, 1],
   ['totalSpaceMB', undef, undef, 1],
   ['utilization', undef, undef, 1],
   ['faults', 'LocalizedMethodFault', 1, 0],
);


VIMRuntime::make_get_set('PlacementRankResult', 'key', 'candidate', 'reservedSpaceMB', 'usedSpaceMB', 'totalSpaceMB', 'utilization', 'faults');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PlacementRankSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['specs', 'PlacementSpec', 1, 1],
   ['clusters', 'ManagedObjectReference', 1, 1],
   ['rules', 'PlacementAffinityRule', 1, 0],
   ['placementRankByVm', 'StorageDrsPlacementRankVmSpec', 1, 0],
);


VIMRuntime::make_get_set('PlacementRankSpec', 'specs', 'clusters', 'rules', 'placementRankByVm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsPlacementRankVmSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vmPlacementSpec', 'PlacementSpec', undef, 1],
   ['vmClusters', 'ManagedObjectReference', 1, 1],
);


VIMRuntime::make_get_set('StorageDrsPlacementRankVmSpec', 'vmPlacementSpec', 'vmClusters');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfStorageDrsPlacementRankVmSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['StorageDrsPlacementRankVmSpec', 'StorageDrsPlacementRankVmSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfStorageDrsPlacementRankVmSpec', 'StorageDrsPlacementRankVmSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsPodConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['enabled', 'boolean', undef, 1],
   ['ioLoadBalanceEnabled', 'boolean', undef, 1],
   ['defaultVmBehavior', undef, undef, 1],
   ['loadBalanceInterval', undef, undef, 0],
   ['defaultIntraVmAffinity', 'boolean', undef, 0],
   ['spaceLoadBalanceConfig', 'StorageDrsSpaceLoadBalanceConfig', undef, 0],
   ['ioLoadBalanceConfig', 'StorageDrsIoLoadBalanceConfig', undef, 0],
   ['automationOverrides', 'StorageDrsAutomationConfig', undef, 0],
   ['rule', 'ClusterRuleInfo', 1, 0],
   ['option', 'OptionValue', 1, 0],
);


VIMRuntime::make_get_set('StorageDrsPodConfigInfo', 'enabled', 'ioLoadBalanceEnabled', 'defaultVmBehavior', 'loadBalanceInterval', 'defaultIntraVmAffinity', 'spaceLoadBalanceConfig', 'ioLoadBalanceConfig', 'automationOverrides', 'rule', 'option');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsSpaceLoadBalanceConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['spaceThresholdMode', undef, undef, 0],
   ['spaceUtilizationThreshold', undef, undef, 0],
   ['freeSpaceThresholdGB', undef, undef, 0],
   ['minSpaceUtilizationDifference', undef, undef, 0],
);


VIMRuntime::make_get_set('StorageDrsSpaceLoadBalanceConfig', 'spaceThresholdMode', 'spaceUtilizationThreshold', 'freeSpaceThresholdGB', 'minSpaceUtilizationDifference');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsIoLoadBalanceConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['reservablePercentThreshold', undef, undef, 0],
   ['reservableIopsThreshold', undef, undef, 0],
   ['reservableThresholdMode', undef, undef, 0],
   ['ioLatencyThreshold', undef, undef, 0],
   ['ioLoadImbalanceThreshold', undef, undef, 0],
);


VIMRuntime::make_get_set('StorageDrsIoLoadBalanceConfig', 'reservablePercentThreshold', 'reservableIopsThreshold', 'reservableThresholdMode', 'ioLatencyThreshold', 'ioLoadImbalanceThreshold');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsAutomationConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['spaceLoadBalanceAutomationMode', undef, undef, 0],
   ['ioLoadBalanceAutomationMode', undef, undef, 0],
   ['ruleEnforcementAutomationMode', undef, undef, 0],
   ['policyEnforcementAutomationMode', undef, undef, 0],
   ['vmEvacuationAutomationMode', undef, undef, 0],
);


VIMRuntime::make_get_set('StorageDrsAutomationConfig', 'spaceLoadBalanceAutomationMode', 'ioLoadBalanceAutomationMode', 'ruleEnforcementAutomationMode', 'policyEnforcementAutomationMode', 'vmEvacuationAutomationMode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsPodConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['enabled', 'boolean', undef, 0],
   ['ioLoadBalanceEnabled', 'boolean', undef, 0],
   ['defaultVmBehavior', undef, undef, 0],
   ['loadBalanceInterval', undef, undef, 0],
   ['defaultIntraVmAffinity', 'boolean', undef, 0],
   ['spaceLoadBalanceConfig', 'StorageDrsSpaceLoadBalanceConfig', undef, 0],
   ['ioLoadBalanceConfig', 'StorageDrsIoLoadBalanceConfig', undef, 0],
   ['automationOverrides', 'StorageDrsAutomationConfig', undef, 0],
   ['rule', 'ClusterRuleSpec', 1, 0],
   ['option', 'StorageDrsOptionSpec', 1, 0],
);


VIMRuntime::make_get_set('StorageDrsPodConfigSpec', 'enabled', 'ioLoadBalanceEnabled', 'defaultVmBehavior', 'loadBalanceInterval', 'defaultIntraVmAffinity', 'spaceLoadBalanceConfig', 'ioLoadBalanceConfig', 'automationOverrides', 'rule', 'option');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsOptionSpec;
our @ISA = qw(ArrayUpdateSpec);

our @property_list = (
   ['option', 'OptionValue', undef, 0],
);


VIMRuntime::make_get_set('StorageDrsOptionSpec', 'option');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfStorageDrsOptionSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['StorageDrsOptionSpec', 'StorageDrsOptionSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfStorageDrsOptionSpec', 'StorageDrsOptionSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmPodConfigForPlacement;
our @ISA = qw(DynamicData);

our @property_list = (
   ['storagePod', 'ManagedObjectReference', undef, 1],
   ['disk', 'PodDiskLocator', 1, 0],
   ['vmConfig', 'StorageDrsVmConfigInfo', undef, 0],
   ['interVmRule', 'ClusterRuleInfo', 1, 0],
);


VIMRuntime::make_get_set('VmPodConfigForPlacement', 'storagePod', 'disk', 'vmConfig', 'interVmRule');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVmPodConfigForPlacement;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VmPodConfigForPlacement', 'VmPodConfigForPlacement', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVmPodConfigForPlacement', 'VmPodConfigForPlacement');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PodDiskLocator;
our @ISA = qw(DynamicData);

our @property_list = (
   ['diskId', undef, undef, 1],
   ['diskMoveType', undef, undef, 0],
   ['diskBackingInfo', 'VirtualDeviceBackingInfo', undef, 0],
   ['profile', 'VirtualMachineProfileSpec', 1, 0],
);


VIMRuntime::make_get_set('PodDiskLocator', 'diskId', 'diskMoveType', 'diskBackingInfo', 'profile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPodDiskLocator;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PodDiskLocator', 'PodDiskLocator', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPodDiskLocator', 'PodDiskLocator');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsPodSelectionSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['initialVmConfig', 'VmPodConfigForPlacement', 1, 0],
   ['storagePod', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('StorageDrsPodSelectionSpec', 'initialVmConfig', 'storagePod');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageMigrationAction;
our @ISA = qw(ClusterAction);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 1],
   ['relocateSpec', 'VirtualMachineRelocateSpec', undef, 1],
   ['source', 'ManagedObjectReference', undef, 1],
   ['destination', 'ManagedObjectReference', undef, 1],
   ['sizeTransferred', undef, undef, 1],
   ['spaceUtilSrcBefore', undef, undef, 0],
   ['spaceUtilDstBefore', undef, undef, 0],
   ['spaceUtilSrcAfter', undef, undef, 0],
   ['spaceUtilDstAfter', undef, undef, 0],
   ['ioLatencySrcBefore', undef, undef, 0],
   ['ioLatencyDstBefore', undef, undef, 0],
);


VIMRuntime::make_get_set('StorageMigrationAction', 'vm', 'relocateSpec', 'source', 'destination', 'sizeTransferred', 'spaceUtilSrcBefore', 'spaceUtilDstBefore', 'spaceUtilSrcAfter', 'spaceUtilDstAfter', 'ioLatencySrcBefore', 'ioLatencyDstBefore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StoragePlacementAction;
our @ISA = qw(ClusterAction);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 0],
   ['relocateSpec', 'VirtualMachineRelocateSpec', undef, 1],
   ['destination', 'ManagedObjectReference', undef, 1],
   ['spaceUtilBefore', undef, undef, 0],
   ['spaceDemandBefore', undef, undef, 0],
   ['spaceUtilAfter', undef, undef, 0],
   ['spaceDemandAfter', undef, undef, 0],
   ['ioLatencyBefore', undef, undef, 0],
);


VIMRuntime::make_get_set('StoragePlacementAction', 'vm', 'relocateSpec', 'destination', 'spaceUtilBefore', 'spaceDemandBefore', 'spaceUtilAfter', 'spaceDemandAfter', 'ioLatencyBefore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StoragePlacementResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['recommendations', 'ClusterRecommendation', 1, 0],
   ['drsFault', 'ClusterDrsFaults', undef, 0],
   ['task', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('StoragePlacementResult', 'recommendations', 'drsFault', 'task');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StoragePlacementSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['type', undef, undef, 1],
   ['priority', 'VirtualMachineMovePriority', undef, 0],
   ['vm', 'ManagedObjectReference', undef, 0],
   ['podSelectionSpec', 'StorageDrsPodSelectionSpec', undef, 1],
   ['cloneSpec', 'VirtualMachineCloneSpec', undef, 0],
   ['cloneName', undef, undef, 0],
   ['configSpec', 'VirtualMachineConfigSpec', undef, 0],
   ['relocateSpec', 'VirtualMachineRelocateSpec', undef, 0],
   ['resourcePool', 'ManagedObjectReference', undef, 0],
   ['host', 'ManagedObjectReference', undef, 0],
   ['folder', 'ManagedObjectReference', undef, 0],
   ['disallowPrerequisiteMoves', 'boolean', undef, 0],
   ['resourceLeaseDurationSec', undef, undef, 0],
);


VIMRuntime::make_get_set('StoragePlacementSpec', 'type', 'priority', 'vm', 'podSelectionSpec', 'cloneSpec', 'cloneName', 'configSpec', 'relocateSpec', 'resourcePool', 'host', 'folder', 'disallowPrerequisiteMoves', 'resourceLeaseDurationSec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskAntiAffinityRuleSpec;
our @ISA = qw(ClusterRuleInfo);

our @property_list = (
   ['diskId', undef, 1, 1],
);


VIMRuntime::make_get_set('VirtualDiskAntiAffinityRuleSpec', 'diskId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package StorageDrsVmConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 0],
   ['enabled', 'boolean', undef, 0],
   ['behavior', undef, undef, 0],
   ['intraVmAffinity', 'boolean', undef, 0],
   ['intraVmAntiAffinity', 'VirtualDiskAntiAffinityRuleSpec', undef, 0],
);


VIMRuntime::make_get_set('StorageDrsVmConfigInfo', 'vm', 'enabled', 'behavior', 'intraVmAffinity', 'intraVmAntiAffinity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfStorageDrsVmConfigInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['StorageDrsVmConfigInfo', 'StorageDrsVmConfigInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfStorageDrsVmConfigInfo', 'StorageDrsVmConfigInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VAppCloneSpecNetworkMappingPair;
our @ISA = qw(DynamicData);

our @property_list = (
   ['source', 'ManagedObjectReference', undef, 1],
   ['destination', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('VAppCloneSpecNetworkMappingPair', 'source', 'destination');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVAppCloneSpecNetworkMappingPair;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VAppCloneSpecNetworkMappingPair', 'VAppCloneSpecNetworkMappingPair', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVAppCloneSpecNetworkMappingPair', 'VAppCloneSpecNetworkMappingPair');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VAppCloneSpecResourceMap;
our @ISA = qw(DynamicData);

our @property_list = (
   ['source', 'ManagedObjectReference', undef, 1],
   ['parent', 'ManagedObjectReference', undef, 0],
   ['resourceSpec', 'ResourceConfigSpec', undef, 0],
   ['location', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('VAppCloneSpecResourceMap', 'source', 'parent', 'resourceSpec', 'location');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVAppCloneSpecResourceMap;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VAppCloneSpecResourceMap', 'VAppCloneSpecResourceMap', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVAppCloneSpecResourceMap', 'VAppCloneSpecResourceMap');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VAppCloneSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['location', 'ManagedObjectReference', undef, 1],
   ['host', 'ManagedObjectReference', undef, 0],
   ['resourceSpec', 'ResourceConfigSpec', undef, 0],
   ['vmFolder', 'ManagedObjectReference', undef, 0],
   ['networkMapping', 'VAppCloneSpecNetworkMappingPair', 1, 0],
   ['property', 'KeyValue', 1, 0],
   ['resourceMapping', 'VAppCloneSpecResourceMap', 1, 0],
   ['provisioning', undef, undef, 0],
);


VIMRuntime::make_get_set('VAppCloneSpec', 'location', 'host', 'resourceSpec', 'vmFolder', 'networkMapping', 'property', 'resourceMapping', 'provisioning');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VAppEntityConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', 'ManagedObjectReference', undef, 0],
   ['tag', undef, undef, 0],
   ['startOrder', undef, undef, 0],
   ['startDelay', undef, undef, 0],
   ['waitingForGuest', 'boolean', undef, 0],
   ['startAction', undef, undef, 0],
   ['stopDelay', undef, undef, 0],
   ['stopAction', undef, undef, 0],
   ['destroyWithParent', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VAppEntityConfigInfo', 'key', 'tag', 'startOrder', 'startDelay', 'waitingForGuest', 'startAction', 'stopDelay', 'stopAction', 'destroyWithParent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVAppEntityConfigInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VAppEntityConfigInfo', 'VAppEntityConfigInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVAppEntityConfigInfo', 'VAppEntityConfigInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VAppIPAssignmentInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['supportedAllocationScheme', undef, 1, 0],
   ['ipAllocationPolicy', undef, undef, 0],
   ['supportedIpProtocol', undef, 1, 0],
   ['ipProtocol', undef, undef, 0],
);


VIMRuntime::make_get_set('VAppIPAssignmentInfo', 'supportedAllocationScheme', 'ipAllocationPolicy', 'supportedIpProtocol', 'ipProtocol');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IpPoolIpPoolConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['subnetAddress', undef, undef, 0],
   ['netmask', undef, undef, 0],
   ['gateway', undef, undef, 0],
   ['range', undef, undef, 0],
   ['dns', undef, 1, 0],
   ['dhcpServerAvailable', 'boolean', undef, 0],
   ['ipPoolEnabled', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('IpPoolIpPoolConfigInfo', 'subnetAddress', 'netmask', 'gateway', 'range', 'dns', 'dhcpServerAvailable', 'ipPoolEnabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IpPoolAssociation;
our @ISA = qw(DynamicData);

our @property_list = (
   ['network', 'ManagedObjectReference', undef, 0],
   ['networkName', undef, undef, 1],
);


VIMRuntime::make_get_set('IpPoolAssociation', 'network', 'networkName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfIpPoolAssociation;
our @ISA = qw(ComplexType);

our @property_list = (
   ['IpPoolAssociation', 'IpPoolAssociation', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfIpPoolAssociation', 'IpPoolAssociation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package IpPool;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 0],
   ['name', undef, undef, 0],
   ['ipv4Config', 'IpPoolIpPoolConfigInfo', undef, 0],
   ['ipv6Config', 'IpPoolIpPoolConfigInfo', undef, 0],
   ['dnsDomain', undef, undef, 0],
   ['dnsSearchPath', undef, undef, 0],
   ['hostPrefix', undef, undef, 0],
   ['httpProxy', undef, undef, 0],
   ['networkAssociation', 'IpPoolAssociation', 1, 0],
   ['availableIpv4Addresses', undef, undef, 0],
   ['availableIpv6Addresses', undef, undef, 0],
   ['allocatedIpv4Addresses', undef, undef, 0],
   ['allocatedIpv6Addresses', undef, undef, 0],
);


VIMRuntime::make_get_set('IpPool', 'id', 'name', 'ipv4Config', 'ipv6Config', 'dnsDomain', 'dnsSearchPath', 'hostPrefix', 'httpProxy', 'networkAssociation', 'availableIpv4Addresses', 'availableIpv6Addresses', 'allocatedIpv4Addresses', 'allocatedIpv6Addresses');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfIpPool;
our @ISA = qw(ComplexType);

our @property_list = (
   ['IpPool', 'IpPool', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfIpPool', 'IpPool');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VAppOvfSectionInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 0],
   ['namespace', undef, undef, 0],
   ['type', undef, undef, 0],
   ['atEnvelopeLevel', 'boolean', undef, 0],
   ['contents', undef, undef, 0],
);


VIMRuntime::make_get_set('VAppOvfSectionInfo', 'key', 'namespace', 'type', 'atEnvelopeLevel', 'contents');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVAppOvfSectionInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VAppOvfSectionInfo', 'VAppOvfSectionInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVAppOvfSectionInfo', 'VAppOvfSectionInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VAppProductInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['classId', undef, undef, 0],
   ['instanceId', undef, undef, 0],
   ['name', undef, undef, 0],
   ['vendor', undef, undef, 0],
   ['version', undef, undef, 0],
   ['fullVersion', undef, undef, 0],
   ['vendorUrl', undef, undef, 0],
   ['productUrl', undef, undef, 0],
   ['appUrl', undef, undef, 0],
);


VIMRuntime::make_get_set('VAppProductInfo', 'key', 'classId', 'instanceId', 'name', 'vendor', 'version', 'fullVersion', 'vendorUrl', 'productUrl', 'appUrl');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVAppProductInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VAppProductInfo', 'VAppProductInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVAppProductInfo', 'VAppProductInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VAppPropertyInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['classId', undef, undef, 0],
   ['instanceId', undef, undef, 0],
   ['id', undef, undef, 0],
   ['category', undef, undef, 0],
   ['label', undef, undef, 0],
   ['type', undef, undef, 0],
   ['typeReference', undef, undef, 0],
   ['userConfigurable', 'boolean', undef, 0],
   ['defaultValue', undef, undef, 0],
   ['value', undef, undef, 0],
   ['description', undef, undef, 0],
);


VIMRuntime::make_get_set('VAppPropertyInfo', 'key', 'classId', 'instanceId', 'id', 'category', 'label', 'type', 'typeReference', 'userConfigurable', 'defaultValue', 'value', 'description');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVAppPropertyInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VAppPropertyInfo', 'VAppPropertyInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVAppPropertyInfo', 'VAppPropertyInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VAppConfigInfo;
our @ISA = qw(VmConfigInfo);

our @property_list = (
   ['entityConfig', 'VAppEntityConfigInfo', 1, 0],
   ['annotation', undef, undef, 1],
   ['instanceUuid', undef, undef, 0],
   ['managedBy', 'ManagedByInfo', undef, 0],
);


VIMRuntime::make_get_set('VAppConfigInfo', 'entityConfig', 'annotation', 'instanceUuid', 'managedBy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VAppConfigSpec;
our @ISA = qw(VmConfigSpec);

our @property_list = (
   ['entityConfig', 'VAppEntityConfigInfo', 1, 0],
   ['annotation', undef, undef, 0],
   ['instanceUuid', undef, undef, 0],
   ['managedBy', 'ManagedByInfo', undef, 0],
);


VIMRuntime::make_get_set('VAppConfigSpec', 'entityConfig', 'annotation', 'instanceUuid', 'managedBy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualAppImportSpec;
our @ISA = qw(ImportSpec);

our @property_list = (
   ['name', undef, undef, 1],
   ['vAppConfigSpec', 'VAppConfigSpec', undef, 1],
   ['resourcePoolSpec', 'ResourceConfigSpec', undef, 1],
   ['child', 'ImportSpec', 1, 0],
);


VIMRuntime::make_get_set('VirtualAppImportSpec', 'name', 'vAppConfigSpec', 'resourcePoolSpec', 'child');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['product', 'VAppProductInfo', 1, 0],
   ['property', 'VAppPropertyInfo', 1, 0],
   ['ipAssignment', 'VAppIPAssignmentInfo', undef, 1],
   ['eula', undef, 1, 0],
   ['ovfSection', 'VAppOvfSectionInfo', 1, 0],
   ['ovfEnvironmentTransport', undef, 1, 0],
   ['installBootRequired', 'boolean', undef, 1],
   ['installBootStopDelay', undef, undef, 1],
);


VIMRuntime::make_get_set('VmConfigInfo', 'product', 'property', 'ipAssignment', 'eula', 'ovfSection', 'ovfEnvironmentTransport', 'installBootRequired', 'installBootStopDelay');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VmConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['product', 'VAppProductSpec', 1, 0],
   ['property', 'VAppPropertySpec', 1, 0],
   ['ipAssignment', 'VAppIPAssignmentInfo', undef, 0],
   ['eula', undef, 1, 0],
   ['ovfSection', 'VAppOvfSectionSpec', 1, 0],
   ['ovfEnvironmentTransport', undef, 1, 0],
   ['installBootRequired', 'boolean', undef, 0],
   ['installBootStopDelay', undef, undef, 0],
);


VIMRuntime::make_get_set('VmConfigSpec', 'product', 'property', 'ipAssignment', 'eula', 'ovfSection', 'ovfEnvironmentTransport', 'installBootRequired', 'installBootStopDelay');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VAppProductSpec;
our @ISA = qw(ArrayUpdateSpec);

our @property_list = (
   ['info', 'VAppProductInfo', undef, 0],
);


VIMRuntime::make_get_set('VAppProductSpec', 'info');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVAppProductSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VAppProductSpec', 'VAppProductSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVAppProductSpec', 'VAppProductSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VAppPropertySpec;
our @ISA = qw(ArrayUpdateSpec);

our @property_list = (
   ['info', 'VAppPropertyInfo', undef, 0],
);


VIMRuntime::make_get_set('VAppPropertySpec', 'info');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVAppPropertySpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VAppPropertySpec', 'VAppPropertySpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVAppPropertySpec', 'VAppPropertySpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VAppOvfSectionSpec;
our @ISA = qw(ArrayUpdateSpec);

our @property_list = (
   ['info', 'VAppOvfSectionInfo', undef, 0],
);


VIMRuntime::make_get_set('VAppOvfSectionSpec', 'info');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVAppOvfSectionSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VAppOvfSectionSpec', 'VAppOvfSectionSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVAppOvfSectionSpec', 'VAppOvfSectionSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ClusterNetworkConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['networkPortGroup', 'ManagedObjectReference', undef, 1],
   ['ipSettings', 'CustomizationIPSettings', undef, 1],
);


VIMRuntime::make_get_set('ClusterNetworkConfigSpec', 'networkPortGroup', 'ipSettings');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SourceNodeSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['managementVc', 'ServiceLocator', undef, 1],
   ['activeVc', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('SourceNodeSpec', 'managementVc', 'activeVc');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NodeNetworkSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipSettings', 'CustomizationIPSettings', undef, 1],
);


VIMRuntime::make_get_set('NodeNetworkSpec', 'ipSettings');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PassiveNodeNetworkSpec;
our @ISA = qw(NodeNetworkSpec);

our @property_list = (
   ['failoverIpSettings', 'CustomizationIPSettings', undef, 0],
);


VIMRuntime::make_get_set('PassiveNodeNetworkSpec', 'failoverIpSettings');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VchaClusterNetworkSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['witnessNetworkSpec', 'NodeNetworkSpec', undef, 1],
   ['passiveNetworkSpec', 'PassiveNodeNetworkSpec', undef, 1],
);


VIMRuntime::make_get_set('VchaClusterNetworkSpec', 'witnessNetworkSpec', 'passiveNetworkSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NodeDeploymentSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['esxHost', 'ManagedObjectReference', undef, 0],
   ['datastore', 'ManagedObjectReference', undef, 0],
   ['publicNetworkPortGroup', 'ManagedObjectReference', undef, 0],
   ['clusterNetworkPortGroup', 'ManagedObjectReference', undef, 0],
   ['folder', 'ManagedObjectReference', undef, 1],
   ['resourcePool', 'ManagedObjectReference', undef, 0],
   ['managementVc', 'ServiceLocator', undef, 0],
   ['nodeName', undef, undef, 1],
   ['ipSettings', 'CustomizationIPSettings', undef, 1],
);


VIMRuntime::make_get_set('NodeDeploymentSpec', 'esxHost', 'datastore', 'publicNetworkPortGroup', 'clusterNetworkPortGroup', 'folder', 'resourcePool', 'managementVc', 'nodeName', 'ipSettings');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PassiveNodeDeploymentSpec;
our @ISA = qw(NodeDeploymentSpec);

our @property_list = (
   ['failoverIpSettings', 'CustomizationIPSettings', undef, 0],
);


VIMRuntime::make_get_set('PassiveNodeDeploymentSpec', 'failoverIpSettings');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VchaClusterConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['passiveIp', undef, undef, 1],
   ['witnessIp', undef, undef, 1],
);


VIMRuntime::make_get_set('VchaClusterConfigSpec', 'passiveIp', 'witnessIp');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VchaClusterDeploymentSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['passiveDeploymentSpec', 'PassiveNodeDeploymentSpec', undef, 1],
   ['witnessDeploymentSpec', 'NodeDeploymentSpec', undef, 1],
   ['activeVcSpec', 'SourceNodeSpec', undef, 1],
   ['activeVcNetworkConfig', 'ClusterNetworkConfigSpec', undef, 0],
);


VIMRuntime::make_get_set('VchaClusterDeploymentSpec', 'passiveDeploymentSpec', 'witnessDeploymentSpec', 'activeVcSpec', 'activeVcNetworkConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FailoverNodeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['clusterIpSettings', 'CustomizationIPSettings', undef, 1],
   ['failoverIp', 'CustomizationIPSettings', undef, 0],
   ['biosUuid', undef, undef, 0],
);


VIMRuntime::make_get_set('FailoverNodeInfo', 'clusterIpSettings', 'failoverIp', 'biosUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package WitnessNodeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipSettings', 'CustomizationIPSettings', undef, 1],
   ['biosUuid', undef, undef, 0],
);


VIMRuntime::make_get_set('WitnessNodeInfo', 'ipSettings', 'biosUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VchaClusterConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['failoverNodeInfo1', 'FailoverNodeInfo', undef, 0],
   ['failoverNodeInfo2', 'FailoverNodeInfo', undef, 0],
   ['witnessNodeInfo', 'WitnessNodeInfo', undef, 0],
   ['state', undef, undef, 1],
);


VIMRuntime::make_get_set('VchaClusterConfigInfo', 'failoverNodeInfo1', 'failoverNodeInfo2', 'witnessNodeInfo', 'state');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VchaNodeRuntimeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['nodeState', undef, undef, 1],
   ['nodeRole', undef, undef, 1],
   ['nodeIp', undef, undef, 1],
);


VIMRuntime::make_get_set('VchaNodeRuntimeInfo', 'nodeState', 'nodeRole', 'nodeIp');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVchaNodeRuntimeInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VchaNodeRuntimeInfo', 'VchaNodeRuntimeInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVchaNodeRuntimeInfo', 'VchaNodeRuntimeInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VchaClusterRuntimeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['clusterState', undef, undef, 1],
   ['nodeInfo', 'VchaNodeRuntimeInfo', 1, 0],
   ['clusterMode', undef, undef, 1],
);


VIMRuntime::make_get_set('VchaClusterRuntimeInfo', 'clusterState', 'nodeInfo', 'clusterMode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VchaClusterHealth;
our @ISA = qw(DynamicData);

our @property_list = (
   ['runtimeInfo', 'VchaClusterRuntimeInfo', undef, 1],
   ['healthMessages', 'LocalizableMessage', 1, 0],
   ['additionalInformation', 'LocalizableMessage', 1, 0],
);


VIMRuntime::make_get_set('VchaClusterHealth', 'runtimeInfo', 'healthMessages', 'additionalInformation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineAffinityInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['affinitySet', undef, 1, 0],
);


VIMRuntime::make_get_set('VirtualMachineAffinityInfo', 'affinitySet');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineBootOptionsBootableDevice;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualMachineBootOptionsBootableDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineBootOptionsBootableDevice;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineBootOptionsBootableDevice', 'VirtualMachineBootOptionsBootableDevice', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineBootOptionsBootableDevice', 'VirtualMachineBootOptionsBootableDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineBootOptionsBootableDiskDevice;
our @ISA = qw(VirtualMachineBootOptionsBootableDevice);

our @property_list = (
   ['deviceKey', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualMachineBootOptionsBootableDiskDevice', 'deviceKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineBootOptionsBootableEthernetDevice;
our @ISA = qw(VirtualMachineBootOptionsBootableDevice);

our @property_list = (
   ['deviceKey', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualMachineBootOptionsBootableEthernetDevice', 'deviceKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineBootOptionsBootableFloppyDevice;
our @ISA = qw(VirtualMachineBootOptionsBootableDevice);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualMachineBootOptionsBootableFloppyDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineBootOptionsBootableCdromDevice;
our @ISA = qw(VirtualMachineBootOptionsBootableDevice);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualMachineBootOptionsBootableCdromDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineBootOptions;
our @ISA = qw(DynamicData);

our @property_list = (
   ['bootDelay', undef, undef, 0],
   ['enterBIOSSetup', 'boolean', undef, 0],
   ['efiSecureBootEnabled', 'boolean', undef, 0],
   ['bootRetryEnabled', 'boolean', undef, 0],
   ['bootRetryDelay', undef, undef, 0],
   ['bootOrder', 'VirtualMachineBootOptionsBootableDevice', 1, 0],
   ['networkBootProtocol', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineBootOptions', 'bootDelay', 'enterBIOSSetup', 'efiSecureBootEnabled', 'bootRetryEnabled', 'bootRetryDelay', 'bootOrder', 'networkBootProtocol');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineCapability;
our @ISA = qw(DynamicData);

our @property_list = (
   ['snapshotOperationsSupported', 'boolean', undef, 1],
   ['multipleSnapshotsSupported', 'boolean', undef, 1],
   ['snapshotConfigSupported', 'boolean', undef, 1],
   ['poweredOffSnapshotsSupported', 'boolean', undef, 1],
   ['memorySnapshotsSupported', 'boolean', undef, 1],
   ['revertToSnapshotSupported', 'boolean', undef, 1],
   ['quiescedSnapshotsSupported', 'boolean', undef, 1],
   ['disableSnapshotsSupported', 'boolean', undef, 1],
   ['lockSnapshotsSupported', 'boolean', undef, 1],
   ['consolePreferencesSupported', 'boolean', undef, 1],
   ['cpuFeatureMaskSupported', 'boolean', undef, 1],
   ['s1AcpiManagementSupported', 'boolean', undef, 1],
   ['settingScreenResolutionSupported', 'boolean', undef, 1],
   ['toolsAutoUpdateSupported', 'boolean', undef, 1],
   ['vmNpivWwnSupported', 'boolean', undef, 1],
   ['npivWwnOnNonRdmVmSupported', 'boolean', undef, 1],
   ['vmNpivWwnDisableSupported', 'boolean', undef, 0],
   ['vmNpivWwnUpdateSupported', 'boolean', undef, 0],
   ['swapPlacementSupported', 'boolean', undef, 1],
   ['toolsSyncTimeSupported', 'boolean', undef, 1],
   ['virtualMmuUsageSupported', 'boolean', undef, 1],
   ['diskSharesSupported', 'boolean', undef, 1],
   ['bootOptionsSupported', 'boolean', undef, 1],
   ['bootRetryOptionsSupported', 'boolean', undef, 0],
   ['settingVideoRamSizeSupported', 'boolean', undef, 1],
   ['settingDisplayTopologySupported', 'boolean', undef, 0],
   ['recordReplaySupported', 'boolean', undef, 0],
   ['changeTrackingSupported', 'boolean', undef, 0],
   ['multipleCoresPerSocketSupported', 'boolean', undef, 0],
   ['hostBasedReplicationSupported', 'boolean', undef, 0],
   ['guestAutoLockSupported', 'boolean', undef, 0],
   ['memoryReservationLockSupported', 'boolean', undef, 0],
   ['featureRequirementSupported', 'boolean', undef, 0],
   ['poweredOnMonitorTypeChangeSupported', 'boolean', undef, 0],
   ['seSparseDiskSupported', 'boolean', undef, 0],
   ['nestedHVSupported', 'boolean', undef, 0],
   ['vPMCSupported', 'boolean', undef, 0],
   ['secureBootSupported', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineCapability', 'snapshotOperationsSupported', 'multipleSnapshotsSupported', 'snapshotConfigSupported', 'poweredOffSnapshotsSupported', 'memorySnapshotsSupported', 'revertToSnapshotSupported', 'quiescedSnapshotsSupported', 'disableSnapshotsSupported', 'lockSnapshotsSupported', 'consolePreferencesSupported', 'cpuFeatureMaskSupported', 's1AcpiManagementSupported', 'settingScreenResolutionSupported', 'toolsAutoUpdateSupported', 'vmNpivWwnSupported', 'npivWwnOnNonRdmVmSupported', 'vmNpivWwnDisableSupported', 'vmNpivWwnUpdateSupported', 'swapPlacementSupported', 'toolsSyncTimeSupported', 'virtualMmuUsageSupported', 'diskSharesSupported', 'bootOptionsSupported', 'bootRetryOptionsSupported', 'settingVideoRamSizeSupported', 'settingDisplayTopologySupported', 'recordReplaySupported', 'changeTrackingSupported', 'multipleCoresPerSocketSupported', 'hostBasedReplicationSupported', 'guestAutoLockSupported', 'memoryReservationLockSupported', 'featureRequirementSupported', 'poweredOnMonitorTypeChangeSupported', 'seSparseDiskSupported', 'nestedHVSupported', 'vPMCSupported', 'secureBootSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineCdromInfo;
our @ISA = qw(VirtualMachineTargetInfo);

our @property_list = (
   ['description', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineCdromInfo', 'description');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineCdromInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineCdromInfo', 'VirtualMachineCdromInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineCdromInfo', 'VirtualMachineCdromInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineCloneSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['location', 'VirtualMachineRelocateSpec', undef, 1],
   ['template', 'boolean', undef, 1],
   ['config', 'VirtualMachineConfigSpec', undef, 0],
   ['customization', 'CustomizationSpec', undef, 0],
   ['powerOn', 'boolean', undef, 1],
   ['snapshot', 'ManagedObjectReference', undef, 0],
   ['memory', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineCloneSpec', 'location', 'template', 'config', 'customization', 'powerOn', 'snapshot', 'memory');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineConfigInfoDatastoreUrlPair;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['url', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualMachineConfigInfoDatastoreUrlPair', 'name', 'url');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineConfigInfoDatastoreUrlPair;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineConfigInfoDatastoreUrlPair', 'VirtualMachineConfigInfoDatastoreUrlPair', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineConfigInfoDatastoreUrlPair', 'VirtualMachineConfigInfoDatastoreUrlPair');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineConfigInfoOverheadInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['initialMemoryReservation', undef, undef, 0],
   ['initialSwapReservation', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineConfigInfoOverheadInfo', 'initialMemoryReservation', 'initialSwapReservation');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['changeVersion', undef, undef, 1],
   ['modified', undef, undef, 1],
   ['name', undef, undef, 1],
   ['guestFullName', undef, undef, 1],
   ['version', undef, undef, 1],
   ['uuid', undef, undef, 1],
   ['instanceUuid', undef, undef, 0],
   ['npivNodeWorldWideName', undef, 1, 0],
   ['npivPortWorldWideName', undef, 1, 0],
   ['npivWorldWideNameType', undef, undef, 0],
   ['npivDesiredNodeWwns', undef, undef, 0],
   ['npivDesiredPortWwns', undef, undef, 0],
   ['npivTemporaryDisabled', 'boolean', undef, 0],
   ['npivOnNonRdmDisks', 'boolean', undef, 0],
   ['locationId', undef, undef, 0],
   ['template', 'boolean', undef, 1],
   ['guestId', undef, undef, 1],
   ['alternateGuestName', undef, undef, 1],
   ['annotation', undef, undef, 0],
   ['files', 'VirtualMachineFileInfo', undef, 1],
   ['tools', 'ToolsConfigInfo', undef, 0],
   ['flags', 'VirtualMachineFlagInfo', undef, 1],
   ['consolePreferences', 'VirtualMachineConsolePreferences', undef, 0],
   ['defaultPowerOps', 'VirtualMachineDefaultPowerOpInfo', undef, 1],
   ['hardware', 'VirtualHardware', undef, 1],
   ['cpuAllocation', 'ResourceAllocationInfo', undef, 0],
   ['memoryAllocation', 'ResourceAllocationInfo', undef, 0],
   ['latencySensitivity', 'LatencySensitivity', undef, 0],
   ['memoryHotAddEnabled', 'boolean', undef, 0],
   ['cpuHotAddEnabled', 'boolean', undef, 0],
   ['cpuHotRemoveEnabled', 'boolean', undef, 0],
   ['hotPlugMemoryLimit', undef, undef, 0],
   ['hotPlugMemoryIncrementSize', undef, undef, 0],
   ['cpuAffinity', 'VirtualMachineAffinityInfo', undef, 0],
   ['memoryAffinity', 'VirtualMachineAffinityInfo', undef, 0],
   ['networkShaper', 'VirtualMachineNetworkShaperInfo', undef, 0],
   ['extraConfig', 'OptionValue', 1, 0],
   ['cpuFeatureMask', 'HostCpuIdInfo', 1, 0],
   ['datastoreUrl', 'VirtualMachineConfigInfoDatastoreUrlPair', 1, 0],
   ['swapPlacement', undef, undef, 0],
   ['bootOptions', 'VirtualMachineBootOptions', undef, 0],
   ['ftInfo', 'FaultToleranceConfigInfo', undef, 0],
   ['repConfig', 'ReplicationConfigSpec', undef, 0],
   ['vAppConfig', 'VmConfigInfo', undef, 0],
   ['vAssertsEnabled', 'boolean', undef, 0],
   ['changeTrackingEnabled', 'boolean', undef, 0],
   ['firmware', undef, undef, 0],
   ['maxMksConnections', undef, undef, 0],
   ['guestAutoLockEnabled', 'boolean', undef, 0],
   ['managedBy', 'ManagedByInfo', undef, 0],
   ['memoryReservationLockedToMax', 'boolean', undef, 0],
   ['initialOverhead', 'VirtualMachineConfigInfoOverheadInfo', undef, 0],
   ['nestedHVEnabled', 'boolean', undef, 0],
   ['vPMCEnabled', 'boolean', undef, 0],
   ['scheduledHardwareUpgradeInfo', 'ScheduledHardwareUpgradeInfo', undef, 0],
   ['forkConfigInfo', 'VirtualMachineForkConfigInfo', undef, 0],
   ['vFlashCacheReservation', undef, undef, 0],
   ['vmxConfigChecksum', undef, undef, 0],
   ['messageBusTunnelEnabled', 'boolean', undef, 0],
   ['vmStorageObjectId', undef, undef, 0],
   ['swapStorageObjectId', undef, undef, 0],
   ['keyId', 'CryptoKeyId', undef, 0],
   ['guestIntegrityInfo', 'VirtualMachineGuestIntegrityInfo', undef, 0],
   ['migrateEncryption', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineConfigInfo', 'changeVersion', 'modified', 'name', 'guestFullName', 'version', 'uuid', 'instanceUuid', 'npivNodeWorldWideName', 'npivPortWorldWideName', 'npivWorldWideNameType', 'npivDesiredNodeWwns', 'npivDesiredPortWwns', 'npivTemporaryDisabled', 'npivOnNonRdmDisks', 'locationId', 'template', 'guestId', 'alternateGuestName', 'annotation', 'files', 'tools', 'flags', 'consolePreferences', 'defaultPowerOps', 'hardware', 'cpuAllocation', 'memoryAllocation', 'latencySensitivity', 'memoryHotAddEnabled', 'cpuHotAddEnabled', 'cpuHotRemoveEnabled', 'hotPlugMemoryLimit', 'hotPlugMemoryIncrementSize', 'cpuAffinity', 'memoryAffinity', 'networkShaper', 'extraConfig', 'cpuFeatureMask', 'datastoreUrl', 'swapPlacement', 'bootOptions', 'ftInfo', 'repConfig', 'vAppConfig', 'vAssertsEnabled', 'changeTrackingEnabled', 'firmware', 'maxMksConnections', 'guestAutoLockEnabled', 'managedBy', 'memoryReservationLockedToMax', 'initialOverhead', 'nestedHVEnabled', 'vPMCEnabled', 'scheduledHardwareUpgradeInfo', 'forkConfigInfo', 'vFlashCacheReservation', 'vmxConfigChecksum', 'messageBusTunnelEnabled', 'vmStorageObjectId', 'swapStorageObjectId', 'keyId', 'guestIntegrityInfo', 'migrateEncryption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineConfigOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['version', undef, undef, 1],
   ['description', undef, undef, 1],
   ['guestOSDescriptor', 'GuestOsDescriptor', 1, 1],
   ['guestOSDefaultIndex', undef, undef, 1],
   ['hardwareOptions', 'VirtualHardwareOption', undef, 1],
   ['capabilities', 'VirtualMachineCapability', undef, 1],
   ['datastore', 'DatastoreOption', undef, 1],
   ['defaultDevice', 'VirtualDevice', 1, 0],
   ['supportedMonitorType', undef, 1, 1],
   ['supportedOvfEnvironmentTransport', undef, 1, 0],
   ['supportedOvfInstallTransport', undef, 1, 0],
);


VIMRuntime::make_get_set('VirtualMachineConfigOption', 'version', 'description', 'guestOSDescriptor', 'guestOSDefaultIndex', 'hardwareOptions', 'capabilities', 'datastore', 'defaultDevice', 'supportedMonitorType', 'supportedOvfEnvironmentTransport', 'supportedOvfInstallTransport');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineConfigOptionDescriptor;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['description', undef, undef, 0],
   ['host', 'ManagedObjectReference', 1, 0],
   ['createSupported', 'boolean', undef, 0],
   ['defaultConfigOption', 'boolean', undef, 0],
   ['runSupported', 'boolean', undef, 0],
   ['upgradeSupported', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineConfigOptionDescriptor', 'key', 'description', 'host', 'createSupported', 'defaultConfigOption', 'runSupported', 'upgradeSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineConfigOptionDescriptor;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineConfigOptionDescriptor', 'VirtualMachineConfigOptionDescriptor', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineConfigOptionDescriptor', 'VirtualMachineConfigOptionDescriptor');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineCpuIdInfoSpec;
our @ISA = qw(ArrayUpdateSpec);

our @property_list = (
   ['info', 'HostCpuIdInfo', undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineCpuIdInfoSpec', 'info');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineCpuIdInfoSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineCpuIdInfoSpec', 'VirtualMachineCpuIdInfoSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineCpuIdInfoSpec', 'VirtualMachineCpuIdInfoSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['changeVersion', undef, undef, 0],
   ['name', undef, undef, 0],
   ['version', undef, undef, 0],
   ['uuid', undef, undef, 0],
   ['instanceUuid', undef, undef, 0],
   ['npivNodeWorldWideName', undef, 1, 0],
   ['npivPortWorldWideName', undef, 1, 0],
   ['npivWorldWideNameType', undef, undef, 0],
   ['npivDesiredNodeWwns', undef, undef, 0],
   ['npivDesiredPortWwns', undef, undef, 0],
   ['npivTemporaryDisabled', 'boolean', undef, 0],
   ['npivOnNonRdmDisks', 'boolean', undef, 0],
   ['npivWorldWideNameOp', undef, undef, 0],
   ['locationId', undef, undef, 0],
   ['guestId', undef, undef, 0],
   ['alternateGuestName', undef, undef, 0],
   ['annotation', undef, undef, 0],
   ['files', 'VirtualMachineFileInfo', undef, 0],
   ['tools', 'ToolsConfigInfo', undef, 0],
   ['flags', 'VirtualMachineFlagInfo', undef, 0],
   ['consolePreferences', 'VirtualMachineConsolePreferences', undef, 0],
   ['powerOpInfo', 'VirtualMachineDefaultPowerOpInfo', undef, 0],
   ['numCPUs', undef, undef, 0],
   ['numCoresPerSocket', undef, undef, 0],
   ['memoryMB', undef, undef, 0],
   ['memoryHotAddEnabled', 'boolean', undef, 0],
   ['cpuHotAddEnabled', 'boolean', undef, 0],
   ['cpuHotRemoveEnabled', 'boolean', undef, 0],
   ['virtualICH7MPresent', 'boolean', undef, 0],
   ['virtualSMCPresent', 'boolean', undef, 0],
   ['deviceChange', 'VirtualDeviceConfigSpec', 1, 0],
   ['cpuAllocation', 'ResourceAllocationInfo', undef, 0],
   ['memoryAllocation', 'ResourceAllocationInfo', undef, 0],
   ['latencySensitivity', 'LatencySensitivity', undef, 0],
   ['cpuAffinity', 'VirtualMachineAffinityInfo', undef, 0],
   ['memoryAffinity', 'VirtualMachineAffinityInfo', undef, 0],
   ['networkShaper', 'VirtualMachineNetworkShaperInfo', undef, 0],
   ['cpuFeatureMask', 'VirtualMachineCpuIdInfoSpec', 1, 0],
   ['extraConfig', 'OptionValue', 1, 0],
   ['swapPlacement', undef, undef, 0],
   ['bootOptions', 'VirtualMachineBootOptions', undef, 0],
   ['vAppConfig', 'VmConfigSpec', undef, 0],
   ['ftInfo', 'FaultToleranceConfigInfo', undef, 0],
   ['repConfig', 'ReplicationConfigSpec', undef, 0],
   ['vAppConfigRemoved', 'boolean', undef, 0],
   ['vAssertsEnabled', 'boolean', undef, 0],
   ['changeTrackingEnabled', 'boolean', undef, 0],
   ['firmware', undef, undef, 0],
   ['maxMksConnections', undef, undef, 0],
   ['guestAutoLockEnabled', 'boolean', undef, 0],
   ['managedBy', 'ManagedByInfo', undef, 0],
   ['memoryReservationLockedToMax', 'boolean', undef, 0],
   ['nestedHVEnabled', 'boolean', undef, 0],
   ['vPMCEnabled', 'boolean', undef, 0],
   ['scheduledHardwareUpgradeInfo', 'ScheduledHardwareUpgradeInfo', undef, 0],
   ['vmProfile', 'VirtualMachineProfileSpec', 1, 0],
   ['messageBusTunnelEnabled', 'boolean', undef, 0],
   ['crypto', 'CryptoSpec', undef, 0],
   ['migrateEncryption', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineConfigSpec', 'changeVersion', 'name', 'version', 'uuid', 'instanceUuid', 'npivNodeWorldWideName', 'npivPortWorldWideName', 'npivWorldWideNameType', 'npivDesiredNodeWwns', 'npivDesiredPortWwns', 'npivTemporaryDisabled', 'npivOnNonRdmDisks', 'npivWorldWideNameOp', 'locationId', 'guestId', 'alternateGuestName', 'annotation', 'files', 'tools', 'flags', 'consolePreferences', 'powerOpInfo', 'numCPUs', 'numCoresPerSocket', 'memoryMB', 'memoryHotAddEnabled', 'cpuHotAddEnabled', 'cpuHotRemoveEnabled', 'virtualICH7MPresent', 'virtualSMCPresent', 'deviceChange', 'cpuAllocation', 'memoryAllocation', 'latencySensitivity', 'cpuAffinity', 'memoryAffinity', 'networkShaper', 'cpuFeatureMask', 'extraConfig', 'swapPlacement', 'bootOptions', 'vAppConfig', 'ftInfo', 'repConfig', 'vAppConfigRemoved', 'vAssertsEnabled', 'changeTrackingEnabled', 'firmware', 'maxMksConnections', 'guestAutoLockEnabled', 'managedBy', 'memoryReservationLockedToMax', 'nestedHVEnabled', 'vPMCEnabled', 'scheduledHardwareUpgradeInfo', 'vmProfile', 'messageBusTunnelEnabled', 'crypto', 'migrateEncryption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ConfigTarget;
our @ISA = qw(DynamicData);

our @property_list = (
   ['numCpus', undef, undef, 1],
   ['numCpuCores', undef, undef, 1],
   ['numNumaNodes', undef, undef, 1],
   ['smcPresent', 'boolean', undef, 0],
   ['datastore', 'VirtualMachineDatastoreInfo', 1, 0],
   ['network', 'VirtualMachineNetworkInfo', 1, 0],
   ['opaqueNetwork', 'OpaqueNetworkTargetInfo', 1, 0],
   ['distributedVirtualPortgroup', 'DistributedVirtualPortgroupInfo', 1, 0],
   ['distributedVirtualSwitch', 'DistributedVirtualSwitchInfo', 1, 0],
   ['cdRom', 'VirtualMachineCdromInfo', 1, 0],
   ['serial', 'VirtualMachineSerialInfo', 1, 0],
   ['parallel', 'VirtualMachineParallelInfo', 1, 0],
   ['sound', 'VirtualMachineSoundInfo', 1, 0],
   ['usb', 'VirtualMachineUsbInfo', 1, 0],
   ['floppy', 'VirtualMachineFloppyInfo', 1, 0],
   ['legacyNetworkInfo', 'VirtualMachineLegacyNetworkSwitchInfo', 1, 0],
   ['scsiPassthrough', 'VirtualMachineScsiPassthroughInfo', 1, 0],
   ['scsiDisk', 'VirtualMachineScsiDiskDeviceInfo', 1, 0],
   ['ideDisk', 'VirtualMachineIdeDiskDeviceInfo', 1, 0],
   ['maxMemMBOptimalPerf', undef, undef, 1],
   ['resourcePool', 'ResourcePoolRuntimeInfo', undef, 0],
   ['autoVmotion', 'boolean', undef, 0],
   ['pciPassthrough', 'VirtualMachinePciPassthroughInfo', 1, 0],
   ['sriov', 'VirtualMachineSriovInfo', 1, 0],
   ['vFlashModule', 'VirtualMachineVFlashModuleInfo', 1, 0],
   ['sharedGpuPassthroughTypes', 'VirtualMachinePciSharedGpuPassthroughInfo', 1, 0],
);


VIMRuntime::make_get_set('ConfigTarget', 'numCpus', 'numCpuCores', 'numNumaNodes', 'smcPresent', 'datastore', 'network', 'opaqueNetwork', 'distributedVirtualPortgroup', 'distributedVirtualSwitch', 'cdRom', 'serial', 'parallel', 'sound', 'usb', 'floppy', 'legacyNetworkInfo', 'scsiPassthrough', 'scsiDisk', 'ideDisk', 'maxMemMBOptimalPerf', 'resourcePool', 'autoVmotion', 'pciPassthrough', 'sriov', 'vFlashModule', 'sharedGpuPassthroughTypes');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineConsolePreferences;
our @ISA = qw(DynamicData);

our @property_list = (
   ['powerOnWhenOpened', 'boolean', undef, 0],
   ['enterFullScreenOnPowerOn', 'boolean', undef, 0],
   ['closeOnPowerOffOrSuspend', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineConsolePreferences', 'powerOnWhenOpened', 'enterFullScreenOnPowerOn', 'closeOnPowerOffOrSuspend');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineDatastoreInfo;
our @ISA = qw(VirtualMachineTargetInfo);

our @property_list = (
   ['datastore', 'DatastoreSummary', undef, 1],
   ['capability', 'DatastoreCapability', undef, 1],
   ['maxFileSize', undef, undef, 1],
   ['maxVirtualDiskCapacity', undef, undef, 0],
   ['maxPhysicalRDMFileSize', undef, undef, 0],
   ['maxVirtualRDMFileSize', undef, undef, 0],
   ['mode', undef, undef, 1],
   ['vStorageSupport', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineDatastoreInfo', 'datastore', 'capability', 'maxFileSize', 'maxVirtualDiskCapacity', 'maxPhysicalRDMFileSize', 'maxVirtualRDMFileSize', 'mode', 'vStorageSupport');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineDatastoreInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineDatastoreInfo', 'VirtualMachineDatastoreInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineDatastoreInfo', 'VirtualMachineDatastoreInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineDatastoreVolumeOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['fileSystemType', undef, undef, 1],
   ['majorVersion', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineDatastoreVolumeOption', 'fileSystemType', 'majorVersion');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineDatastoreVolumeOption;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineDatastoreVolumeOption', 'VirtualMachineDatastoreVolumeOption', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineDatastoreVolumeOption', 'VirtualMachineDatastoreVolumeOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DatastoreOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['unsupportedVolumes', 'VirtualMachineDatastoreVolumeOption', 1, 0],
);


VIMRuntime::make_get_set('DatastoreOption', 'unsupportedVolumes');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineDefaultPowerOpInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['powerOffType', undef, undef, 0],
   ['suspendType', undef, undef, 0],
   ['resetType', undef, undef, 0],
   ['defaultPowerOffType', undef, undef, 0],
   ['defaultSuspendType', undef, undef, 0],
   ['defaultResetType', undef, undef, 0],
   ['standbyAction', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineDefaultPowerOpInfo', 'powerOffType', 'suspendType', 'resetType', 'defaultPowerOffType', 'defaultSuspendType', 'defaultResetType', 'standbyAction');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineDefaultProfileSpec;
our @ISA = qw(VirtualMachineProfileSpec);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualMachineDefaultProfileSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineDefinedProfileSpec;
our @ISA = qw(VirtualMachineProfileSpec);

our @property_list = (
   ['profileId', undef, undef, 1],
   ['replicationSpec', 'ReplicationSpec', undef, 0],
   ['profileData', 'VirtualMachineProfileRawData', undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineDefinedProfileSpec', 'profileId', 'replicationSpec', 'profileData');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineDeviceRuntimeInfoDeviceRuntimeState;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualMachineDeviceRuntimeInfoDeviceRuntimeState');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState;
our @ISA = qw(VirtualMachineDeviceRuntimeInfoDeviceRuntimeState);

our @property_list = (
   ['vmDirectPathGen2Active', 'boolean', undef, 1],
   ['vmDirectPathGen2InactiveReasonVm', undef, 1, 0],
   ['vmDirectPathGen2InactiveReasonOther', undef, 1, 0],
   ['vmDirectPathGen2InactiveReasonExtended', undef, undef, 0],
   ['reservationStatus', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState', 'vmDirectPathGen2Active', 'vmDirectPathGen2InactiveReasonVm', 'vmDirectPathGen2InactiveReasonOther', 'vmDirectPathGen2InactiveReasonExtended', 'reservationStatus');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineDeviceRuntimeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['runtimeState', 'VirtualMachineDeviceRuntimeInfoDeviceRuntimeState', undef, 1],
   ['key', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualMachineDeviceRuntimeInfo', 'runtimeState', 'key');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineDeviceRuntimeInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineDeviceRuntimeInfo', 'VirtualMachineDeviceRuntimeInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineDeviceRuntimeInfo', 'VirtualMachineDeviceRuntimeInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineDiskDeviceInfo;
our @ISA = qw(VirtualMachineTargetInfo);

our @property_list = (
   ['capacity', undef, undef, 0],
   ['vm', 'ManagedObjectReference', 1, 0],
);


VIMRuntime::make_get_set('VirtualMachineDiskDeviceInfo', 'capacity', 'vm');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineEmptyProfileSpec;
our @ISA = qw(VirtualMachineProfileSpec);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualMachineEmptyProfileSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FaultToleranceConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['role', undef, undef, 1],
   ['instanceUuids', undef, 1, 1],
   ['configPaths', undef, 1, 1],
   ['orphaned', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('FaultToleranceConfigInfo', 'role', 'instanceUuids', 'configPaths', 'orphaned');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FaultTolerancePrimaryConfigInfo;
our @ISA = qw(FaultToleranceConfigInfo);

our @property_list = (
   ['secondaries', 'ManagedObjectReference', 1, 1],
);


VIMRuntime::make_get_set('FaultTolerancePrimaryConfigInfo', 'secondaries');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FaultToleranceSecondaryConfigInfo;
our @ISA = qw(FaultToleranceConfigInfo);

our @property_list = (
   ['primaryVM', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('FaultToleranceSecondaryConfigInfo', 'primaryVM');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FaultToleranceConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['metaDataPath', 'FaultToleranceMetaSpec', undef, 0],
   ['secondaryVmSpec', 'FaultToleranceVMConfigSpec', undef, 0],
);


VIMRuntime::make_get_set('FaultToleranceConfigSpec', 'metaDataPath', 'secondaryVmSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FaultToleranceMetaSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['metaDataDatastore', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('FaultToleranceMetaSpec', 'metaDataDatastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FaultToleranceSecondaryOpResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 1],
   ['powerOnAttempted', 'boolean', undef, 1],
   ['powerOnResult', 'ClusterPowerOnVmResult', undef, 0],
);


VIMRuntime::make_get_set('FaultToleranceSecondaryOpResult', 'vm', 'powerOnAttempted', 'powerOnResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FaultToleranceDiskSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['disk', 'VirtualDevice', undef, 1],
   ['datastore', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('FaultToleranceDiskSpec', 'disk', 'datastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfFaultToleranceDiskSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['FaultToleranceDiskSpec', 'FaultToleranceDiskSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfFaultToleranceDiskSpec', 'FaultToleranceDiskSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FaultToleranceVMConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vmConfig', 'ManagedObjectReference', undef, 0],
   ['disks', 'FaultToleranceDiskSpec', 1, 0],
);


VIMRuntime::make_get_set('FaultToleranceVMConfigSpec', 'vmConfig', 'disks');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineFeatureRequirement;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['featureName', undef, undef, 1],
   ['value', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualMachineFeatureRequirement', 'key', 'featureName', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineFeatureRequirement;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineFeatureRequirement', 'VirtualMachineFeatureRequirement', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineFeatureRequirement', 'VirtualMachineFeatureRequirement');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineFileInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vmPathName', undef, undef, 0],
   ['snapshotDirectory', undef, undef, 0],
   ['suspendDirectory', undef, undef, 0],
   ['logDirectory', undef, undef, 0],
   ['ftMetadataDirectory', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineFileInfo', 'vmPathName', 'snapshotDirectory', 'suspendDirectory', 'logDirectory', 'ftMetadataDirectory');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineFileLayoutDiskLayout;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['diskFile', undef, 1, 1],
);


VIMRuntime::make_get_set('VirtualMachineFileLayoutDiskLayout', 'key', 'diskFile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineFileLayoutDiskLayout;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineFileLayoutDiskLayout', 'VirtualMachineFileLayoutDiskLayout', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineFileLayoutDiskLayout', 'VirtualMachineFileLayoutDiskLayout');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineFileLayoutSnapshotLayout;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', 'ManagedObjectReference', undef, 1],
   ['snapshotFile', undef, 1, 1],
);


VIMRuntime::make_get_set('VirtualMachineFileLayoutSnapshotLayout', 'key', 'snapshotFile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineFileLayoutSnapshotLayout;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineFileLayoutSnapshotLayout', 'VirtualMachineFileLayoutSnapshotLayout', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineFileLayoutSnapshotLayout', 'VirtualMachineFileLayoutSnapshotLayout');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineFileLayout;
our @ISA = qw(DynamicData);

our @property_list = (
   ['configFile', undef, 1, 0],
   ['logFile', undef, 1, 0],
   ['disk', 'VirtualMachineFileLayoutDiskLayout', 1, 0],
   ['snapshot', 'VirtualMachineFileLayoutSnapshotLayout', 1, 0],
   ['swapFile', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineFileLayout', 'configFile', 'logFile', 'disk', 'snapshot', 'swapFile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineFileLayoutExFileInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['name', undef, undef, 1],
   ['type', undef, undef, 1],
   ['size', undef, undef, 1],
   ['uniqueSize', undef, undef, 0],
   ['backingObjectId', undef, undef, 0],
   ['accessible', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineFileLayoutExFileInfo', 'key', 'name', 'type', 'size', 'uniqueSize', 'backingObjectId', 'accessible');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineFileLayoutExFileInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineFileLayoutExFileInfo', 'VirtualMachineFileLayoutExFileInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineFileLayoutExFileInfo', 'VirtualMachineFileLayoutExFileInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineFileLayoutExDiskUnit;
our @ISA = qw(DynamicData);

our @property_list = (
   ['fileKey', undef, 1, 1],
);


VIMRuntime::make_get_set('VirtualMachineFileLayoutExDiskUnit', 'fileKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineFileLayoutExDiskUnit;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineFileLayoutExDiskUnit', 'VirtualMachineFileLayoutExDiskUnit', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineFileLayoutExDiskUnit', 'VirtualMachineFileLayoutExDiskUnit');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineFileLayoutExDiskLayout;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['chain', 'VirtualMachineFileLayoutExDiskUnit', 1, 0],
);


VIMRuntime::make_get_set('VirtualMachineFileLayoutExDiskLayout', 'key', 'chain');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineFileLayoutExDiskLayout;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineFileLayoutExDiskLayout', 'VirtualMachineFileLayoutExDiskLayout', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineFileLayoutExDiskLayout', 'VirtualMachineFileLayoutExDiskLayout');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineFileLayoutExSnapshotLayout;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', 'ManagedObjectReference', undef, 1],
   ['dataKey', undef, undef, 1],
   ['memoryKey', undef, undef, 0],
   ['disk', 'VirtualMachineFileLayoutExDiskLayout', 1, 0],
);


VIMRuntime::make_get_set('VirtualMachineFileLayoutExSnapshotLayout', 'key', 'dataKey', 'memoryKey', 'disk');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineFileLayoutExSnapshotLayout;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineFileLayoutExSnapshotLayout', 'VirtualMachineFileLayoutExSnapshotLayout', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineFileLayoutExSnapshotLayout', 'VirtualMachineFileLayoutExSnapshotLayout');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineFileLayoutEx;
our @ISA = qw(DynamicData);

our @property_list = (
   ['file', 'VirtualMachineFileLayoutExFileInfo', 1, 0],
   ['disk', 'VirtualMachineFileLayoutExDiskLayout', 1, 0],
   ['snapshot', 'VirtualMachineFileLayoutExSnapshotLayout', 1, 0],
   ['timestamp', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualMachineFileLayoutEx', 'file', 'disk', 'snapshot', 'timestamp');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineFlagInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['disableAcceleration', 'boolean', undef, 0],
   ['enableLogging', 'boolean', undef, 0],
   ['useToe', 'boolean', undef, 0],
   ['runWithDebugInfo', 'boolean', undef, 0],
   ['monitorType', undef, undef, 0],
   ['htSharing', undef, undef, 0],
   ['snapshotDisabled', 'boolean', undef, 0],
   ['snapshotLocked', 'boolean', undef, 0],
   ['diskUuidEnabled', 'boolean', undef, 0],
   ['virtualMmuUsage', undef, undef, 0],
   ['virtualExecUsage', undef, undef, 0],
   ['snapshotPowerOffBehavior', undef, undef, 0],
   ['recordReplayEnabled', 'boolean', undef, 0],
   ['faultToleranceType', undef, undef, 0],
   ['cbrcCacheEnabled', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineFlagInfo', 'disableAcceleration', 'enableLogging', 'useToe', 'runWithDebugInfo', 'monitorType', 'htSharing', 'snapshotDisabled', 'snapshotLocked', 'diskUuidEnabled', 'virtualMmuUsage', 'virtualExecUsage', 'snapshotPowerOffBehavior', 'recordReplayEnabled', 'faultToleranceType', 'cbrcCacheEnabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineFloppyInfo;
our @ISA = qw(VirtualMachineTargetInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualMachineFloppyInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineFloppyInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineFloppyInfo', 'VirtualMachineFloppyInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineFloppyInfo', 'VirtualMachineFloppyInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineForkConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['parentEnabled', 'boolean', undef, 0],
   ['childForkGroupId', undef, undef, 0],
   ['parentForkGroupId', undef, undef, 0],
   ['childType', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineForkConfigInfo', 'parentEnabled', 'childForkGroupId', 'parentForkGroupId', 'childType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestDiskInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['diskPath', undef, undef, 0],
   ['capacity', undef, undef, 0],
   ['freeSpace', undef, undef, 0],
);


VIMRuntime::make_get_set('GuestDiskInfo', 'diskPath', 'capacity', 'freeSpace');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfGuestDiskInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['GuestDiskInfo', 'GuestDiskInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfGuestDiskInfo', 'GuestDiskInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestNicInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['network', undef, undef, 0],
   ['ipAddress', undef, 1, 0],
   ['macAddress', undef, undef, 0],
   ['connected', 'boolean', undef, 1],
   ['deviceConfigId', undef, undef, 1],
   ['dnsConfig', 'NetDnsConfigInfo', undef, 0],
   ['ipConfig', 'NetIpConfigInfo', undef, 0],
   ['netBIOSConfig', 'NetBIOSConfigInfo', undef, 0],
);


VIMRuntime::make_get_set('GuestNicInfo', 'network', 'ipAddress', 'macAddress', 'connected', 'deviceConfigId', 'dnsConfig', 'ipConfig', 'netBIOSConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfGuestNicInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['GuestNicInfo', 'GuestNicInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfGuestNicInfo', 'GuestNicInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestStackInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['dnsConfig', 'NetDnsConfigInfo', undef, 0],
   ['ipRouteConfig', 'NetIpRouteConfigInfo', undef, 0],
   ['ipStackConfig', 'KeyValue', 1, 0],
   ['dhcpConfig', 'NetDhcpConfigInfo', undef, 0],
);


VIMRuntime::make_get_set('GuestStackInfo', 'dnsConfig', 'ipRouteConfig', 'ipStackConfig', 'dhcpConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfGuestStackInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['GuestStackInfo', 'GuestStackInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfGuestStackInfo', 'GuestStackInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestScreenInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['width', undef, undef, 1],
   ['height', undef, undef, 1],
);


VIMRuntime::make_get_set('GuestScreenInfo', 'width', 'height');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestInfoNamespaceGenerationInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['generationNo', undef, undef, 1],
);


VIMRuntime::make_get_set('GuestInfoNamespaceGenerationInfo', 'key', 'generationNo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfGuestInfoNamespaceGenerationInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['GuestInfoNamespaceGenerationInfo', 'GuestInfoNamespaceGenerationInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfGuestInfoNamespaceGenerationInfo', 'GuestInfoNamespaceGenerationInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['toolsStatus', 'VirtualMachineToolsStatus', undef, 0],
   ['toolsVersionStatus', undef, undef, 0],
   ['toolsVersionStatus2', undef, undef, 0],
   ['toolsRunningStatus', undef, undef, 0],
   ['toolsVersion', undef, undef, 0],
   ['toolsInstallType', undef, undef, 0],
   ['guestId', undef, undef, 0],
   ['guestFamily', undef, undef, 0],
   ['guestFullName', undef, undef, 0],
   ['hostName', undef, undef, 0],
   ['ipAddress', undef, undef, 0],
   ['net', 'GuestNicInfo', 1, 0],
   ['ipStack', 'GuestStackInfo', 1, 0],
   ['disk', 'GuestDiskInfo', 1, 0],
   ['screen', 'GuestScreenInfo', undef, 0],
   ['guestState', undef, undef, 1],
   ['appHeartbeatStatus', undef, undef, 0],
   ['guestKernelCrashed', 'boolean', undef, 0],
   ['appState', undef, undef, 0],
   ['guestOperationsReady', 'boolean', undef, 0],
   ['interactiveGuestOperationsReady', 'boolean', undef, 0],
   ['guestStateChangeSupported', 'boolean', undef, 0],
   ['generationInfo', 'GuestInfoNamespaceGenerationInfo', 1, 0],
);


VIMRuntime::make_get_set('GuestInfo', 'toolsStatus', 'toolsVersionStatus', 'toolsVersionStatus2', 'toolsRunningStatus', 'toolsVersion', 'toolsInstallType', 'guestId', 'guestFamily', 'guestFullName', 'hostName', 'ipAddress', 'net', 'ipStack', 'disk', 'screen', 'guestState', 'appHeartbeatStatus', 'guestKernelCrashed', 'appState', 'guestOperationsReady', 'interactiveGuestOperationsReady', 'guestStateChangeSupported', 'generationInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineGuestIntegrityInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['enabled', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineGuestIntegrityInfo', 'enabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestOsDescriptor;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
   ['family', undef, undef, 1],
   ['fullName', undef, undef, 1],
   ['supportedMaxCPUs', undef, undef, 1],
   ['numSupportedPhysicalSockets', undef, undef, 0],
   ['numSupportedCoresPerSocket', undef, undef, 0],
   ['supportedMinMemMB', undef, undef, 1],
   ['supportedMaxMemMB', undef, undef, 1],
   ['recommendedMemMB', undef, undef, 1],
   ['recommendedColorDepth', undef, undef, 1],
   ['supportedDiskControllerList', undef, 1, 1],
   ['recommendedSCSIController', undef, undef, 0],
   ['recommendedDiskController', undef, undef, 1],
   ['supportedNumDisks', undef, undef, 1],
   ['recommendedDiskSizeMB', undef, undef, 1],
   ['recommendedCdromController', undef, undef, 0],
   ['supportedEthernetCard', undef, 1, 1],
   ['recommendedEthernetCard', undef, undef, 0],
   ['supportsSlaveDisk', 'boolean', undef, 0],
   ['cpuFeatureMask', 'HostCpuIdInfo', 1, 0],
   ['smcRequired', 'boolean', undef, 0],
   ['supportsWakeOnLan', 'boolean', undef, 1],
   ['supportsVMI', 'boolean', undef, 0],
   ['supportsMemoryHotAdd', 'boolean', undef, 0],
   ['supportsCpuHotAdd', 'boolean', undef, 0],
   ['supportsCpuHotRemove', 'boolean', undef, 0],
   ['supportedFirmware', undef, 1, 0],
   ['recommendedFirmware', undef, undef, 0],
   ['supportedUSBControllerList', undef, 1, 0],
   ['recommendedUSBController', undef, undef, 0],
   ['supports3D', 'boolean', undef, 0],
   ['recommended3D', 'boolean', undef, 0],
   ['smcRecommended', 'boolean', undef, 0],
   ['ich7mRecommended', 'boolean', undef, 0],
   ['usbRecommended', 'boolean', undef, 0],
   ['supportLevel', undef, undef, 0],
   ['supportedForCreate', 'boolean', undef, 0],
   ['vRAMSizeInKB', 'IntOption', undef, 0],
   ['numSupportedFloppyDevices', undef, undef, 0],
   ['wakeOnLanEthernetCard', undef, 1, 0],
   ['supportsPvscsiControllerForBoot', 'boolean', undef, 0],
   ['diskUuidEnabled', 'boolean', undef, 0],
   ['supportsHotPlugPCI', 'boolean', undef, 0],
   ['supportsSecureBoot', 'boolean', undef, 0],
   ['defaultSecureBoot', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('GuestOsDescriptor', 'id', 'family', 'fullName', 'supportedMaxCPUs', 'numSupportedPhysicalSockets', 'numSupportedCoresPerSocket', 'supportedMinMemMB', 'supportedMaxMemMB', 'recommendedMemMB', 'recommendedColorDepth', 'supportedDiskControllerList', 'recommendedSCSIController', 'recommendedDiskController', 'supportedNumDisks', 'recommendedDiskSizeMB', 'recommendedCdromController', 'supportedEthernetCard', 'recommendedEthernetCard', 'supportsSlaveDisk', 'cpuFeatureMask', 'smcRequired', 'supportsWakeOnLan', 'supportsVMI', 'supportsMemoryHotAdd', 'supportsCpuHotAdd', 'supportsCpuHotRemove', 'supportedFirmware', 'recommendedFirmware', 'supportedUSBControllerList', 'recommendedUSBController', 'supports3D', 'recommended3D', 'smcRecommended', 'ich7mRecommended', 'usbRecommended', 'supportLevel', 'supportedForCreate', 'vRAMSizeInKB', 'numSupportedFloppyDevices', 'wakeOnLanEthernetCard', 'supportsPvscsiControllerForBoot', 'diskUuidEnabled', 'supportsHotPlugPCI', 'supportsSecureBoot', 'defaultSecureBoot');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfGuestOsDescriptor;
our @ISA = qw(ComplexType);

our @property_list = (
   ['GuestOsDescriptor', 'GuestOsDescriptor', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfGuestOsDescriptor', 'GuestOsDescriptor');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineGuestQuiesceSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['timeout', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineGuestQuiesceSpec', 'timeout');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineIdeDiskDevicePartitionInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
   ['capacity', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualMachineIdeDiskDevicePartitionInfo', 'id', 'capacity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineIdeDiskDevicePartitionInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineIdeDiskDevicePartitionInfo', 'VirtualMachineIdeDiskDevicePartitionInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineIdeDiskDevicePartitionInfo', 'VirtualMachineIdeDiskDevicePartitionInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineIdeDiskDeviceInfo;
our @ISA = qw(VirtualMachineDiskDeviceInfo);

our @property_list = (
   ['partitionTable', 'VirtualMachineIdeDiskDevicePartitionInfo', 1, 0],
);


VIMRuntime::make_get_set('VirtualMachineIdeDiskDeviceInfo', 'partitionTable');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineIdeDiskDeviceInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineIdeDiskDeviceInfo', 'VirtualMachineIdeDiskDeviceInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineIdeDiskDeviceInfo', 'VirtualMachineIdeDiskDeviceInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineLegacyNetworkSwitchInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualMachineLegacyNetworkSwitchInfo', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineLegacyNetworkSwitchInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineLegacyNetworkSwitchInfo', 'VirtualMachineLegacyNetworkSwitchInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineLegacyNetworkSwitchInfo', 'VirtualMachineLegacyNetworkSwitchInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineMessage;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
   ['argument', 'anyType', 1, 0],
   ['text', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineMessage', 'id', 'argument', 'text');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineMessage;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineMessage', 'VirtualMachineMessage', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineMessage', 'VirtualMachineMessage');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineMetadataManagerVmMetadataOwner;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualMachineMetadataManagerVmMetadataOwner', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineMetadataManagerVmMetadata;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vmId', undef, undef, 1],
   ['metadata', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineMetadataManagerVmMetadata', 'vmId', 'metadata');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineMetadataManagerVmMetadataInput;
our @ISA = qw(DynamicData);

our @property_list = (
   ['operation', undef, undef, 1],
   ['vmMetadata', 'VirtualMachineMetadataManagerVmMetadata', undef, 1],
);


VIMRuntime::make_get_set('VirtualMachineMetadataManagerVmMetadataInput', 'operation', 'vmMetadata');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineMetadataManagerVmMetadataInput;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineMetadataManagerVmMetadataInput', 'VirtualMachineMetadataManagerVmMetadataInput', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineMetadataManagerVmMetadataInput', 'VirtualMachineMetadataManagerVmMetadataInput');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineMetadataManagerVmMetadataResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vmMetadata', 'VirtualMachineMetadataManagerVmMetadata', undef, 1],
   ['error', 'LocalizedMethodFault', undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineMetadataManagerVmMetadataResult', 'vmMetadata', 'error');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineMetadataManagerVmMetadataResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineMetadataManagerVmMetadataResult', 'VirtualMachineMetadataManagerVmMetadataResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineMetadataManagerVmMetadataResult', 'VirtualMachineMetadataManagerVmMetadataResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineNetworkInfo;
our @ISA = qw(VirtualMachineTargetInfo);

our @property_list = (
   ['network', 'NetworkSummary', undef, 1],
   ['vswitch', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineNetworkInfo', 'network', 'vswitch');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineNetworkInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineNetworkInfo', 'VirtualMachineNetworkInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineNetworkInfo', 'VirtualMachineNetworkInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineNetworkShaperInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['enabled', 'boolean', undef, 0],
   ['peakBps', undef, undef, 0],
   ['averageBps', undef, undef, 0],
   ['burstSize', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineNetworkShaperInfo', 'enabled', 'peakBps', 'averageBps', 'burstSize');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package OpaqueNetworkTargetInfo;
our @ISA = qw(VirtualMachineTargetInfo);

our @property_list = (
   ['network', 'OpaqueNetworkSummary', undef, 1],
   ['networkReservationSupported', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('OpaqueNetworkTargetInfo', 'network', 'networkReservationSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfOpaqueNetworkTargetInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['OpaqueNetworkTargetInfo', 'OpaqueNetworkTargetInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfOpaqueNetworkTargetInfo', 'OpaqueNetworkTargetInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineParallelInfo;
our @ISA = qw(VirtualMachineTargetInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualMachineParallelInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineParallelInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineParallelInfo', 'VirtualMachineParallelInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineParallelInfo', 'VirtualMachineParallelInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachinePciPassthroughInfo;
our @ISA = qw(VirtualMachineTargetInfo);

our @property_list = (
   ['pciDevice', 'HostPciDevice', undef, 1],
   ['systemId', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualMachinePciPassthroughInfo', 'pciDevice', 'systemId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachinePciPassthroughInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachinePciPassthroughInfo', 'VirtualMachinePciPassthroughInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachinePciPassthroughInfo', 'VirtualMachinePciPassthroughInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachinePciSharedGpuPassthroughInfo;
our @ISA = qw(VirtualMachineTargetInfo);

our @property_list = (
   ['vgpu', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualMachinePciSharedGpuPassthroughInfo', 'vgpu');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachinePciSharedGpuPassthroughInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachinePciSharedGpuPassthroughInfo', 'VirtualMachinePciSharedGpuPassthroughInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachinePciSharedGpuPassthroughInfo', 'VirtualMachinePciSharedGpuPassthroughInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineProfileRawData;
our @ISA = qw(DynamicData);

our @property_list = (
   ['extensionKey', undef, undef, 1],
   ['objectData', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineProfileRawData', 'extensionKey', 'objectData');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineProfileSpec;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualMachineProfileSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineProfileSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineProfileSpec', 'VirtualMachineProfileSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineProfileSpec', 'VirtualMachineProfileSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineQuestionInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
   ['text', undef, undef, 1],
   ['choice', 'ChoiceOption', undef, 1],
   ['message', 'VirtualMachineMessage', 1, 0],
);


VIMRuntime::make_get_set('VirtualMachineQuestionInfo', 'id', 'text', 'choice', 'message');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineRelocateSpecDiskLocator;
our @ISA = qw(DynamicData);

our @property_list = (
   ['diskId', undef, undef, 1],
   ['datastore', 'ManagedObjectReference', undef, 1],
   ['diskMoveType', undef, undef, 0],
   ['diskBackingInfo', 'VirtualDeviceBackingInfo', undef, 0],
   ['profile', 'VirtualMachineProfileSpec', 1, 0],
);


VIMRuntime::make_get_set('VirtualMachineRelocateSpecDiskLocator', 'diskId', 'datastore', 'diskMoveType', 'diskBackingInfo', 'profile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineRelocateSpecDiskLocator;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineRelocateSpecDiskLocator', 'VirtualMachineRelocateSpecDiskLocator', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineRelocateSpecDiskLocator', 'VirtualMachineRelocateSpecDiskLocator');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineRelocateSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['service', 'ServiceLocator', undef, 0],
   ['folder', 'ManagedObjectReference', undef, 0],
   ['datastore', 'ManagedObjectReference', undef, 0],
   ['diskMoveType', undef, undef, 0],
   ['pool', 'ManagedObjectReference', undef, 0],
   ['host', 'ManagedObjectReference', undef, 0],
   ['disk', 'VirtualMachineRelocateSpecDiskLocator', 1, 0],
   ['transform', 'VirtualMachineRelocateTransformation', undef, 0],
   ['deviceChange', 'VirtualDeviceConfigSpec', 1, 0],
   ['profile', 'VirtualMachineProfileSpec', 1, 0],
);


VIMRuntime::make_get_set('VirtualMachineRelocateSpec', 'service', 'folder', 'datastore', 'diskMoveType', 'pool', 'host', 'disk', 'transform', 'deviceChange', 'profile');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ReplicationInfoDiskSettings;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['diskReplicationId', undef, undef, 1],
);


VIMRuntime::make_get_set('ReplicationInfoDiskSettings', 'key', 'diskReplicationId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfReplicationInfoDiskSettings;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ReplicationInfoDiskSettings', 'ReplicationInfoDiskSettings', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfReplicationInfoDiskSettings', 'ReplicationInfoDiskSettings');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ReplicationConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['generation', undef, undef, 1],
   ['vmReplicationId', undef, undef, 1],
   ['destination', undef, undef, 1],
   ['port', undef, undef, 1],
   ['rpo', undef, undef, 1],
   ['quiesceGuestEnabled', 'boolean', undef, 1],
   ['paused', 'boolean', undef, 1],
   ['oppUpdatesEnabled', 'boolean', undef, 1],
   ['netCompressionEnabled', 'boolean', undef, 0],
   ['disk', 'ReplicationInfoDiskSettings', 1, 0],
);


VIMRuntime::make_get_set('ReplicationConfigSpec', 'generation', 'vmReplicationId', 'destination', 'port', 'rpo', 'quiesceGuestEnabled', 'paused', 'oppUpdatesEnabled', 'netCompressionEnabled', 'disk');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineRuntimeInfoDasProtectionState;
our @ISA = qw(DynamicData);

our @property_list = (
   ['dasProtected', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('VirtualMachineRuntimeInfoDasProtectionState', 'dasProtected');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineRuntimeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['device', 'VirtualMachineDeviceRuntimeInfo', 1, 0],
   ['host', 'ManagedObjectReference', undef, 0],
   ['connectionState', 'VirtualMachineConnectionState', undef, 1],
   ['powerState', 'VirtualMachinePowerState', undef, 1],
   ['faultToleranceState', 'VirtualMachineFaultToleranceState', undef, 0],
   ['dasVmProtection', 'VirtualMachineRuntimeInfoDasProtectionState', undef, 0],
   ['toolsInstallerMounted', 'boolean', undef, 1],
   ['suspendTime', undef, undef, 0],
   ['bootTime', undef, undef, 0],
   ['suspendInterval', undef, undef, 0],
   ['question', 'VirtualMachineQuestionInfo', undef, 0],
   ['memoryOverhead', undef, undef, 0],
   ['maxCpuUsage', undef, undef, 0],
   ['maxMemoryUsage', undef, undef, 0],
   ['numMksConnections', undef, undef, 1],
   ['recordReplayState', 'VirtualMachineRecordReplayState', undef, 0],
   ['cleanPowerOff', 'boolean', undef, 0],
   ['needSecondaryReason', undef, undef, 0],
   ['onlineStandby', 'boolean', undef, 0],
   ['minRequiredEVCModeKey', undef, undef, 0],
   ['consolidationNeeded', 'boolean', undef, 0],
   ['offlineFeatureRequirement', 'VirtualMachineFeatureRequirement', 1, 0],
   ['featureRequirement', 'VirtualMachineFeatureRequirement', 1, 0],
   ['featureMask', 'HostFeatureMask', 1, 0],
   ['vFlashCacheAllocation', undef, undef, 0],
   ['paused', 'boolean', undef, 0],
   ['snapshotInBackground', 'boolean', undef, 0],
   ['quiescedForkParent', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineRuntimeInfo', 'device', 'host', 'connectionState', 'powerState', 'faultToleranceState', 'dasVmProtection', 'toolsInstallerMounted', 'suspendTime', 'bootTime', 'suspendInterval', 'question', 'memoryOverhead', 'maxCpuUsage', 'maxMemoryUsage', 'numMksConnections', 'recordReplayState', 'cleanPowerOff', 'needSecondaryReason', 'onlineStandby', 'minRequiredEVCModeKey', 'consolidationNeeded', 'offlineFeatureRequirement', 'featureRequirement', 'featureMask', 'vFlashCacheAllocation', 'paused', 'snapshotInBackground', 'quiescedForkParent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ScheduledHardwareUpgradeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['upgradePolicy', undef, undef, 0],
   ['versionKey', undef, undef, 0],
   ['scheduledHardwareUpgradeStatus', undef, undef, 0],
   ['fault', 'LocalizedMethodFault', undef, 0],
);


VIMRuntime::make_get_set('ScheduledHardwareUpgradeInfo', 'upgradePolicy', 'versionKey', 'scheduledHardwareUpgradeStatus', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineScsiDiskDeviceInfo;
our @ISA = qw(VirtualMachineDiskDeviceInfo);

our @property_list = (
   ['disk', 'HostScsiDisk', undef, 0],
   ['transportHint', undef, undef, 0],
   ['lunNumber', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineScsiDiskDeviceInfo', 'disk', 'transportHint', 'lunNumber');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineScsiDiskDeviceInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineScsiDiskDeviceInfo', 'VirtualMachineScsiDiskDeviceInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineScsiDiskDeviceInfo', 'VirtualMachineScsiDiskDeviceInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineScsiPassthroughInfo;
our @ISA = qw(VirtualMachineTargetInfo);

our @property_list = (
   ['scsiClass', undef, undef, 1],
   ['vendor', undef, undef, 1],
   ['physicalUnitNumber', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualMachineScsiPassthroughInfo', 'scsiClass', 'vendor', 'physicalUnitNumber');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineScsiPassthroughInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineScsiPassthroughInfo', 'VirtualMachineScsiPassthroughInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineScsiPassthroughInfo', 'VirtualMachineScsiPassthroughInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineSerialInfo;
our @ISA = qw(VirtualMachineTargetInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualMachineSerialInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineSerialInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineSerialInfo', 'VirtualMachineSerialInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineSerialInfo', 'VirtualMachineSerialInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineSnapshotInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['currentSnapshot', 'ManagedObjectReference', undef, 0],
   ['rootSnapshotList', 'VirtualMachineSnapshotTree', 1, 1],
);


VIMRuntime::make_get_set('VirtualMachineSnapshotInfo', 'currentSnapshot', 'rootSnapshotList');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineSnapshotTree;
our @ISA = qw(DynamicData);

our @property_list = (
   ['snapshot', 'ManagedObjectReference', undef, 1],
   ['vm', 'ManagedObjectReference', undef, 1],
   ['name', undef, undef, 1],
   ['description', undef, undef, 1],
   ['id', undef, undef, 0],
   ['createTime', undef, undef, 1],
   ['state', 'VirtualMachinePowerState', undef, 1],
   ['quiesced', 'boolean', undef, 1],
   ['backupManifest', undef, undef, 0],
   ['childSnapshotList', 'VirtualMachineSnapshotTree', 1, 0],
   ['replaySupported', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineSnapshotTree', 'snapshot', 'vm', 'name', 'description', 'id', 'createTime', 'state', 'quiesced', 'backupManifest', 'childSnapshotList', 'replaySupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineSnapshotTree;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineSnapshotTree', 'VirtualMachineSnapshotTree', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineSnapshotTree', 'VirtualMachineSnapshotTree');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineSoundInfo;
our @ISA = qw(VirtualMachineTargetInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualMachineSoundInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineSoundInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineSoundInfo', 'VirtualMachineSoundInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineSoundInfo', 'VirtualMachineSoundInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineSriovDevicePoolInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualMachineSriovDevicePoolInfo', 'key');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineSriovInfo;
our @ISA = qw(VirtualMachinePciPassthroughInfo);

our @property_list = (
   ['virtualFunction', 'boolean', undef, 1],
   ['pnic', undef, undef, 0],
   ['devicePool', 'VirtualMachineSriovDevicePoolInfo', undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineSriovInfo', 'virtualFunction', 'pnic', 'devicePool');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineSriovInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineSriovInfo', 'VirtualMachineSriovInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineSriovInfo', 'VirtualMachineSriovInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineSriovNetworkDevicePoolInfo;
our @ISA = qw(VirtualMachineSriovDevicePoolInfo);

our @property_list = (
   ['switchKey', undef, undef, 0],
   ['switchUuid', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineSriovNetworkDevicePoolInfo', 'switchKey', 'switchUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineUsageOnDatastore;
our @ISA = qw(DynamicData);

our @property_list = (
   ['datastore', 'ManagedObjectReference', undef, 1],
   ['committed', undef, undef, 1],
   ['uncommitted', undef, undef, 1],
   ['unshared', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualMachineUsageOnDatastore', 'datastore', 'committed', 'uncommitted', 'unshared');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineUsageOnDatastore;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineUsageOnDatastore', 'VirtualMachineUsageOnDatastore', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineUsageOnDatastore', 'VirtualMachineUsageOnDatastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineStorageInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['perDatastoreUsage', 'VirtualMachineUsageOnDatastore', 1, 0],
   ['timestamp', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualMachineStorageInfo', 'perDatastoreUsage', 'timestamp');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineConfigSummary;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['template', 'boolean', undef, 1],
   ['vmPathName', undef, undef, 1],
   ['memorySizeMB', undef, undef, 0],
   ['cpuReservation', undef, undef, 0],
   ['memoryReservation', undef, undef, 0],
   ['numCpu', undef, undef, 0],
   ['numEthernetCards', undef, undef, 0],
   ['numVirtualDisks', undef, undef, 0],
   ['uuid', undef, undef, 0],
   ['instanceUuid', undef, undef, 0],
   ['guestId', undef, undef, 0],
   ['guestFullName', undef, undef, 0],
   ['annotation', undef, undef, 0],
   ['product', 'VAppProductInfo', undef, 0],
   ['installBootRequired', 'boolean', undef, 0],
   ['ftInfo', 'FaultToleranceConfigInfo', undef, 0],
   ['managedBy', 'ManagedByInfo', undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineConfigSummary', 'name', 'template', 'vmPathName', 'memorySizeMB', 'cpuReservation', 'memoryReservation', 'numCpu', 'numEthernetCards', 'numVirtualDisks', 'uuid', 'instanceUuid', 'guestId', 'guestFullName', 'annotation', 'product', 'installBootRequired', 'ftInfo', 'managedBy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineQuickStats;
our @ISA = qw(DynamicData);

our @property_list = (
   ['overallCpuUsage', undef, undef, 0],
   ['overallCpuDemand', undef, undef, 0],
   ['guestMemoryUsage', undef, undef, 0],
   ['hostMemoryUsage', undef, undef, 0],
   ['guestHeartbeatStatus', 'ManagedEntityStatus', undef, 1],
   ['distributedCpuEntitlement', undef, undef, 0],
   ['distributedMemoryEntitlement', undef, undef, 0],
   ['staticCpuEntitlement', undef, undef, 0],
   ['staticMemoryEntitlement', undef, undef, 0],
   ['privateMemory', undef, undef, 0],
   ['sharedMemory', undef, undef, 0],
   ['swappedMemory', undef, undef, 0],
   ['balloonedMemory', undef, undef, 0],
   ['consumedOverheadMemory', undef, undef, 0],
   ['ftLogBandwidth', undef, undef, 0],
   ['ftSecondaryLatency', undef, undef, 0],
   ['ftLatencyStatus', 'ManagedEntityStatus', undef, 0],
   ['compressedMemory', undef, undef, 0],
   ['uptimeSeconds', undef, undef, 0],
   ['ssdSwappedMemory', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineQuickStats', 'overallCpuUsage', 'overallCpuDemand', 'guestMemoryUsage', 'hostMemoryUsage', 'guestHeartbeatStatus', 'distributedCpuEntitlement', 'distributedMemoryEntitlement', 'staticCpuEntitlement', 'staticMemoryEntitlement', 'privateMemory', 'sharedMemory', 'swappedMemory', 'balloonedMemory', 'consumedOverheadMemory', 'ftLogBandwidth', 'ftSecondaryLatency', 'ftLatencyStatus', 'compressedMemory', 'uptimeSeconds', 'ssdSwappedMemory');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineGuestSummary;
our @ISA = qw(DynamicData);

our @property_list = (
   ['guestId', undef, undef, 0],
   ['guestFullName', undef, undef, 0],
   ['toolsStatus', 'VirtualMachineToolsStatus', undef, 0],
   ['toolsVersionStatus', undef, undef, 0],
   ['toolsVersionStatus2', undef, undef, 0],
   ['toolsRunningStatus', undef, undef, 0],
   ['hostName', undef, undef, 0],
   ['ipAddress', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineGuestSummary', 'guestId', 'guestFullName', 'toolsStatus', 'toolsVersionStatus', 'toolsVersionStatus2', 'toolsRunningStatus', 'hostName', 'ipAddress');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineStorageSummary;
our @ISA = qw(DynamicData);

our @property_list = (
   ['committed', undef, undef, 1],
   ['uncommitted', undef, undef, 1],
   ['unshared', undef, undef, 1],
   ['timestamp', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualMachineStorageSummary', 'committed', 'uncommitted', 'unshared', 'timestamp');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineSummary;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 0],
   ['runtime', 'VirtualMachineRuntimeInfo', undef, 1],
   ['guest', 'VirtualMachineGuestSummary', undef, 0],
   ['config', 'VirtualMachineConfigSummary', undef, 1],
   ['storage', 'VirtualMachineStorageSummary', undef, 0],
   ['quickStats', 'VirtualMachineQuickStats', undef, 1],
   ['overallStatus', 'ManagedEntityStatus', undef, 1],
   ['customValue', 'CustomFieldValue', 1, 0],
);


VIMRuntime::make_get_set('VirtualMachineSummary', 'vm', 'runtime', 'guest', 'config', 'storage', 'quickStats', 'overallStatus', 'customValue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineSummary;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineSummary', 'VirtualMachineSummary', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineSummary', 'VirtualMachineSummary');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineTargetInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['configurationTag', undef, 1, 0],
);


VIMRuntime::make_get_set('VirtualMachineTargetInfo', 'name', 'configurationTag');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ToolsConfigInfoToolsLastInstallInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['counter', undef, undef, 1],
   ['fault', 'LocalizedMethodFault', undef, 0],
);


VIMRuntime::make_get_set('ToolsConfigInfoToolsLastInstallInfo', 'counter', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ToolsConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['toolsVersion', undef, undef, 0],
   ['toolsInstallType', undef, undef, 0],
   ['afterPowerOn', 'boolean', undef, 0],
   ['afterResume', 'boolean', undef, 0],
   ['beforeGuestStandby', 'boolean', undef, 0],
   ['beforeGuestShutdown', 'boolean', undef, 0],
   ['beforeGuestReboot', 'boolean', undef, 0],
   ['toolsUpgradePolicy', undef, undef, 0],
   ['pendingCustomization', undef, undef, 0],
   ['customizationKeyId', 'CryptoKeyId', undef, 0],
   ['syncTimeWithHost', 'boolean', undef, 0],
   ['lastInstallInfo', 'ToolsConfigInfoToolsLastInstallInfo', undef, 0],
);


VIMRuntime::make_get_set('ToolsConfigInfo', 'toolsVersion', 'toolsInstallType', 'afterPowerOn', 'afterResume', 'beforeGuestStandby', 'beforeGuestShutdown', 'beforeGuestReboot', 'toolsUpgradePolicy', 'pendingCustomization', 'customizationKeyId', 'syncTimeWithHost', 'lastInstallInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineUsbInfo;
our @ISA = qw(VirtualMachineTargetInfo);

our @property_list = (
   ['description', undef, undef, 1],
   ['vendor', undef, undef, 1],
   ['product', undef, undef, 1],
   ['physicalPath', undef, undef, 1],
   ['family', undef, 1, 0],
   ['speed', undef, 1, 0],
   ['summary', 'VirtualMachineSummary', undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineUsbInfo', 'description', 'vendor', 'product', 'physicalPath', 'family', 'speed', 'summary');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineUsbInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineUsbInfo', 'VirtualMachineUsbInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineUsbInfo', 'VirtualMachineUsbInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UsbScanCodeSpecModifierType;
our @ISA = qw(DynamicData);

our @property_list = (
   ['leftControl', 'boolean', undef, 0],
   ['leftShift', 'boolean', undef, 0],
   ['leftAlt', 'boolean', undef, 0],
   ['leftGui', 'boolean', undef, 0],
   ['rightControl', 'boolean', undef, 0],
   ['rightShift', 'boolean', undef, 0],
   ['rightAlt', 'boolean', undef, 0],
   ['rightGui', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('UsbScanCodeSpecModifierType', 'leftControl', 'leftShift', 'leftAlt', 'leftGui', 'rightControl', 'rightShift', 'rightAlt', 'rightGui');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UsbScanCodeSpecKeyEvent;
our @ISA = qw(DynamicData);

our @property_list = (
   ['usbHidCode', undef, undef, 1],
   ['modifiers', 'UsbScanCodeSpecModifierType', undef, 0],
);


VIMRuntime::make_get_set('UsbScanCodeSpecKeyEvent', 'usbHidCode', 'modifiers');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfUsbScanCodeSpecKeyEvent;
our @ISA = qw(ComplexType);

our @property_list = (
   ['UsbScanCodeSpecKeyEvent', 'UsbScanCodeSpecKeyEvent', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfUsbScanCodeSpecKeyEvent', 'UsbScanCodeSpecKeyEvent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UsbScanCodeSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['keyEvents', 'UsbScanCodeSpecKeyEvent', 1, 1],
);


VIMRuntime::make_get_set('UsbScanCodeSpec', 'keyEvents');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineVFlashModuleInfo;
our @ISA = qw(VirtualMachineTargetInfo);

our @property_list = (
   ['vFlashModule', 'HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption', undef, 1],
);


VIMRuntime::make_get_set('VirtualMachineVFlashModuleInfo', 'vFlashModule');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineVFlashModuleInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineVFlashModuleInfo', 'VirtualMachineVFlashModuleInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineVFlashModuleInfo', 'VirtualMachineVFlashModuleInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualHardware;
our @ISA = qw(DynamicData);

our @property_list = (
   ['numCPU', undef, undef, 1],
   ['numCoresPerSocket', undef, undef, 0],
   ['memoryMB', undef, undef, 1],
   ['virtualICH7MPresent', 'boolean', undef, 0],
   ['virtualSMCPresent', 'boolean', undef, 0],
   ['device', 'VirtualDevice', 1, 0],
);


VIMRuntime::make_get_set('VirtualHardware', 'numCPU', 'numCoresPerSocket', 'memoryMB', 'virtualICH7MPresent', 'virtualSMCPresent', 'device');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualHardwareOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['hwVersion', undef, undef, 1],
   ['virtualDeviceOption', 'VirtualDeviceOption', 1, 1],
   ['deviceListReadonly', 'boolean', undef, 1],
   ['numCPU', undef, 1, 1],
   ['numCoresPerSocket', 'IntOption', undef, 0],
   ['numCpuReadonly', 'boolean', undef, 1],
   ['memoryMB', 'LongOption', undef, 1],
   ['numPCIControllers', 'IntOption', undef, 1],
   ['numIDEControllers', 'IntOption', undef, 1],
   ['numUSBControllers', 'IntOption', undef, 1],
   ['numUSBXHCIControllers', 'IntOption', undef, 0],
   ['numSIOControllers', 'IntOption', undef, 1],
   ['numPS2Controllers', 'IntOption', undef, 1],
   ['licensingLimit', undef, 1, 0],
   ['numSupportedWwnPorts', 'IntOption', undef, 0],
   ['numSupportedWwnNodes', 'IntOption', undef, 0],
   ['resourceConfigOption', 'ResourceConfigOption', undef, 0],
);


VIMRuntime::make_get_set('VirtualHardwareOption', 'hwVersion', 'virtualDeviceOption', 'deviceListReadonly', 'numCPU', 'numCoresPerSocket', 'numCpuReadonly', 'memoryMB', 'numPCIControllers', 'numIDEControllers', 'numUSBControllers', 'numUSBXHCIControllers', 'numSIOControllers', 'numPS2Controllers', 'licensingLimit', 'numSupportedWwnPorts', 'numSupportedWwnNodes', 'resourceConfigOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineImportSpec;
our @ISA = qw(ImportSpec);

our @property_list = (
   ['configSpec', 'VirtualMachineConfigSpec', undef, 1],
   ['resPoolEntity', 'ManagedObjectReference', undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineImportSpec', 'configSpec', 'resPoolEntity');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineWindowsQuiesceSpec;
our @ISA = qw(VirtualMachineGuestQuiesceSpec);

our @property_list = (
   ['vssBackupType', undef, undef, 0],
   ['vssBootableSystemState', 'boolean', undef, 0],
   ['vssPartialFileSupport', 'boolean', undef, 0],
   ['vssBackupContext', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineWindowsQuiesceSpec', 'vssBackupType', 'vssBootableSystemState', 'vssPartialFileSupport', 'vssBackupContext');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CheckResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 0],
   ['host', 'ManagedObjectReference', undef, 0],
   ['warning', 'LocalizedMethodFault', 1, 0],
   ['error', 'LocalizedMethodFault', 1, 0],
);


VIMRuntime::make_get_set('CheckResult', 'vm', 'host', 'warning', 'error');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfCheckResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['CheckResult', 'CheckResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfCheckResult', 'CheckResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationIPSettingsIpV6AddressSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ip', 'CustomizationIpV6Generator', 1, 1],
   ['gateway', undef, 1, 0],
);


VIMRuntime::make_get_set('CustomizationIPSettingsIpV6AddressSpec', 'ip', 'gateway');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationIPSettings;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ip', 'CustomizationIpGenerator', undef, 1],
   ['subnetMask', undef, undef, 0],
   ['gateway', undef, 1, 0],
   ['ipV6Spec', 'CustomizationIPSettingsIpV6AddressSpec', undef, 0],
   ['dnsServerList', undef, 1, 0],
   ['dnsDomain', undef, undef, 0],
   ['primaryWINS', undef, undef, 0],
   ['secondaryWINS', undef, undef, 0],
   ['netBIOS', 'CustomizationNetBIOSMode', undef, 0],
);


VIMRuntime::make_get_set('CustomizationIPSettings', 'ip', 'subnetMask', 'gateway', 'ipV6Spec', 'dnsServerList', 'dnsDomain', 'primaryWINS', 'secondaryWINS', 'netBIOS');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['options', 'CustomizationOptions', undef, 0],
   ['identity', 'CustomizationIdentitySettings', undef, 1],
   ['globalIPSettings', 'CustomizationGlobalIPSettings', undef, 1],
   ['nicSettingMap', 'CustomizationAdapterMapping', 1, 0],
   ['encryptionKey', undef, 1, 0],
);


VIMRuntime::make_get_set('CustomizationSpec', 'options', 'identity', 'globalIPSettings', 'nicSettingMap', 'encryptionKey');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationName;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('CustomizationName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationFixedName;
our @ISA = qw(CustomizationName);

our @property_list = (
   ['name', undef, undef, 1],
);


VIMRuntime::make_get_set('CustomizationFixedName', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationPrefixName;
our @ISA = qw(CustomizationName);

our @property_list = (
   ['base', undef, undef, 1],
);


VIMRuntime::make_get_set('CustomizationPrefixName', 'base');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationVirtualMachineName;
our @ISA = qw(CustomizationName);

our @property_list = (
);


VIMRuntime::make_get_set('CustomizationVirtualMachineName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationUnknownName;
our @ISA = qw(CustomizationName);

our @property_list = (
);


VIMRuntime::make_get_set('CustomizationUnknownName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationCustomName;
our @ISA = qw(CustomizationName);

our @property_list = (
   ['argument', undef, undef, 0],
);


VIMRuntime::make_get_set('CustomizationCustomName', 'argument');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationPassword;
our @ISA = qw(DynamicData);

our @property_list = (
   ['value', undef, undef, 1],
   ['plainText', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('CustomizationPassword', 'value', 'plainText');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationOptions;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('CustomizationOptions');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationWinOptions;
our @ISA = qw(CustomizationOptions);

our @property_list = (
   ['changeSID', 'boolean', undef, 1],
   ['deleteAccounts', 'boolean', undef, 1],
   ['reboot', 'CustomizationSysprepRebootOption', undef, 0],
);


VIMRuntime::make_get_set('CustomizationWinOptions', 'changeSID', 'deleteAccounts', 'reboot');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationLinuxOptions;
our @ISA = qw(CustomizationOptions);

our @property_list = (
);


VIMRuntime::make_get_set('CustomizationLinuxOptions');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationGuiUnattended;
our @ISA = qw(DynamicData);

our @property_list = (
   ['password', 'CustomizationPassword', undef, 0],
   ['timeZone', undef, undef, 1],
   ['autoLogon', 'boolean', undef, 1],
   ['autoLogonCount', undef, undef, 1],
);


VIMRuntime::make_get_set('CustomizationGuiUnattended', 'password', 'timeZone', 'autoLogon', 'autoLogonCount');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationUserData;
our @ISA = qw(DynamicData);

our @property_list = (
   ['fullName', undef, undef, 1],
   ['orgName', undef, undef, 1],
   ['computerName', 'CustomizationName', undef, 1],
   ['productId', undef, undef, 1],
);


VIMRuntime::make_get_set('CustomizationUserData', 'fullName', 'orgName', 'computerName', 'productId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationGuiRunOnce;
our @ISA = qw(DynamicData);

our @property_list = (
   ['commandList', undef, 1, 1],
);


VIMRuntime::make_get_set('CustomizationGuiRunOnce', 'commandList');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationIdentification;
our @ISA = qw(DynamicData);

our @property_list = (
   ['joinWorkgroup', undef, undef, 0],
   ['joinDomain', undef, undef, 0],
   ['domainAdmin', undef, undef, 0],
   ['domainAdminPassword', 'CustomizationPassword', undef, 0],
);


VIMRuntime::make_get_set('CustomizationIdentification', 'joinWorkgroup', 'joinDomain', 'domainAdmin', 'domainAdminPassword');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationLicenseFilePrintData;
our @ISA = qw(DynamicData);

our @property_list = (
   ['autoMode', 'CustomizationLicenseDataMode', undef, 1],
   ['autoUsers', undef, undef, 0],
);


VIMRuntime::make_get_set('CustomizationLicenseFilePrintData', 'autoMode', 'autoUsers');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationIdentitySettings;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('CustomizationIdentitySettings');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationSysprepText;
our @ISA = qw(CustomizationIdentitySettings);

our @property_list = (
   ['value', undef, undef, 1],
);


VIMRuntime::make_get_set('CustomizationSysprepText', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationSysprep;
our @ISA = qw(CustomizationIdentitySettings);

our @property_list = (
   ['guiUnattended', 'CustomizationGuiUnattended', undef, 1],
   ['userData', 'CustomizationUserData', undef, 1],
   ['guiRunOnce', 'CustomizationGuiRunOnce', undef, 0],
   ['identification', 'CustomizationIdentification', undef, 1],
   ['licenseFilePrintData', 'CustomizationLicenseFilePrintData', undef, 0],
);


VIMRuntime::make_get_set('CustomizationSysprep', 'guiUnattended', 'userData', 'guiRunOnce', 'identification', 'licenseFilePrintData');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationLinuxPrep;
our @ISA = qw(CustomizationIdentitySettings);

our @property_list = (
   ['hostName', 'CustomizationName', undef, 1],
   ['domain', undef, undef, 1],
   ['timeZone', undef, undef, 0],
   ['hwClockUTC', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('CustomizationLinuxPrep', 'hostName', 'domain', 'timeZone', 'hwClockUTC');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationGlobalIPSettings;
our @ISA = qw(DynamicData);

our @property_list = (
   ['dnsSuffixList', undef, 1, 0],
   ['dnsServerList', undef, 1, 0],
);


VIMRuntime::make_get_set('CustomizationGlobalIPSettings', 'dnsSuffixList', 'dnsServerList');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationIpGenerator;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('CustomizationIpGenerator');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationDhcpIpGenerator;
our @ISA = qw(CustomizationIpGenerator);

our @property_list = (
);


VIMRuntime::make_get_set('CustomizationDhcpIpGenerator');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationFixedIp;
our @ISA = qw(CustomizationIpGenerator);

our @property_list = (
   ['ipAddress', undef, undef, 1],
);


VIMRuntime::make_get_set('CustomizationFixedIp', 'ipAddress');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationUnknownIpGenerator;
our @ISA = qw(CustomizationIpGenerator);

our @property_list = (
);


VIMRuntime::make_get_set('CustomizationUnknownIpGenerator');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationCustomIpGenerator;
our @ISA = qw(CustomizationIpGenerator);

our @property_list = (
   ['argument', undef, undef, 0],
);


VIMRuntime::make_get_set('CustomizationCustomIpGenerator', 'argument');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationIpV6Generator;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('CustomizationIpV6Generator');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfCustomizationIpV6Generator;
our @ISA = qw(ComplexType);

our @property_list = (
   ['CustomizationIpV6Generator', 'CustomizationIpV6Generator', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfCustomizationIpV6Generator', 'CustomizationIpV6Generator');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationDhcpIpV6Generator;
our @ISA = qw(CustomizationIpV6Generator);

our @property_list = (
);


VIMRuntime::make_get_set('CustomizationDhcpIpV6Generator');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationStatelessIpV6Generator;
our @ISA = qw(CustomizationIpV6Generator);

our @property_list = (
);


VIMRuntime::make_get_set('CustomizationStatelessIpV6Generator');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationFixedIpV6;
our @ISA = qw(CustomizationIpV6Generator);

our @property_list = (
   ['ipAddress', undef, undef, 1],
   ['subnetMask', undef, undef, 1],
);


VIMRuntime::make_get_set('CustomizationFixedIpV6', 'ipAddress', 'subnetMask');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationAutoIpV6Generator;
our @ISA = qw(CustomizationIpV6Generator);

our @property_list = (
);


VIMRuntime::make_get_set('CustomizationAutoIpV6Generator');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationUnknownIpV6Generator;
our @ISA = qw(CustomizationIpV6Generator);

our @property_list = (
);


VIMRuntime::make_get_set('CustomizationUnknownIpV6Generator');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationCustomIpV6Generator;
our @ISA = qw(CustomizationIpV6Generator);

our @property_list = (
   ['argument', undef, undef, 0],
);


VIMRuntime::make_get_set('CustomizationCustomIpV6Generator', 'argument');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package CustomizationAdapterMapping;
our @ISA = qw(DynamicData);

our @property_list = (
   ['macAddress', undef, undef, 0],
   ['adapter', 'CustomizationIPSettings', undef, 1],
);


VIMRuntime::make_get_set('CustomizationAdapterMapping', 'macAddress', 'adapter');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfCustomizationAdapterMapping;
our @ISA = qw(ComplexType);

our @property_list = (
   ['CustomizationAdapterMapping', 'CustomizationAdapterMapping', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfCustomizationAdapterMapping', 'CustomizationAdapterMapping');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDiskMappingPartitionInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['fileSystem', undef, undef, 1],
   ['capacityInKb', undef, undef, 1],
);


VIMRuntime::make_get_set('HostDiskMappingPartitionInfo', 'name', 'fileSystem', 'capacityInKb');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDiskMappingInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['physicalPartition', 'HostDiskMappingPartitionInfo', undef, 0],
   ['name', undef, undef, 1],
   ['exclusive', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('HostDiskMappingInfo', 'physicalPartition', 'name', 'exclusive');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDiskMappingPartitionOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['fileSystem', undef, undef, 1],
   ['capacityInKb', undef, undef, 1],
);


VIMRuntime::make_get_set('HostDiskMappingPartitionOption', 'name', 'fileSystem', 'capacityInKb');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfHostDiskMappingPartitionOption;
our @ISA = qw(ComplexType);

our @property_list = (
   ['HostDiskMappingPartitionOption', 'HostDiskMappingPartitionOption', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfHostDiskMappingPartitionOption', 'HostDiskMappingPartitionOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostDiskMappingOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['physicalPartition', 'HostDiskMappingPartitionOption', 1, 0],
   ['name', undef, undef, 1],
);


VIMRuntime::make_get_set('HostDiskMappingOption', 'physicalPartition', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ParaVirtualSCSIController;
our @ISA = qw(VirtualSCSIController);

our @property_list = (
);


VIMRuntime::make_get_set('ParaVirtualSCSIController');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ParaVirtualSCSIControllerOption;
our @ISA = qw(VirtualSCSIControllerOption);

our @property_list = (
);


VIMRuntime::make_get_set('ParaVirtualSCSIControllerOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualAHCIController;
our @ISA = qw(VirtualSATAController);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualAHCIController');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualAHCIControllerOption;
our @ISA = qw(VirtualSATAControllerOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualAHCIControllerOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualBusLogicController;
our @ISA = qw(VirtualSCSIController);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualBusLogicController');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualBusLogicControllerOption;
our @ISA = qw(VirtualSCSIControllerOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualBusLogicControllerOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualCdromIsoBackingInfo;
our @ISA = qw(VirtualDeviceFileBackingInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualCdromIsoBackingInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualCdromPassthroughBackingInfo;
our @ISA = qw(VirtualDeviceDeviceBackingInfo);

our @property_list = (
   ['exclusive', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('VirtualCdromPassthroughBackingInfo', 'exclusive');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualCdromRemotePassthroughBackingInfo;
our @ISA = qw(VirtualDeviceRemoteDeviceBackingInfo);

our @property_list = (
   ['exclusive', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('VirtualCdromRemotePassthroughBackingInfo', 'exclusive');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualCdromAtapiBackingInfo;
our @ISA = qw(VirtualDeviceDeviceBackingInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualCdromAtapiBackingInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualCdromRemoteAtapiBackingInfo;
our @ISA = qw(VirtualDeviceRemoteDeviceBackingInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualCdromRemoteAtapiBackingInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualCdrom;
our @ISA = qw(VirtualDevice);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualCdrom');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualCdromIsoBackingOption;
our @ISA = qw(VirtualDeviceFileBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualCdromIsoBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualCdromPassthroughBackingOption;
our @ISA = qw(VirtualDeviceDeviceBackingOption);

our @property_list = (
   ['exclusive', 'BoolOption', undef, 1],
);


VIMRuntime::make_get_set('VirtualCdromPassthroughBackingOption', 'exclusive');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualCdromRemotePassthroughBackingOption;
our @ISA = qw(VirtualDeviceRemoteDeviceBackingOption);

our @property_list = (
   ['exclusive', 'BoolOption', undef, 1],
);


VIMRuntime::make_get_set('VirtualCdromRemotePassthroughBackingOption', 'exclusive');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualCdromAtapiBackingOption;
our @ISA = qw(VirtualDeviceDeviceBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualCdromAtapiBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualCdromRemoteAtapiBackingOption;
our @ISA = qw(VirtualDeviceDeviceBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualCdromRemoteAtapiBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualCdromOption;
our @ISA = qw(VirtualDeviceOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualCdromOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualController;
our @ISA = qw(VirtualDevice);

our @property_list = (
   ['busNumber', undef, undef, 1],
   ['device', undef, 1, 0],
);


VIMRuntime::make_get_set('VirtualController', 'busNumber', 'device');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualControllerOption;
our @ISA = qw(VirtualDeviceOption);

our @property_list = (
   ['devices', 'IntOption', undef, 1],
   ['supportedDevice', undef, 1, 0],
);


VIMRuntime::make_get_set('VirtualControllerOption', 'devices', 'supportedDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDeviceBackingInfo;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualDeviceBackingInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDeviceFileBackingInfo;
our @ISA = qw(VirtualDeviceBackingInfo);

our @property_list = (
   ['fileName', undef, undef, 1],
   ['datastore', 'ManagedObjectReference', undef, 0],
   ['backingObjectId', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualDeviceFileBackingInfo', 'fileName', 'datastore', 'backingObjectId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDeviceDeviceBackingInfo;
our @ISA = qw(VirtualDeviceBackingInfo);

our @property_list = (
   ['deviceName', undef, undef, 1],
   ['useAutoDetect', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VirtualDeviceDeviceBackingInfo', 'deviceName', 'useAutoDetect');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDeviceRemoteDeviceBackingInfo;
our @ISA = qw(VirtualDeviceBackingInfo);

our @property_list = (
   ['deviceName', undef, undef, 1],
   ['useAutoDetect', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VirtualDeviceRemoteDeviceBackingInfo', 'deviceName', 'useAutoDetect');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDevicePipeBackingInfo;
our @ISA = qw(VirtualDeviceBackingInfo);

our @property_list = (
   ['pipeName', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualDevicePipeBackingInfo', 'pipeName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDeviceURIBackingInfo;
our @ISA = qw(VirtualDeviceBackingInfo);

our @property_list = (
   ['serviceURI', undef, undef, 1],
   ['direction', undef, undef, 1],
   ['proxyURI', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualDeviceURIBackingInfo', 'serviceURI', 'direction', 'proxyURI');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDeviceConnectInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['startConnected', 'boolean', undef, 1],
   ['allowGuestControl', 'boolean', undef, 1],
   ['connected', 'boolean', undef, 1],
   ['status', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualDeviceConnectInfo', 'startConnected', 'allowGuestControl', 'connected', 'status');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDeviceBusSlotInfo;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualDeviceBusSlotInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDevicePciBusSlotInfo;
our @ISA = qw(VirtualDeviceBusSlotInfo);

our @property_list = (
   ['pciSlotNumber', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualDevicePciBusSlotInfo', 'pciSlotNumber');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDevice;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['deviceInfo', 'Description', undef, 0],
   ['backing', 'VirtualDeviceBackingInfo', undef, 0],
   ['connectable', 'VirtualDeviceConnectInfo', undef, 0],
   ['slotInfo', 'VirtualDeviceBusSlotInfo', undef, 0],
   ['controllerKey', undef, undef, 0],
   ['unitNumber', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualDevice', 'key', 'deviceInfo', 'backing', 'connectable', 'slotInfo', 'controllerKey', 'unitNumber');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualDevice;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualDevice', 'VirtualDevice', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualDevice', 'VirtualDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDeviceBackingOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['type', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualDeviceBackingOption', 'type');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualDeviceBackingOption;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualDeviceBackingOption', 'VirtualDeviceBackingOption', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualDeviceBackingOption', 'VirtualDeviceBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDeviceFileBackingOption;
our @ISA = qw(VirtualDeviceBackingOption);

our @property_list = (
   ['fileNameExtensions', 'ChoiceOption', undef, 0],
);


VIMRuntime::make_get_set('VirtualDeviceFileBackingOption', 'fileNameExtensions');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDeviceDeviceBackingOption;
our @ISA = qw(VirtualDeviceBackingOption);

our @property_list = (
   ['autoDetectAvailable', 'BoolOption', undef, 1],
);


VIMRuntime::make_get_set('VirtualDeviceDeviceBackingOption', 'autoDetectAvailable');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDeviceRemoteDeviceBackingOption;
our @ISA = qw(VirtualDeviceBackingOption);

our @property_list = (
   ['autoDetectAvailable', 'BoolOption', undef, 1],
);


VIMRuntime::make_get_set('VirtualDeviceRemoteDeviceBackingOption', 'autoDetectAvailable');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDevicePipeBackingOption;
our @ISA = qw(VirtualDeviceBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualDevicePipeBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDeviceURIBackingOption;
our @ISA = qw(VirtualDeviceBackingOption);

our @property_list = (
   ['directions', 'ChoiceOption', undef, 1],
);


VIMRuntime::make_get_set('VirtualDeviceURIBackingOption', 'directions');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDeviceConnectOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['startConnected', 'BoolOption', undef, 1],
   ['allowGuestControl', 'BoolOption', undef, 1],
);


VIMRuntime::make_get_set('VirtualDeviceConnectOption', 'startConnected', 'allowGuestControl');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDeviceBusSlotOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['type', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualDeviceBusSlotOption', 'type');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDeviceOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['type', undef, undef, 1],
   ['connectOption', 'VirtualDeviceConnectOption', undef, 0],
   ['busSlotOption', 'VirtualDeviceBusSlotOption', undef, 0],
   ['controllerType', undef, undef, 0],
   ['autoAssignController', 'BoolOption', undef, 0],
   ['backingOption', 'VirtualDeviceBackingOption', 1, 0],
   ['defaultBackingOptionIndex', undef, undef, 0],
   ['licensingLimit', undef, 1, 0],
   ['deprecated', 'boolean', undef, 1],
   ['plugAndPlay', 'boolean', undef, 1],
   ['hotRemoveSupported', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VirtualDeviceOption', 'type', 'connectOption', 'busSlotOption', 'controllerType', 'autoAssignController', 'backingOption', 'defaultBackingOptionIndex', 'licensingLimit', 'deprecated', 'plugAndPlay', 'hotRemoveSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualDeviceOption;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualDeviceOption', 'VirtualDeviceOption', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualDeviceOption', 'VirtualDeviceOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDeviceConfigSpecBackingSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['parent', 'VirtualDeviceConfigSpecBackingSpec', undef, 0],
   ['crypto', 'CryptoSpec', undef, 0],
);


VIMRuntime::make_get_set('VirtualDeviceConfigSpecBackingSpec', 'parent', 'crypto');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDeviceConfigSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['operation', 'VirtualDeviceConfigSpecOperation', undef, 0],
   ['fileOperation', 'VirtualDeviceConfigSpecFileOperation', undef, 0],
   ['device', 'VirtualDevice', undef, 1],
   ['profile', 'VirtualMachineProfileSpec', 1, 0],
   ['backing', 'VirtualDeviceConfigSpecBackingSpec', undef, 0],
);


VIMRuntime::make_get_set('VirtualDeviceConfigSpec', 'operation', 'fileOperation', 'device', 'profile', 'backing');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualDeviceConfigSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualDeviceConfigSpec', 'VirtualDeviceConfigSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualDeviceConfigSpec', 'VirtualDeviceConfigSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskSparseVer1BackingInfo;
our @ISA = qw(VirtualDeviceFileBackingInfo);

our @property_list = (
   ['diskMode', undef, undef, 1],
   ['split', 'boolean', undef, 0],
   ['writeThrough', 'boolean', undef, 0],
   ['spaceUsedInKB', undef, undef, 0],
   ['contentId', undef, undef, 0],
   ['parent', 'VirtualDiskSparseVer1BackingInfo', undef, 0],
);


VIMRuntime::make_get_set('VirtualDiskSparseVer1BackingInfo', 'diskMode', 'split', 'writeThrough', 'spaceUsedInKB', 'contentId', 'parent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskSparseVer2BackingInfo;
our @ISA = qw(VirtualDeviceFileBackingInfo);

our @property_list = (
   ['diskMode', undef, undef, 1],
   ['split', 'boolean', undef, 0],
   ['writeThrough', 'boolean', undef, 0],
   ['spaceUsedInKB', undef, undef, 0],
   ['uuid', undef, undef, 0],
   ['contentId', undef, undef, 0],
   ['changeId', undef, undef, 0],
   ['parent', 'VirtualDiskSparseVer2BackingInfo', undef, 0],
   ['keyId', 'CryptoKeyId', undef, 0],
);


VIMRuntime::make_get_set('VirtualDiskSparseVer2BackingInfo', 'diskMode', 'split', 'writeThrough', 'spaceUsedInKB', 'uuid', 'contentId', 'changeId', 'parent', 'keyId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskFlatVer1BackingInfo;
our @ISA = qw(VirtualDeviceFileBackingInfo);

our @property_list = (
   ['diskMode', undef, undef, 1],
   ['split', 'boolean', undef, 0],
   ['writeThrough', 'boolean', undef, 0],
   ['contentId', undef, undef, 0],
   ['parent', 'VirtualDiskFlatVer1BackingInfo', undef, 0],
);


VIMRuntime::make_get_set('VirtualDiskFlatVer1BackingInfo', 'diskMode', 'split', 'writeThrough', 'contentId', 'parent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskFlatVer2BackingInfo;
our @ISA = qw(VirtualDeviceFileBackingInfo);

our @property_list = (
   ['diskMode', undef, undef, 1],
   ['split', 'boolean', undef, 0],
   ['writeThrough', 'boolean', undef, 0],
   ['thinProvisioned', 'boolean', undef, 0],
   ['eagerlyScrub', 'boolean', undef, 0],
   ['uuid', undef, undef, 0],
   ['contentId', undef, undef, 0],
   ['changeId', undef, undef, 0],
   ['parent', 'VirtualDiskFlatVer2BackingInfo', undef, 0],
   ['deltaDiskFormat', undef, undef, 0],
   ['digestEnabled', 'boolean', undef, 0],
   ['deltaGrainSize', undef, undef, 0],
   ['deltaDiskFormatVariant', undef, undef, 0],
   ['sharing', undef, undef, 0],
   ['keyId', 'CryptoKeyId', undef, 0],
);


VIMRuntime::make_get_set('VirtualDiskFlatVer2BackingInfo', 'diskMode', 'split', 'writeThrough', 'thinProvisioned', 'eagerlyScrub', 'uuid', 'contentId', 'changeId', 'parent', 'deltaDiskFormat', 'digestEnabled', 'deltaGrainSize', 'deltaDiskFormatVariant', 'sharing', 'keyId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskSeSparseBackingInfo;
our @ISA = qw(VirtualDeviceFileBackingInfo);

our @property_list = (
   ['diskMode', undef, undef, 1],
   ['writeThrough', 'boolean', undef, 0],
   ['uuid', undef, undef, 0],
   ['contentId', undef, undef, 0],
   ['changeId', undef, undef, 0],
   ['parent', 'VirtualDiskSeSparseBackingInfo', undef, 0],
   ['deltaDiskFormat', undef, undef, 0],
   ['digestEnabled', 'boolean', undef, 0],
   ['grainSize', undef, undef, 0],
   ['keyId', 'CryptoKeyId', undef, 0],
);


VIMRuntime::make_get_set('VirtualDiskSeSparseBackingInfo', 'diskMode', 'writeThrough', 'uuid', 'contentId', 'changeId', 'parent', 'deltaDiskFormat', 'digestEnabled', 'grainSize', 'keyId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskRawDiskVer2BackingInfo;
our @ISA = qw(VirtualDeviceDeviceBackingInfo);

our @property_list = (
   ['descriptorFileName', undef, undef, 1],
   ['uuid', undef, undef, 0],
   ['changeId', undef, undef, 0],
   ['sharing', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualDiskRawDiskVer2BackingInfo', 'descriptorFileName', 'uuid', 'changeId', 'sharing');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskPartitionedRawDiskVer2BackingInfo;
our @ISA = qw(VirtualDiskRawDiskVer2BackingInfo);

our @property_list = (
   ['partition', undef, 1, 1],
);


VIMRuntime::make_get_set('VirtualDiskPartitionedRawDiskVer2BackingInfo', 'partition');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskRawDiskMappingVer1BackingInfo;
our @ISA = qw(VirtualDeviceFileBackingInfo);

our @property_list = (
   ['lunUuid', undef, undef, 0],
   ['deviceName', undef, undef, 0],
   ['compatibilityMode', undef, undef, 0],
   ['diskMode', undef, undef, 0],
   ['uuid', undef, undef, 0],
   ['contentId', undef, undef, 0],
   ['changeId', undef, undef, 0],
   ['parent', 'VirtualDiskRawDiskMappingVer1BackingInfo', undef, 0],
   ['sharing', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualDiskRawDiskMappingVer1BackingInfo', 'lunUuid', 'deviceName', 'compatibilityMode', 'diskMode', 'uuid', 'contentId', 'changeId', 'parent', 'sharing');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskVFlashCacheConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vFlashModule', undef, undef, 0],
   ['reservationInMB', undef, undef, 0],
   ['cacheConsistencyType', undef, undef, 0],
   ['cacheMode', undef, undef, 0],
   ['blockSizeInKB', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualDiskVFlashCacheConfigInfo', 'vFlashModule', 'reservationInMB', 'cacheConsistencyType', 'cacheMode', 'blockSizeInKB');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDisk;
our @ISA = qw(VirtualDevice);

our @property_list = (
   ['capacityInKB', undef, undef, 1],
   ['capacityInBytes', undef, undef, 0],
   ['shares', 'SharesInfo', undef, 0],
   ['storageIOAllocation', 'StorageIOAllocationInfo', undef, 0],
   ['diskObjectId', undef, undef, 0],
   ['vFlashCacheConfigInfo', 'VirtualDiskVFlashCacheConfigInfo', undef, 0],
   ['iofilter', undef, 1, 0],
   ['vDiskId', 'ID', undef, 0],
);


VIMRuntime::make_get_set('VirtualDisk', 'capacityInKB', 'capacityInBytes', 'shares', 'storageIOAllocation', 'diskObjectId', 'vFlashCacheConfigInfo', 'iofilter', 'vDiskId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualDisk;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualDisk', 'VirtualDisk', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualDisk', 'VirtualDisk');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskId;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vm', 'ManagedObjectReference', undef, 1],
   ['diskId', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualDiskId', 'vm', 'diskId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualDiskId;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualDiskId', 'VirtualDiskId', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualDiskId', 'VirtualDiskId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskSparseVer1BackingOption;
our @ISA = qw(VirtualDeviceFileBackingOption);

our @property_list = (
   ['diskModes', 'ChoiceOption', undef, 1],
   ['split', 'BoolOption', undef, 1],
   ['writeThrough', 'BoolOption', undef, 1],
   ['growable', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('VirtualDiskSparseVer1BackingOption', 'diskModes', 'split', 'writeThrough', 'growable');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskSparseVer2BackingOption;
our @ISA = qw(VirtualDeviceFileBackingOption);

our @property_list = (
   ['diskMode', 'ChoiceOption', undef, 1],
   ['split', 'BoolOption', undef, 1],
   ['writeThrough', 'BoolOption', undef, 1],
   ['growable', 'boolean', undef, 1],
   ['hotGrowable', 'boolean', undef, 1],
   ['uuid', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('VirtualDiskSparseVer2BackingOption', 'diskMode', 'split', 'writeThrough', 'growable', 'hotGrowable', 'uuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskFlatVer1BackingOption;
our @ISA = qw(VirtualDeviceFileBackingOption);

our @property_list = (
   ['diskMode', 'ChoiceOption', undef, 1],
   ['split', 'BoolOption', undef, 1],
   ['writeThrough', 'BoolOption', undef, 1],
   ['growable', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('VirtualDiskFlatVer1BackingOption', 'diskMode', 'split', 'writeThrough', 'growable');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskDeltaDiskFormatsSupported;
our @ISA = qw(DynamicData);

our @property_list = (
   ['datastoreType', undef, undef, 1],
   ['deltaDiskFormat', 'ChoiceOption', undef, 1],
);


VIMRuntime::make_get_set('VirtualDiskDeltaDiskFormatsSupported', 'datastoreType', 'deltaDiskFormat');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualDiskDeltaDiskFormatsSupported;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualDiskDeltaDiskFormatsSupported', 'VirtualDiskDeltaDiskFormatsSupported', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualDiskDeltaDiskFormatsSupported', 'VirtualDiskDeltaDiskFormatsSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskFlatVer2BackingOption;
our @ISA = qw(VirtualDeviceFileBackingOption);

our @property_list = (
   ['diskMode', 'ChoiceOption', undef, 1],
   ['split', 'BoolOption', undef, 1],
   ['writeThrough', 'BoolOption', undef, 1],
   ['growable', 'boolean', undef, 1],
   ['hotGrowable', 'boolean', undef, 1],
   ['uuid', 'boolean', undef, 1],
   ['thinProvisioned', 'BoolOption', undef, 0],
   ['eagerlyScrub', 'BoolOption', undef, 0],
   ['deltaDiskFormat', 'ChoiceOption', undef, 0],
   ['deltaDiskFormatsSupported', 'VirtualDiskDeltaDiskFormatsSupported', 1, 0],
);


VIMRuntime::make_get_set('VirtualDiskFlatVer2BackingOption', 'diskMode', 'split', 'writeThrough', 'growable', 'hotGrowable', 'uuid', 'thinProvisioned', 'eagerlyScrub', 'deltaDiskFormat', 'deltaDiskFormatsSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskSeSparseBackingOption;
our @ISA = qw(VirtualDeviceFileBackingOption);

our @property_list = (
   ['diskMode', 'ChoiceOption', undef, 1],
   ['writeThrough', 'BoolOption', undef, 1],
   ['growable', 'boolean', undef, 1],
   ['hotGrowable', 'boolean', undef, 1],
   ['uuid', 'boolean', undef, 1],
   ['deltaDiskFormatsSupported', 'VirtualDiskDeltaDiskFormatsSupported', 1, 1],
);


VIMRuntime::make_get_set('VirtualDiskSeSparseBackingOption', 'diskMode', 'writeThrough', 'growable', 'hotGrowable', 'uuid', 'deltaDiskFormatsSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskRawDiskVer2BackingOption;
our @ISA = qw(VirtualDeviceDeviceBackingOption);

our @property_list = (
   ['descriptorFileNameExtensions', 'ChoiceOption', undef, 1],
   ['uuid', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('VirtualDiskRawDiskVer2BackingOption', 'descriptorFileNameExtensions', 'uuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskPartitionedRawDiskVer2BackingOption;
our @ISA = qw(VirtualDiskRawDiskVer2BackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualDiskPartitionedRawDiskVer2BackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskRawDiskMappingVer1BackingOption;
our @ISA = qw(VirtualDeviceDeviceBackingOption);

our @property_list = (
   ['descriptorFileNameExtensions', 'ChoiceOption', undef, 0],
   ['compatibilityMode', 'ChoiceOption', undef, 1],
   ['diskMode', 'ChoiceOption', undef, 1],
   ['uuid', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('VirtualDiskRawDiskMappingVer1BackingOption', 'descriptorFileNameExtensions', 'compatibilityMode', 'diskMode', 'uuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskOptionVFlashCacheConfigOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['cacheConsistencyType', 'ChoiceOption', undef, 1],
   ['cacheMode', 'ChoiceOption', undef, 1],
   ['reservationInMB', 'LongOption', undef, 1],
   ['blockSizeInKB', 'LongOption', undef, 1],
);


VIMRuntime::make_get_set('VirtualDiskOptionVFlashCacheConfigOption', 'cacheConsistencyType', 'cacheMode', 'reservationInMB', 'blockSizeInKB');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskOption;
our @ISA = qw(VirtualDeviceOption);

our @property_list = (
   ['capacityInKB', 'LongOption', undef, 1],
   ['ioAllocationOption', 'StorageIOAllocationOption', undef, 0],
   ['vFlashCacheConfigOption', 'VirtualDiskOptionVFlashCacheConfigOption', undef, 0],
);


VIMRuntime::make_get_set('VirtualDiskOption', 'capacityInKB', 'ioAllocationOption', 'vFlashCacheConfigOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualDiskConfigSpec;
our @ISA = qw(VirtualDeviceConfigSpec);

our @property_list = (
   ['diskMoveType', undef, undef, 0],
   ['migrateCache', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VirtualDiskConfigSpec', 'diskMoveType', 'migrateCache');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualE1000;
our @ISA = qw(VirtualEthernetCard);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualE1000');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualE1000Option;
our @ISA = qw(VirtualEthernetCardOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualE1000Option');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualE1000e;
our @ISA = qw(VirtualEthernetCard);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualE1000e');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualE1000eOption;
our @ISA = qw(VirtualEthernetCardOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualE1000eOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualEnsoniq1371;
our @ISA = qw(VirtualSoundCard);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualEnsoniq1371');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualEnsoniq1371Option;
our @ISA = qw(VirtualSoundCardOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualEnsoniq1371Option');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualEthernetCardNetworkBackingInfo;
our @ISA = qw(VirtualDeviceDeviceBackingInfo);

our @property_list = (
   ['network', 'ManagedObjectReference', undef, 0],
   ['inPassthroughMode', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VirtualEthernetCardNetworkBackingInfo', 'network', 'inPassthroughMode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualEthernetCardLegacyNetworkBackingInfo;
our @ISA = qw(VirtualDeviceDeviceBackingInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualEthernetCardLegacyNetworkBackingInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualEthernetCardDistributedVirtualPortBackingInfo;
our @ISA = qw(VirtualDeviceBackingInfo);

our @property_list = (
   ['port', 'DistributedVirtualSwitchPortConnection', undef, 1],
);


VIMRuntime::make_get_set('VirtualEthernetCardDistributedVirtualPortBackingInfo', 'port');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualEthernetCardOpaqueNetworkBackingInfo;
our @ISA = qw(VirtualDeviceBackingInfo);

our @property_list = (
   ['opaqueNetworkId', undef, undef, 1],
   ['opaqueNetworkType', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualEthernetCardOpaqueNetworkBackingInfo', 'opaqueNetworkId', 'opaqueNetworkType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualEthernetCardResourceAllocation;
our @ISA = qw(DynamicData);

our @property_list = (
   ['reservation', undef, undef, 0],
   ['share', 'SharesInfo', undef, 1],
   ['limit', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualEthernetCardResourceAllocation', 'reservation', 'share', 'limit');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualEthernetCard;
our @ISA = qw(VirtualDevice);

our @property_list = (
   ['addressType', undef, undef, 0],
   ['macAddress', undef, undef, 0],
   ['wakeOnLanEnabled', 'boolean', undef, 0],
   ['resourceAllocation', 'VirtualEthernetCardResourceAllocation', undef, 0],
   ['externalId', undef, undef, 0],
   ['uptCompatibilityEnabled', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VirtualEthernetCard', 'addressType', 'macAddress', 'wakeOnLanEnabled', 'resourceAllocation', 'externalId', 'uptCompatibilityEnabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualEthernetCardNetworkBackingOption;
our @ISA = qw(VirtualDeviceDeviceBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualEthernetCardNetworkBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualEthernetCardOpaqueNetworkBackingOption;
our @ISA = qw(VirtualDeviceBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualEthernetCardOpaqueNetworkBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualEthernetCardLegacyNetworkBackingOption;
our @ISA = qw(VirtualDeviceDeviceBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualEthernetCardLegacyNetworkBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualEthernetCardDVPortBackingOption;
our @ISA = qw(VirtualDeviceBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualEthernetCardDVPortBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualEthernetCardOption;
our @ISA = qw(VirtualDeviceOption);

our @property_list = (
   ['supportedOUI', 'ChoiceOption', undef, 1],
   ['macType', 'ChoiceOption', undef, 1],
   ['wakeOnLanEnabled', 'BoolOption', undef, 1],
   ['vmDirectPathGen2Supported', 'boolean', undef, 0],
   ['uptCompatibilityEnabled', 'BoolOption', undef, 0],
);


VIMRuntime::make_get_set('VirtualEthernetCardOption', 'supportedOUI', 'macType', 'wakeOnLanEnabled', 'vmDirectPathGen2Supported', 'uptCompatibilityEnabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualFloppyImageBackingInfo;
our @ISA = qw(VirtualDeviceFileBackingInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualFloppyImageBackingInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualFloppyDeviceBackingInfo;
our @ISA = qw(VirtualDeviceDeviceBackingInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualFloppyDeviceBackingInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualFloppyRemoteDeviceBackingInfo;
our @ISA = qw(VirtualDeviceRemoteDeviceBackingInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualFloppyRemoteDeviceBackingInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualFloppy;
our @ISA = qw(VirtualDevice);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualFloppy');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualFloppyImageBackingOption;
our @ISA = qw(VirtualDeviceFileBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualFloppyImageBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualFloppyDeviceBackingOption;
our @ISA = qw(VirtualDeviceDeviceBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualFloppyDeviceBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualFloppyRemoteDeviceBackingOption;
our @ISA = qw(VirtualDeviceRemoteDeviceBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualFloppyRemoteDeviceBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualFloppyOption;
our @ISA = qw(VirtualDeviceOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualFloppyOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualHdAudioCard;
our @ISA = qw(VirtualSoundCard);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualHdAudioCard');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualHdAudioCardOption;
our @ISA = qw(VirtualSoundCardOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualHdAudioCardOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualIDEController;
our @ISA = qw(VirtualController);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualIDEController');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualIDEControllerOption;
our @ISA = qw(VirtualControllerOption);

our @property_list = (
   ['numIDEDisks', 'IntOption', undef, 1],
   ['numIDECdroms', 'IntOption', undef, 1],
);


VIMRuntime::make_get_set('VirtualIDEControllerOption', 'numIDEDisks', 'numIDECdroms');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualKeyboard;
our @ISA = qw(VirtualDevice);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualKeyboard');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualKeyboardOption;
our @ISA = qw(VirtualDeviceOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualKeyboardOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualLsiLogicController;
our @ISA = qw(VirtualSCSIController);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualLsiLogicController');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualLsiLogicControllerOption;
our @ISA = qw(VirtualSCSIControllerOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualLsiLogicControllerOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualLsiLogicSASController;
our @ISA = qw(VirtualSCSIController);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualLsiLogicSASController');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualLsiLogicSASControllerOption;
our @ISA = qw(VirtualSCSIControllerOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualLsiLogicSASControllerOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualNVMEController;
our @ISA = qw(VirtualController);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualNVMEController');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualNVMEControllerOption;
our @ISA = qw(VirtualControllerOption);

our @property_list = (
   ['numNVMEDisks', 'IntOption', undef, 1],
);


VIMRuntime::make_get_set('VirtualNVMEControllerOption', 'numNVMEDisks');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualPCIController;
our @ISA = qw(VirtualController);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualPCIController');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualPCIControllerOption;
our @ISA = qw(VirtualControllerOption);

our @property_list = (
   ['numSCSIControllers', 'IntOption', undef, 1],
   ['numEthernetCards', 'IntOption', undef, 1],
   ['numVideoCards', 'IntOption', undef, 1],
   ['numSoundCards', 'IntOption', undef, 1],
   ['numVmiRoms', 'IntOption', undef, 1],
   ['numVmciDevices', 'IntOption', undef, 0],
   ['numPCIPassthroughDevices', 'IntOption', undef, 0],
   ['numSasSCSIControllers', 'IntOption', undef, 0],
   ['numVmxnet3EthernetCards', 'IntOption', undef, 0],
   ['numParaVirtualSCSIControllers', 'IntOption', undef, 0],
   ['numSATAControllers', 'IntOption', undef, 0],
   ['numNVMEControllers', 'IntOption', undef, 0],
);


VIMRuntime::make_get_set('VirtualPCIControllerOption', 'numSCSIControllers', 'numEthernetCards', 'numVideoCards', 'numSoundCards', 'numVmiRoms', 'numVmciDevices', 'numPCIPassthroughDevices', 'numSasSCSIControllers', 'numVmxnet3EthernetCards', 'numParaVirtualSCSIControllers', 'numSATAControllers', 'numNVMEControllers');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualPCIPassthroughDeviceBackingInfo;
our @ISA = qw(VirtualDeviceDeviceBackingInfo);

our @property_list = (
   ['id', undef, undef, 1],
   ['deviceId', undef, undef, 1],
   ['systemId', undef, undef, 1],
   ['vendorId', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualPCIPassthroughDeviceBackingInfo', 'id', 'deviceId', 'systemId', 'vendorId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualPCIPassthroughPluginBackingInfo;
our @ISA = qw(VirtualDeviceBackingInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualPCIPassthroughPluginBackingInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualPCIPassthroughVmiopBackingInfo;
our @ISA = qw(VirtualPCIPassthroughPluginBackingInfo);

our @property_list = (
   ['vgpu', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualPCIPassthroughVmiopBackingInfo', 'vgpu');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualPCIPassthrough;
our @ISA = qw(VirtualDevice);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualPCIPassthrough');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualPCIPassthroughDeviceBackingOption;
our @ISA = qw(VirtualDeviceDeviceBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualPCIPassthroughDeviceBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualPCIPassthroughPluginBackingOption;
our @ISA = qw(VirtualDeviceBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualPCIPassthroughPluginBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualPCIPassthroughVmiopBackingOption;
our @ISA = qw(VirtualPCIPassthroughPluginBackingOption);

our @property_list = (
   ['vgpu', 'StringOption', undef, 1],
   ['maxInstances', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualPCIPassthroughVmiopBackingOption', 'vgpu', 'maxInstances');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualPCIPassthroughOption;
our @ISA = qw(VirtualDeviceOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualPCIPassthroughOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualPCNet32;
our @ISA = qw(VirtualEthernetCard);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualPCNet32');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualPCNet32Option;
our @ISA = qw(VirtualEthernetCardOption);

our @property_list = (
   ['supportsMorphing', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('VirtualPCNet32Option', 'supportsMorphing');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualPS2Controller;
our @ISA = qw(VirtualController);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualPS2Controller');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualPS2ControllerOption;
our @ISA = qw(VirtualControllerOption);

our @property_list = (
   ['numKeyboards', 'IntOption', undef, 1],
   ['numPointingDevices', 'IntOption', undef, 1],
);


VIMRuntime::make_get_set('VirtualPS2ControllerOption', 'numKeyboards', 'numPointingDevices');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualParallelPortFileBackingInfo;
our @ISA = qw(VirtualDeviceFileBackingInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualParallelPortFileBackingInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualParallelPortDeviceBackingInfo;
our @ISA = qw(VirtualDeviceDeviceBackingInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualParallelPortDeviceBackingInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualParallelPort;
our @ISA = qw(VirtualDevice);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualParallelPort');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualParallelPortFileBackingOption;
our @ISA = qw(VirtualDeviceFileBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualParallelPortFileBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualParallelPortDeviceBackingOption;
our @ISA = qw(VirtualDeviceDeviceBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualParallelPortDeviceBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualParallelPortOption;
our @ISA = qw(VirtualDeviceOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualParallelPortOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualPointingDeviceDeviceBackingInfo;
our @ISA = qw(VirtualDeviceDeviceBackingInfo);

our @property_list = (
   ['hostPointingDevice', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualPointingDeviceDeviceBackingInfo', 'hostPointingDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualPointingDevice;
our @ISA = qw(VirtualDevice);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualPointingDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualPointingDeviceBackingOption;
our @ISA = qw(VirtualDeviceDeviceBackingOption);

our @property_list = (
   ['hostPointingDevice', 'ChoiceOption', undef, 1],
);


VIMRuntime::make_get_set('VirtualPointingDeviceBackingOption', 'hostPointingDevice');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualPointingDeviceOption;
our @ISA = qw(VirtualDeviceOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualPointingDeviceOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSATAController;
our @ISA = qw(VirtualController);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualSATAController');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSATAControllerOption;
our @ISA = qw(VirtualControllerOption);

our @property_list = (
   ['numSATADisks', 'IntOption', undef, 1],
   ['numSATACdroms', 'IntOption', undef, 1],
);


VIMRuntime::make_get_set('VirtualSATAControllerOption', 'numSATADisks', 'numSATACdroms');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualSCSISharing;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualSCSISharing', 'VirtualSCSISharing', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualSCSISharing', 'VirtualSCSISharing');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSCSIController;
our @ISA = qw(VirtualController);

our @property_list = (
   ['hotAddRemove', 'boolean', undef, 0],
   ['sharedBus', 'VirtualSCSISharing', undef, 1],
   ['scsiCtlrUnitNumber', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualSCSIController', 'hotAddRemove', 'sharedBus', 'scsiCtlrUnitNumber');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSCSIControllerOption;
our @ISA = qw(VirtualControllerOption);

our @property_list = (
   ['numSCSIDisks', 'IntOption', undef, 1],
   ['numSCSICdroms', 'IntOption', undef, 1],
   ['numSCSIPassthrough', 'IntOption', undef, 1],
   ['sharing', 'VirtualSCSISharing', 1, 1],
   ['defaultSharedIndex', undef, undef, 1],
   ['hotAddRemove', 'BoolOption', undef, 1],
   ['scsiCtlrUnitNumber', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualSCSIControllerOption', 'numSCSIDisks', 'numSCSICdroms', 'numSCSIPassthrough', 'sharing', 'defaultSharedIndex', 'hotAddRemove', 'scsiCtlrUnitNumber');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSCSIPassthroughDeviceBackingInfo;
our @ISA = qw(VirtualDeviceDeviceBackingInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualSCSIPassthroughDeviceBackingInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSCSIPassthrough;
our @ISA = qw(VirtualDevice);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualSCSIPassthrough');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSCSIPassthroughDeviceBackingOption;
our @ISA = qw(VirtualDeviceDeviceBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualSCSIPassthroughDeviceBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSCSIPassthroughOption;
our @ISA = qw(VirtualDeviceOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualSCSIPassthroughOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSIOController;
our @ISA = qw(VirtualController);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualSIOController');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSIOControllerOption;
our @ISA = qw(VirtualControllerOption);

our @property_list = (
   ['numFloppyDrives', 'IntOption', undef, 1],
   ['numSerialPorts', 'IntOption', undef, 1],
   ['numParallelPorts', 'IntOption', undef, 1],
);


VIMRuntime::make_get_set('VirtualSIOControllerOption', 'numFloppyDrives', 'numSerialPorts', 'numParallelPorts');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSerialPortFileBackingInfo;
our @ISA = qw(VirtualDeviceFileBackingInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualSerialPortFileBackingInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSerialPortDeviceBackingInfo;
our @ISA = qw(VirtualDeviceDeviceBackingInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualSerialPortDeviceBackingInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSerialPortPipeBackingInfo;
our @ISA = qw(VirtualDevicePipeBackingInfo);

our @property_list = (
   ['endpoint', undef, undef, 1],
   ['noRxLoss', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VirtualSerialPortPipeBackingInfo', 'endpoint', 'noRxLoss');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSerialPortURIBackingInfo;
our @ISA = qw(VirtualDeviceURIBackingInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualSerialPortURIBackingInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSerialPortThinPrintBackingInfo;
our @ISA = qw(VirtualDeviceBackingInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualSerialPortThinPrintBackingInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSerialPort;
our @ISA = qw(VirtualDevice);

our @property_list = (
   ['yieldOnPoll', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('VirtualSerialPort', 'yieldOnPoll');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSerialPortFileBackingOption;
our @ISA = qw(VirtualDeviceFileBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualSerialPortFileBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSerialPortDeviceBackingOption;
our @ISA = qw(VirtualDeviceDeviceBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualSerialPortDeviceBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSerialPortPipeBackingOption;
our @ISA = qw(VirtualDevicePipeBackingOption);

our @property_list = (
   ['endpoint', 'ChoiceOption', undef, 1],
   ['noRxLoss', 'BoolOption', undef, 1],
);


VIMRuntime::make_get_set('VirtualSerialPortPipeBackingOption', 'endpoint', 'noRxLoss');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSerialPortURIBackingOption;
our @ISA = qw(VirtualDeviceURIBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualSerialPortURIBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSerialPortThinPrintBackingOption;
our @ISA = qw(VirtualDeviceBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualSerialPortThinPrintBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSerialPortOption;
our @ISA = qw(VirtualDeviceOption);

our @property_list = (
   ['yieldOnPoll', 'BoolOption', undef, 1],
);


VIMRuntime::make_get_set('VirtualSerialPortOption', 'yieldOnPoll');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSoundBlaster16;
our @ISA = qw(VirtualSoundCard);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualSoundBlaster16');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSoundBlaster16Option;
our @ISA = qw(VirtualSoundCardOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualSoundBlaster16Option');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSoundCardDeviceBackingInfo;
our @ISA = qw(VirtualDeviceDeviceBackingInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualSoundCardDeviceBackingInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSoundCard;
our @ISA = qw(VirtualDevice);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualSoundCard');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSoundCardDeviceBackingOption;
our @ISA = qw(VirtualDeviceDeviceBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualSoundCardDeviceBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSoundCardOption;
our @ISA = qw(VirtualDeviceOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualSoundCardOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSriovEthernetCardSriovBackingInfo;
our @ISA = qw(VirtualDeviceBackingInfo);

our @property_list = (
   ['physicalFunctionBacking', 'VirtualPCIPassthroughDeviceBackingInfo', undef, 0],
   ['virtualFunctionBacking', 'VirtualPCIPassthroughDeviceBackingInfo', undef, 0],
   ['virtualFunctionIndex', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualSriovEthernetCardSriovBackingInfo', 'physicalFunctionBacking', 'virtualFunctionBacking', 'virtualFunctionIndex');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSriovEthernetCard;
our @ISA = qw(VirtualEthernetCard);

our @property_list = (
   ['allowGuestOSMtuChange', 'boolean', undef, 0],
   ['sriovBacking', 'VirtualSriovEthernetCardSriovBackingInfo', undef, 0],
);


VIMRuntime::make_get_set('VirtualSriovEthernetCard', 'allowGuestOSMtuChange', 'sriovBacking');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSriovEthernetCardSriovBackingOption;
our @ISA = qw(VirtualDeviceBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualSriovEthernetCardSriovBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualSriovEthernetCardOption;
our @ISA = qw(VirtualEthernetCardOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualSriovEthernetCardOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualUSBUSBBackingInfo;
our @ISA = qw(VirtualDeviceDeviceBackingInfo);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualUSBUSBBackingInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualUSBRemoteHostBackingInfo;
our @ISA = qw(VirtualDeviceDeviceBackingInfo);

our @property_list = (
   ['hostname', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualUSBRemoteHostBackingInfo', 'hostname');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualUSBRemoteClientBackingInfo;
our @ISA = qw(VirtualDeviceRemoteDeviceBackingInfo);

our @property_list = (
   ['hostname', undef, undef, 1],
);


VIMRuntime::make_get_set('VirtualUSBRemoteClientBackingInfo', 'hostname');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualUSB;
our @ISA = qw(VirtualDevice);

our @property_list = (
   ['connected', 'boolean', undef, 1],
   ['vendor', undef, undef, 0],
   ['product', undef, undef, 0],
   ['family', undef, 1, 0],
   ['speed', undef, 1, 0],
);


VIMRuntime::make_get_set('VirtualUSB', 'connected', 'vendor', 'product', 'family', 'speed');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualUSBControllerPciBusSlotInfo;
our @ISA = qw(VirtualDevicePciBusSlotInfo);

our @property_list = (
   ['ehciPciSlotNumber', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualUSBControllerPciBusSlotInfo', 'ehciPciSlotNumber');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualUSBController;
our @ISA = qw(VirtualController);

our @property_list = (
   ['autoConnectDevices', 'boolean', undef, 0],
   ['ehciEnabled', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VirtualUSBController', 'autoConnectDevices', 'ehciEnabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualUSBControllerOption;
our @ISA = qw(VirtualControllerOption);

our @property_list = (
   ['autoConnectDevices', 'BoolOption', undef, 1],
   ['ehciSupported', 'BoolOption', undef, 1],
   ['supportedSpeeds', undef, 1, 0],
);


VIMRuntime::make_get_set('VirtualUSBControllerOption', 'autoConnectDevices', 'ehciSupported', 'supportedSpeeds');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualUSBUSBBackingOption;
our @ISA = qw(VirtualDeviceDeviceBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualUSBUSBBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualUSBRemoteHostBackingOption;
our @ISA = qw(VirtualDeviceDeviceBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualUSBRemoteHostBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualUSBRemoteClientBackingOption;
our @ISA = qw(VirtualDeviceRemoteDeviceBackingOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualUSBRemoteClientBackingOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualUSBOption;
our @ISA = qw(VirtualDeviceOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualUSBOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualUSBXHCIController;
our @ISA = qw(VirtualController);

our @property_list = (
   ['autoConnectDevices', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VirtualUSBXHCIController', 'autoConnectDevices');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualUSBXHCIControllerOption;
our @ISA = qw(VirtualControllerOption);

our @property_list = (
   ['autoConnectDevices', 'BoolOption', undef, 1],
   ['supportedSpeeds', undef, 1, 1],
);


VIMRuntime::make_get_set('VirtualUSBXHCIControllerOption', 'autoConnectDevices', 'supportedSpeeds');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineVMCIDeviceFilterSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['rank', undef, undef, 1],
   ['action', undef, undef, 1],
   ['protocol', undef, undef, 1],
   ['direction', undef, undef, 1],
   ['lowerDstPortBoundary', undef, undef, 0],
   ['upperDstPortBoundary', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineVMCIDeviceFilterSpec', 'rank', 'action', 'protocol', 'direction', 'lowerDstPortBoundary', 'upperDstPortBoundary');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVirtualMachineVMCIDeviceFilterSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VirtualMachineVMCIDeviceFilterSpec', 'VirtualMachineVMCIDeviceFilterSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVirtualMachineVMCIDeviceFilterSpec', 'VirtualMachineVMCIDeviceFilterSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineVMCIDeviceFilterInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['filters', 'VirtualMachineVMCIDeviceFilterSpec', 1, 0],
);


VIMRuntime::make_get_set('VirtualMachineVMCIDeviceFilterInfo', 'filters');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineVMCIDevice;
our @ISA = qw(VirtualDevice);

our @property_list = (
   ['id', undef, undef, 0],
   ['allowUnrestrictedCommunication', 'boolean', undef, 0],
   ['filterEnable', 'boolean', undef, 0],
   ['filterInfo', 'VirtualMachineVMCIDeviceFilterInfo', undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineVMCIDevice', 'id', 'allowUnrestrictedCommunication', 'filterEnable', 'filterInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineVMCIDeviceOptionFilterSpecOption;
our @ISA = qw(DynamicData);

our @property_list = (
   ['action', 'ChoiceOption', undef, 1],
   ['protocol', 'ChoiceOption', undef, 1],
   ['direction', 'ChoiceOption', undef, 1],
   ['lowerDstPortBoundary', 'LongOption', undef, 1],
   ['upperDstPortBoundary', 'LongOption', undef, 1],
);


VIMRuntime::make_get_set('VirtualMachineVMCIDeviceOptionFilterSpecOption', 'action', 'protocol', 'direction', 'lowerDstPortBoundary', 'upperDstPortBoundary');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineVMCIDeviceOption;
our @ISA = qw(VirtualDeviceOption);

our @property_list = (
   ['allowUnrestrictedCommunication', 'BoolOption', undef, 1],
   ['filterSpecOption', 'VirtualMachineVMCIDeviceOptionFilterSpecOption', undef, 0],
   ['filterSupported', 'BoolOption', undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineVMCIDeviceOption', 'allowUnrestrictedCommunication', 'filterSpecOption', 'filterSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineVMIROM;
our @ISA = qw(VirtualDevice);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualMachineVMIROM');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualVMIROMOption;
our @ISA = qw(VirtualDeviceOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualVMIROMOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualMachineVideoCard;
our @ISA = qw(VirtualDevice);

our @property_list = (
   ['videoRamSizeInKB', undef, undef, 0],
   ['numDisplays', undef, undef, 0],
   ['useAutoDetect', 'boolean', undef, 0],
   ['enable3DSupport', 'boolean', undef, 0],
   ['use3dRenderer', undef, undef, 0],
   ['graphicsMemorySizeInKB', undef, undef, 0],
);


VIMRuntime::make_get_set('VirtualMachineVideoCard', 'videoRamSizeInKB', 'numDisplays', 'useAutoDetect', 'enable3DSupport', 'use3dRenderer', 'graphicsMemorySizeInKB');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualVideoCardOption;
our @ISA = qw(VirtualDeviceOption);

our @property_list = (
   ['videoRamSizeInKB', 'LongOption', undef, 0],
   ['numDisplays', 'IntOption', undef, 0],
   ['useAutoDetect', 'BoolOption', undef, 0],
   ['support3D', 'BoolOption', undef, 0],
   ['use3dRendererSupported', 'BoolOption', undef, 0],
   ['graphicsMemorySizeInKB', 'LongOption', undef, 0],
   ['graphicsMemorySizeSupported', 'BoolOption', undef, 0],
);


VIMRuntime::make_get_set('VirtualVideoCardOption', 'videoRamSizeInKB', 'numDisplays', 'useAutoDetect', 'support3D', 'use3dRendererSupported', 'graphicsMemorySizeInKB', 'graphicsMemorySizeSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualVmxnet;
our @ISA = qw(VirtualEthernetCard);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualVmxnet');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualVmxnet2;
our @ISA = qw(VirtualVmxnet);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualVmxnet2');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualVmxnet2Option;
our @ISA = qw(VirtualVmxnetOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualVmxnet2Option');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualVmxnet3;
our @ISA = qw(VirtualVmxnet);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualVmxnet3');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualVmxnet3Option;
our @ISA = qw(VirtualVmxnetOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualVmxnet3Option');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualVmxnet3Vrdma;
our @ISA = qw(VirtualVmxnet3);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualVmxnet3Vrdma');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualVmxnet3VrdmaOption;
our @ISA = qw(VirtualVmxnet3Option);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualVmxnet3VrdmaOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VirtualVmxnetOption;
our @ISA = qw(VirtualEthernetCardOption);

our @property_list = (
);


VIMRuntime::make_get_set('VirtualVmxnetOption');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestAuthSubject;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('GuestAuthSubject');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfGuestAuthSubject;
our @ISA = qw(ComplexType);

our @property_list = (
   ['GuestAuthSubject', 'GuestAuthSubject', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfGuestAuthSubject', 'GuestAuthSubject');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestAuthAnySubject;
our @ISA = qw(GuestAuthSubject);

our @property_list = (
);


VIMRuntime::make_get_set('GuestAuthAnySubject');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestAuthNamedSubject;
our @ISA = qw(GuestAuthSubject);

our @property_list = (
   ['name', undef, undef, 1],
);


VIMRuntime::make_get_set('GuestAuthNamedSubject', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestAuthAliasInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['subject', 'GuestAuthSubject', undef, 1],
   ['comment', undef, undef, 1],
);


VIMRuntime::make_get_set('GuestAuthAliasInfo', 'subject', 'comment');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfGuestAuthAliasInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['GuestAuthAliasInfo', 'GuestAuthAliasInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfGuestAuthAliasInfo', 'GuestAuthAliasInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestAliases;
our @ISA = qw(DynamicData);

our @property_list = (
   ['base64Cert', undef, undef, 1],
   ['aliases', 'GuestAuthAliasInfo', 1, 1],
);


VIMRuntime::make_get_set('GuestAliases', 'base64Cert', 'aliases');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfGuestAliases;
our @ISA = qw(ComplexType);

our @property_list = (
   ['GuestAliases', 'GuestAliases', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfGuestAliases', 'GuestAliases');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestMappedAliases;
our @ISA = qw(DynamicData);

our @property_list = (
   ['base64Cert', undef, undef, 1],
   ['username', undef, undef, 1],
   ['subjects', 'GuestAuthSubject', 1, 1],
);


VIMRuntime::make_get_set('GuestMappedAliases', 'base64Cert', 'username', 'subjects');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfGuestMappedAliases;
our @ISA = qw(ComplexType);

our @property_list = (
   ['GuestMappedAliases', 'GuestMappedAliases', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfGuestMappedAliases', 'GuestMappedAliases');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestFileAttributes;
our @ISA = qw(DynamicData);

our @property_list = (
   ['modificationTime', undef, undef, 0],
   ['accessTime', undef, undef, 0],
   ['symlinkTarget', undef, undef, 0],
);


VIMRuntime::make_get_set('GuestFileAttributes', 'modificationTime', 'accessTime', 'symlinkTarget');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestPosixFileAttributes;
our @ISA = qw(GuestFileAttributes);

our @property_list = (
   ['ownerId', undef, undef, 0],
   ['groupId', undef, undef, 0],
   ['permissions', undef, undef, 0],
);


VIMRuntime::make_get_set('GuestPosixFileAttributes', 'ownerId', 'groupId', 'permissions');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestWindowsFileAttributes;
our @ISA = qw(GuestFileAttributes);

our @property_list = (
   ['hidden', 'boolean', undef, 0],
   ['readOnly', 'boolean', undef, 0],
   ['createTime', undef, undef, 0],
);


VIMRuntime::make_get_set('GuestWindowsFileAttributes', 'hidden', 'readOnly', 'createTime');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestFileInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['path', undef, undef, 1],
   ['type', undef, undef, 1],
   ['size', undef, undef, 1],
   ['attributes', 'GuestFileAttributes', undef, 1],
);


VIMRuntime::make_get_set('GuestFileInfo', 'path', 'type', 'size', 'attributes');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfGuestFileInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['GuestFileInfo', 'GuestFileInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfGuestFileInfo', 'GuestFileInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestListFileInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['files', 'GuestFileInfo', 1, 0],
   ['remaining', undef, undef, 1],
);


VIMRuntime::make_get_set('GuestListFileInfo', 'files', 'remaining');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FileTransferInformation;
our @ISA = qw(DynamicData);

our @property_list = (
   ['attributes', 'GuestFileAttributes', undef, 1],
   ['size', undef, undef, 1],
   ['url', undef, undef, 1],
);


VIMRuntime::make_get_set('FileTransferInformation', 'attributes', 'size', 'url');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestAuthentication;
our @ISA = qw(DynamicData);

our @property_list = (
   ['interactiveSession', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('GuestAuthentication', 'interactiveSession');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NamePasswordAuthentication;
our @ISA = qw(GuestAuthentication);

our @property_list = (
   ['username', undef, undef, 1],
   ['password', undef, undef, 1],
);


VIMRuntime::make_get_set('NamePasswordAuthentication', 'username', 'password');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestProgramSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['programPath', undef, undef, 1],
   ['arguments', undef, undef, 1],
   ['workingDirectory', undef, undef, 0],
   ['envVariables', undef, 1, 0],
);


VIMRuntime::make_get_set('GuestProgramSpec', 'programPath', 'arguments', 'workingDirectory', 'envVariables');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestWindowsProgramSpec;
our @ISA = qw(GuestProgramSpec);

our @property_list = (
   ['startMinimized', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('GuestWindowsProgramSpec', 'startMinimized');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestProcessInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['pid', undef, undef, 1],
   ['owner', undef, undef, 1],
   ['cmdLine', undef, undef, 1],
   ['startTime', undef, undef, 1],
   ['endTime', undef, undef, 0],
   ['exitCode', undef, undef, 0],
);


VIMRuntime::make_get_set('GuestProcessInfo', 'name', 'pid', 'owner', 'cmdLine', 'startTime', 'endTime', 'exitCode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfGuestProcessInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['GuestProcessInfo', 'GuestProcessInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfGuestProcessInfo', 'GuestProcessInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SAMLTokenAuthentication;
our @ISA = qw(GuestAuthentication);

our @property_list = (
   ['token', undef, undef, 1],
   ['username', undef, undef, 0],
);


VIMRuntime::make_get_set('SAMLTokenAuthentication', 'token', 'username');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SSPIAuthentication;
our @ISA = qw(GuestAuthentication);

our @property_list = (
   ['sspiToken', undef, undef, 1],
);


VIMRuntime::make_get_set('SSPIAuthentication', 'sspiToken');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TicketedSessionAuthentication;
our @ISA = qw(GuestAuthentication);

our @property_list = (
   ['ticket', undef, undef, 1],
);


VIMRuntime::make_get_set('TicketedSessionAuthentication', 'ticket');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestRegKeyNameSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['registryPath', undef, undef, 1],
   ['wowBitness', undef, undef, 1],
);


VIMRuntime::make_get_set('GuestRegKeyNameSpec', 'registryPath', 'wowBitness');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestRegKeySpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['keyName', 'GuestRegKeyNameSpec', undef, 1],
   ['classType', undef, undef, 1],
   ['lastWritten', undef, undef, 1],
);


VIMRuntime::make_get_set('GuestRegKeySpec', 'keyName', 'classType', 'lastWritten');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestRegKeyRecordSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', 'GuestRegKeySpec', undef, 1],
   ['fault', 'LocalizedMethodFault', undef, 0],
);


VIMRuntime::make_get_set('GuestRegKeyRecordSpec', 'key', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfGuestRegKeyRecordSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['GuestRegKeyRecordSpec', 'GuestRegKeyRecordSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfGuestRegKeyRecordSpec', 'GuestRegKeyRecordSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestRegValueNameSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['keyName', 'GuestRegKeyNameSpec', undef, 1],
   ['name', undef, undef, 1],
);


VIMRuntime::make_get_set('GuestRegValueNameSpec', 'keyName', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestRegValueDataSpec;
our @ISA = qw(DynamicData);

our @property_list = (
);


VIMRuntime::make_get_set('GuestRegValueDataSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestRegValueDwordSpec;
our @ISA = qw(GuestRegValueDataSpec);

our @property_list = (
   ['value', undef, undef, 1],
);


VIMRuntime::make_get_set('GuestRegValueDwordSpec', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestRegValueQwordSpec;
our @ISA = qw(GuestRegValueDataSpec);

our @property_list = (
   ['value', undef, undef, 1],
);


VIMRuntime::make_get_set('GuestRegValueQwordSpec', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestRegValueStringSpec;
our @ISA = qw(GuestRegValueDataSpec);

our @property_list = (
   ['value', undef, undef, 0],
);


VIMRuntime::make_get_set('GuestRegValueStringSpec', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestRegValueExpandStringSpec;
our @ISA = qw(GuestRegValueDataSpec);

our @property_list = (
   ['value', undef, undef, 0],
);


VIMRuntime::make_get_set('GuestRegValueExpandStringSpec', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestRegValueMultiStringSpec;
our @ISA = qw(GuestRegValueDataSpec);

our @property_list = (
   ['value', undef, 1, 0],
);


VIMRuntime::make_get_set('GuestRegValueMultiStringSpec', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestRegValueBinarySpec;
our @ISA = qw(GuestRegValueDataSpec);

our @property_list = (
   ['value', undef, undef, 0],
);


VIMRuntime::make_get_set('GuestRegValueBinarySpec', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package GuestRegValueSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', 'GuestRegValueNameSpec', undef, 1],
   ['data', 'GuestRegValueDataSpec', undef, 1],
);


VIMRuntime::make_get_set('GuestRegValueSpec', 'name', 'data');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfGuestRegValueSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['GuestRegValueSpec', 'GuestRegValueSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfGuestRegValueSpec', 'GuestRegValueSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DeviceGroupId;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
);


VIMRuntime::make_get_set('DeviceGroupId', 'id');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package FaultDomainId;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
);


VIMRuntime::make_get_set('FaultDomainId', 'id');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ReplicationGroupId;
our @ISA = qw(DynamicData);

our @property_list = (
   ['faultDomainId', 'FaultDomainId', undef, 1],
   ['deviceGroupId', 'DeviceGroupId', undef, 1],
);


VIMRuntime::make_get_set('ReplicationGroupId', 'faultDomainId', 'deviceGroupId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ReplicationSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['replicationGroupId', 'ReplicationGroupId', undef, 1],
);


VIMRuntime::make_get_set('ReplicationSpec', 'replicationGroupId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanClusterConfigInfoHostDefaultInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['uuid', undef, undef, 0],
   ['autoClaimStorage', 'boolean', undef, 0],
   ['checksumEnabled', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VsanClusterConfigInfoHostDefaultInfo', 'uuid', 'autoClaimStorage', 'checksumEnabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanClusterConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['enabled', 'boolean', undef, 0],
   ['defaultConfig', 'VsanClusterConfigInfoHostDefaultInfo', undef, 0],
);


VIMRuntime::make_get_set('VsanClusterConfigInfo', 'enabled', 'defaultConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanHostClusterStatusStateCompletionEstimate;
our @ISA = qw(DynamicData);

our @property_list = (
   ['completeTime', undef, undef, 0],
   ['percentComplete', undef, undef, 0],
);


VIMRuntime::make_get_set('VsanHostClusterStatusStateCompletionEstimate', 'completeTime', 'percentComplete');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanHostClusterStatusState;
our @ISA = qw(DynamicData);

our @property_list = (
   ['state', undef, undef, 1],
   ['completion', 'VsanHostClusterStatusStateCompletionEstimate', undef, 0],
);


VIMRuntime::make_get_set('VsanHostClusterStatusState', 'state', 'completion');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanHostClusterStatus;
our @ISA = qw(DynamicData);

our @property_list = (
   ['uuid', undef, undef, 0],
   ['nodeUuid', undef, undef, 0],
   ['health', undef, undef, 1],
   ['nodeState', 'VsanHostClusterStatusState', undef, 1],
   ['memberUuid', undef, 1, 0],
);


VIMRuntime::make_get_set('VsanHostClusterStatus', 'uuid', 'nodeUuid', 'health', 'nodeState', 'memberUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanHostConfigInfoStorageInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['autoClaimStorage', 'boolean', undef, 0],
   ['diskMapping', 'VsanHostDiskMapping', 1, 0],
   ['diskMapInfo', 'VsanHostDiskMapInfo', 1, 0],
   ['checksumEnabled', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VsanHostConfigInfoStorageInfo', 'autoClaimStorage', 'diskMapping', 'diskMapInfo', 'checksumEnabled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanHostConfigInfoClusterInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['uuid', undef, undef, 0],
   ['nodeUuid', undef, undef, 0],
);


VIMRuntime::make_get_set('VsanHostConfigInfoClusterInfo', 'uuid', 'nodeUuid');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanHostConfigInfoNetworkInfoPortConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ipConfig', 'VsanHostIpConfig', undef, 0],
   ['device', undef, undef, 1],
);


VIMRuntime::make_get_set('VsanHostConfigInfoNetworkInfoPortConfig', 'ipConfig', 'device');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVsanHostConfigInfoNetworkInfoPortConfig;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VsanHostConfigInfoNetworkInfoPortConfig', 'VsanHostConfigInfoNetworkInfoPortConfig', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVsanHostConfigInfoNetworkInfoPortConfig', 'VsanHostConfigInfoNetworkInfoPortConfig');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanHostConfigInfoNetworkInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['port', 'VsanHostConfigInfoNetworkInfoPortConfig', 1, 0],
);


VIMRuntime::make_get_set('VsanHostConfigInfoNetworkInfo', 'port');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanHostFaultDomainInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
);


VIMRuntime::make_get_set('VsanHostFaultDomainInfo', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanHostConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['enabled', 'boolean', undef, 0],
   ['hostSystem', 'ManagedObjectReference', undef, 0],
   ['clusterInfo', 'VsanHostConfigInfoClusterInfo', undef, 0],
   ['storageInfo', 'VsanHostConfigInfoStorageInfo', undef, 0],
   ['networkInfo', 'VsanHostConfigInfoNetworkInfo', undef, 0],
   ['faultDomainInfo', 'VsanHostFaultDomainInfo', undef, 0],
);


VIMRuntime::make_get_set('VsanHostConfigInfo', 'enabled', 'hostSystem', 'clusterInfo', 'storageInfo', 'networkInfo', 'faultDomainInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVsanHostConfigInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VsanHostConfigInfo', 'VsanHostConfigInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVsanHostConfigInfo', 'VsanHostConfigInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanHostDecommissionMode;
our @ISA = qw(DynamicData);

our @property_list = (
   ['objectAction', undef, undef, 1],
);


VIMRuntime::make_get_set('VsanHostDecommissionMode', 'objectAction');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanHostDiskMapInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['mapping', 'VsanHostDiskMapping', undef, 1],
   ['mounted', 'boolean', undef, 1],
);


VIMRuntime::make_get_set('VsanHostDiskMapInfo', 'mapping', 'mounted');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVsanHostDiskMapInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VsanHostDiskMapInfo', 'VsanHostDiskMapInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVsanHostDiskMapInfo', 'VsanHostDiskMapInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanHostDiskMapResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['mapping', 'VsanHostDiskMapping', undef, 1],
   ['diskResult', 'VsanHostDiskResult', 1, 0],
   ['error', 'LocalizedMethodFault', undef, 0],
);


VIMRuntime::make_get_set('VsanHostDiskMapResult', 'mapping', 'diskResult', 'error');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVsanHostDiskMapResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VsanHostDiskMapResult', 'VsanHostDiskMapResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVsanHostDiskMapResult', 'VsanHostDiskMapResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanHostDiskMapping;
our @ISA = qw(DynamicData);

our @property_list = (
   ['ssd', 'HostScsiDisk', undef, 1],
   ['nonSsd', 'HostScsiDisk', 1, 1],
);


VIMRuntime::make_get_set('VsanHostDiskMapping', 'ssd', 'nonSsd');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVsanHostDiskMapping;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VsanHostDiskMapping', 'VsanHostDiskMapping', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVsanHostDiskMapping', 'VsanHostDiskMapping');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanHostDiskResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['disk', 'HostScsiDisk', undef, 1],
   ['state', undef, undef, 1],
   ['vsanUuid', undef, undef, 0],
   ['error', 'LocalizedMethodFault', undef, 0],
   ['degraded', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VsanHostDiskResult', 'disk', 'state', 'vsanUuid', 'error', 'degraded');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVsanHostDiskResult;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VsanHostDiskResult', 'VsanHostDiskResult', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVsanHostDiskResult', 'VsanHostDiskResult');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanHostIpConfig;
our @ISA = qw(DynamicData);

our @property_list = (
   ['upstreamIpAddress', undef, undef, 1],
   ['downstreamIpAddress', undef, undef, 1],
);


VIMRuntime::make_get_set('VsanHostIpConfig', 'upstreamIpAddress', 'downstreamIpAddress');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanHostMembershipInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['nodeUuid', undef, undef, 1],
   ['hostname', undef, undef, 1],
);


VIMRuntime::make_get_set('VsanHostMembershipInfo', 'nodeUuid', 'hostname');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVsanHostMembershipInfo;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VsanHostMembershipInfo', 'VsanHostMembershipInfo', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVsanHostMembershipInfo', 'VsanHostMembershipInfo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanHostVsanDiskInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['vsanUuid', undef, undef, 1],
   ['formatVersion', undef, undef, 1],
);


VIMRuntime::make_get_set('VsanHostVsanDiskInfo', 'vsanUuid', 'formatVersion');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanHostRuntimeInfoDiskIssue;
our @ISA = qw(DynamicData);

our @property_list = (
   ['diskId', undef, undef, 1],
   ['issue', undef, undef, 1],
);


VIMRuntime::make_get_set('VsanHostRuntimeInfoDiskIssue', 'diskId', 'issue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVsanHostRuntimeInfoDiskIssue;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VsanHostRuntimeInfoDiskIssue', 'VsanHostRuntimeInfoDiskIssue', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVsanHostRuntimeInfoDiskIssue', 'VsanHostRuntimeInfoDiskIssue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VsanHostRuntimeInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['membershipList', 'VsanHostMembershipInfo', 1, 0],
   ['diskIssues', 'VsanHostRuntimeInfoDiskIssue', 1, 0],
   ['accessGenNo', undef, undef, 0],
);


VIMRuntime::make_get_set('VsanHostRuntimeInfo', 'membershipList', 'diskIssues', 'accessGenNo');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package BaseConfigInfoBackingInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['datastore', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('BaseConfigInfoBackingInfo', 'datastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package BaseConfigInfoFileBackingInfo;
our @ISA = qw(BaseConfigInfoBackingInfo);

our @property_list = (
   ['filePath', undef, undef, 1],
   ['backingObjectId', undef, undef, 0],
   ['parent', 'BaseConfigInfoFileBackingInfo', undef, 0],
   ['deltaSizeInMB', undef, undef, 0],
);


VIMRuntime::make_get_set('BaseConfigInfoFileBackingInfo', 'filePath', 'backingObjectId', 'parent', 'deltaSizeInMB');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package BaseConfigInfoDiskFileBackingInfo;
our @ISA = qw(BaseConfigInfoFileBackingInfo);

our @property_list = (
   ['provisioningType', undef, undef, 1],
);


VIMRuntime::make_get_set('BaseConfigInfoDiskFileBackingInfo', 'provisioningType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package BaseConfigInfoRawDiskMappingBackingInfo;
our @ISA = qw(BaseConfigInfoFileBackingInfo);

our @property_list = (
   ['lunUuid', undef, undef, 1],
   ['compatibilityMode', undef, undef, 1],
);


VIMRuntime::make_get_set('BaseConfigInfoRawDiskMappingBackingInfo', 'lunUuid', 'compatibilityMode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package BaseConfigInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', 'ID', undef, 1],
   ['name', undef, undef, 1],
   ['createTime', undef, undef, 1],
   ['backing', 'BaseConfigInfoBackingInfo', undef, 1],
);


VIMRuntime::make_get_set('BaseConfigInfo', 'id', 'name', 'createTime', 'backing');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VslmCloneSpec;
our @ISA = qw(VslmMigrateSpec);

our @property_list = (
   ['name', undef, undef, 1],
);


VIMRuntime::make_get_set('VslmCloneSpec', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VslmCreateSpecBackingSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['datastore', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('VslmCreateSpecBackingSpec', 'datastore');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VslmCreateSpecDiskFileBackingSpec;
our @ISA = qw(VslmCreateSpecBackingSpec);

our @property_list = (
   ['provisioningType', undef, undef, 0],
);


VIMRuntime::make_get_set('VslmCreateSpecDiskFileBackingSpec', 'provisioningType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VslmCreateSpecRawDiskMappingBackingSpec;
our @ISA = qw(VslmCreateSpecBackingSpec);

our @property_list = (
   ['lunUuid', undef, undef, 1],
   ['compatibilityMode', undef, undef, 1],
);


VIMRuntime::make_get_set('VslmCreateSpecRawDiskMappingBackingSpec', 'lunUuid', 'compatibilityMode');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VslmCreateSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['backingSpec', 'VslmCreateSpecBackingSpec', undef, 1],
   ['capacityInMB', undef, undef, 1],
);


VIMRuntime::make_get_set('VslmCreateSpec', 'name', 'backingSpec', 'capacityInMB');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ID;
our @ISA = qw(DynamicData);

our @property_list = (
   ['id', undef, undef, 1],
);


VIMRuntime::make_get_set('ID', 'id');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfID;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ID', 'ID', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfID', 'ID');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VslmMigrateSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['backingSpec', 'VslmCreateSpecBackingSpec', undef, 1],
   ['consolidate', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VslmMigrateSpec', 'backingSpec', 'consolidate');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VslmRelocateSpec;
our @ISA = qw(VslmMigrateSpec);

our @property_list = (
);


VIMRuntime::make_get_set('VslmRelocateSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VStorageObjectStateInfo;
our @ISA = qw(DynamicData);

our @property_list = (
   ['tentative', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('VStorageObjectStateInfo', 'tentative');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VslmTagEntry;
our @ISA = qw(DynamicData);

our @property_list = (
   ['tagName', undef, undef, 1],
   ['parentCategoryName', undef, undef, 1],
);


VIMRuntime::make_get_set('VslmTagEntry', 'tagName', 'parentCategoryName');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfVslmTagEntry;
our @ISA = qw(ComplexType);

our @property_list = (
   ['VslmTagEntry', 'VslmTagEntry', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfVslmTagEntry', 'VslmTagEntry');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VStorageObjectConfigInfo;
our @ISA = qw(BaseConfigInfo);

our @property_list = (
   ['capacityInMB', undef, undef, 1],
   ['consumptionType', undef, 1, 0],
   ['consumerId', 'ID', 1, 0],
);


VIMRuntime::make_get_set('VStorageObjectConfigInfo', 'capacityInMB', 'consumptionType', 'consumerId');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package VStorageObject;
our @ISA = qw(DynamicData);

our @property_list = (
   ['config', 'VStorageObjectConfigInfo', undef, 1],
);


VIMRuntime::make_get_set('VStorageObject', 'config');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DynamicArray;
our @ISA = qw(ComplexType);

our @property_list = (
   ['val', 'anyType', 1, 1],
);


VIMRuntime::make_get_set('DynamicArray', 'val');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DynamicData;
our @ISA = qw(ComplexType);

our @property_list = (
);


VIMRuntime::make_get_set('DynamicData');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package DynamicProperty;
our @ISA = qw(ComplexType);

our @property_list = (
   ['name', undef, undef, 1],
   ['val', 'anyType', undef, 1],
);


VIMRuntime::make_get_set('DynamicProperty', 'name', 'val');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDynamicProperty;
our @ISA = qw(ComplexType);

our @property_list = (
   ['DynamicProperty', 'DynamicProperty', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDynamicProperty', 'DynamicProperty');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package KeyAnyValue;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['value', 'anyType', undef, 1],
);


VIMRuntime::make_get_set('KeyAnyValue', 'key', 'value');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfKeyAnyValue;
our @ISA = qw(ComplexType);

our @property_list = (
   ['KeyAnyValue', 'KeyAnyValue', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfKeyAnyValue', 'KeyAnyValue');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LocalizableMessage;
our @ISA = qw(DynamicData);

our @property_list = (
   ['key', undef, undef, 1],
   ['arg', 'KeyAnyValue', 1, 0],
   ['message', undef, undef, 0],
);


VIMRuntime::make_get_set('LocalizableMessage', 'key', 'arg', 'message');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfLocalizableMessage;
our @ISA = qw(ComplexType);

our @property_list = (
   ['LocalizableMessage', 'LocalizableMessage', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfLocalizableMessage', 'LocalizableMessage');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package LocalizedMethodFault;
our @ISA = qw(DynamicData);

our @property_list = (
   ['fault', 'MethodFault', undef, 1],
   ['localizedMessage', undef, undef, 0],
);


VIMRuntime::make_get_set('LocalizedMethodFault', 'fault', 'localizedMessage');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MethodFault;
our @ISA = qw(ComplexType);

our @property_list = (
   ['faultCause', 'LocalizedMethodFault', undef, 0],
   ['faultMessage', 'LocalizableMessage', 1, 0],
);


VIMRuntime::make_get_set('MethodFault', 'faultCause', 'faultMessage');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfMethodFault;
our @ISA = qw(ComplexType);

our @property_list = (
   ['MethodFault', 'MethodFault', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfMethodFault', 'MethodFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RuntimeFault;
our @ISA = qw(MethodFault);

our @property_list = (
);


VIMRuntime::make_get_set('RuntimeFault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostCommunication;
our @ISA = qw(RuntimeFault);

our @property_list = (
);


VIMRuntime::make_get_set('HostCommunication');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNotConnected;
our @ISA = qw(HostCommunication);

our @property_list = (
);


VIMRuntime::make_get_set('HostNotConnected');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package HostNotReachable;
our @ISA = qw(HostCommunication);

our @property_list = (
);


VIMRuntime::make_get_set('HostNotReachable');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidArgument;
our @ISA = qw(RuntimeFault);

our @property_list = (
   ['invalidProperty', undef, undef, 0],
);


VIMRuntime::make_get_set('InvalidArgument', 'invalidProperty');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidRequest;
our @ISA = qw(RuntimeFault);

our @property_list = (
);


VIMRuntime::make_get_set('InvalidRequest');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidType;
our @ISA = qw(InvalidRequest);

our @property_list = (
   ['argument', undef, undef, 0],
);


VIMRuntime::make_get_set('InvalidType', 'argument');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ManagedObjectNotFound;
our @ISA = qw(RuntimeFault);

our @property_list = (
   ['obj', 'ManagedObjectReference', undef, 1],
);


VIMRuntime::make_get_set('ManagedObjectNotFound', 'obj');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MethodNotFound;
our @ISA = qw(InvalidRequest);

our @property_list = (
   ['receiver', 'ManagedObjectReference', undef, 1],
   ['method', undef, undef, 1],
);


VIMRuntime::make_get_set('MethodNotFound', 'receiver', 'method');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NotEnoughLicenses;
our @ISA = qw(RuntimeFault);

our @property_list = (
);


VIMRuntime::make_get_set('NotEnoughLicenses');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NotImplemented;
our @ISA = qw(RuntimeFault);

our @property_list = (
);


VIMRuntime::make_get_set('NotImplemented');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package NotSupported;
our @ISA = qw(RuntimeFault);

our @property_list = (
);


VIMRuntime::make_get_set('NotSupported');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RequestCanceled;
our @ISA = qw(RuntimeFault);

our @property_list = (
);


VIMRuntime::make_get_set('RequestCanceled');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SecurityError;
our @ISA = qw(RuntimeFault);

our @property_list = (
);


VIMRuntime::make_get_set('SecurityError');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SystemError;
our @ISA = qw(RuntimeFault);

our @property_list = (
   ['reason', undef, undef, 1],
);


VIMRuntime::make_get_set('SystemError', 'reason');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UnexpectedFault;
our @ISA = qw(RuntimeFault);

our @property_list = (
   ['faultName', undef, undef, 1],
   ['fault', 'LocalizedMethodFault', undef, 0],
);


VIMRuntime::make_get_set('UnexpectedFault', 'faultName', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidCollectorVersion;
our @ISA = qw(MethodFault);

our @property_list = (
);


VIMRuntime::make_get_set('InvalidCollectorVersion');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package InvalidProperty;
our @ISA = qw(MethodFault);

our @property_list = (
   ['name', undef, undef, 1],
);


VIMRuntime::make_get_set('InvalidProperty', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PropertyFilterSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['propSet', 'PropertySpec', 1, 1],
   ['objectSet', 'ObjectSpec', 1, 1],
   ['reportMissingObjectsInResults', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('PropertyFilterSpec', 'propSet', 'objectSet', 'reportMissingObjectsInResults');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPropertyFilterSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PropertyFilterSpec', 'PropertyFilterSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPropertyFilterSpec', 'PropertyFilterSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PropertySpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['type', undef, undef, 1],
   ['all', 'boolean', undef, 0],
   ['pathSet', undef, 1, 0],
);


VIMRuntime::make_get_set('PropertySpec', 'type', 'all', 'pathSet');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPropertySpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PropertySpec', 'PropertySpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPropertySpec', 'PropertySpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ObjectSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['obj', 'ManagedObjectReference', undef, 1],
   ['skip', 'boolean', undef, 0],
   ['selectSet', 'SelectionSpec', 1, 0],
);


VIMRuntime::make_get_set('ObjectSpec', 'obj', 'skip', 'selectSet');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfObjectSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ObjectSpec', 'ObjectSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfObjectSpec', 'ObjectSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package SelectionSpec;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 0],
);


VIMRuntime::make_get_set('SelectionSpec', 'name');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfSelectionSpec;
our @ISA = qw(ComplexType);

our @property_list = (
   ['SelectionSpec', 'SelectionSpec', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfSelectionSpec', 'SelectionSpec');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package TraversalSpec;
our @ISA = qw(SelectionSpec);

our @property_list = (
   ['type', undef, undef, 1],
   ['path', undef, undef, 1],
   ['skip', 'boolean', undef, 0],
   ['selectSet', 'SelectionSpec', 1, 0],
);


VIMRuntime::make_get_set('TraversalSpec', 'type', 'path', 'skip', 'selectSet');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ObjectContent;
our @ISA = qw(DynamicData);

our @property_list = (
   ['obj', 'ManagedObjectReference', undef, 1],
   ['propSet', 'DynamicProperty', 1, 0],
   ['missingSet', 'MissingProperty', 1, 0],
);


VIMRuntime::make_get_set('ObjectContent', 'obj', 'propSet', 'missingSet');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfObjectContent;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ObjectContent', 'ObjectContent', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfObjectContent', 'ObjectContent');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package UpdateSet;
our @ISA = qw(DynamicData);

our @property_list = (
   ['version', undef, undef, 1],
   ['filterSet', 'PropertyFilterUpdate', 1, 0],
   ['truncated', 'boolean', undef, 0],
);


VIMRuntime::make_get_set('UpdateSet', 'version', 'filterSet', 'truncated');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PropertyFilterUpdate;
our @ISA = qw(DynamicData);

our @property_list = (
   ['filter', 'ManagedObjectReference', undef, 1],
   ['objectSet', 'ObjectUpdate', 1, 0],
   ['missingSet', 'MissingObject', 1, 0],
);


VIMRuntime::make_get_set('PropertyFilterUpdate', 'filter', 'objectSet', 'missingSet');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPropertyFilterUpdate;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PropertyFilterUpdate', 'PropertyFilterUpdate', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPropertyFilterUpdate', 'PropertyFilterUpdate');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ObjectUpdate;
our @ISA = qw(DynamicData);

our @property_list = (
   ['kind', 'ObjectUpdateKind', undef, 1],
   ['obj', 'ManagedObjectReference', undef, 1],
   ['changeSet', 'PropertyChange', 1, 0],
   ['missingSet', 'MissingProperty', 1, 0],
);


VIMRuntime::make_get_set('ObjectUpdate', 'kind', 'obj', 'changeSet', 'missingSet');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfObjectUpdate;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ObjectUpdate', 'ObjectUpdate', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfObjectUpdate', 'ObjectUpdate');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package PropertyChange;
our @ISA = qw(DynamicData);

our @property_list = (
   ['name', undef, undef, 1],
   ['op', 'PropertyChangeOp', undef, 1],
   ['val', 'anyType', undef, 0],
);


VIMRuntime::make_get_set('PropertyChange', 'name', 'op', 'val');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfPropertyChange;
our @ISA = qw(ComplexType);

our @property_list = (
   ['PropertyChange', 'PropertyChange', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfPropertyChange', 'PropertyChange');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MissingProperty;
our @ISA = qw(DynamicData);

our @property_list = (
   ['path', undef, undef, 1],
   ['fault', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('MissingProperty', 'path', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfMissingProperty;
our @ISA = qw(ComplexType);

our @property_list = (
   ['MissingProperty', 'MissingProperty', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfMissingProperty', 'MissingProperty');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package MissingObject;
our @ISA = qw(DynamicData);

our @property_list = (
   ['obj', 'ManagedObjectReference', undef, 1],
   ['fault', 'LocalizedMethodFault', undef, 1],
);


VIMRuntime::make_get_set('MissingObject', 'obj', 'fault');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfMissingObject;
our @ISA = qw(ComplexType);

our @property_list = (
   ['MissingObject', 'MissingObject', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfMissingObject', 'MissingObject');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package WaitOptions;
our @ISA = qw(DynamicData);

our @property_list = (
   ['maxWaitSeconds', undef, undef, 0],
   ['maxObjectUpdates', undef, undef, 0],
);


VIMRuntime::make_get_set('WaitOptions', 'maxWaitSeconds', 'maxObjectUpdates');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RetrieveOptions;
our @ISA = qw(DynamicData);

our @property_list = (
   ['maxObjects', undef, undef, 0],
);


VIMRuntime::make_get_set('RetrieveOptions', 'maxObjects');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package RetrieveResult;
our @ISA = qw(DynamicData);

our @property_list = (
   ['token', undef, undef, 0],
   ['objects', 'ObjectContent', 1, 1],
);


VIMRuntime::make_get_set('RetrieveResult', 'token', 'objects');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfString;
our @ISA = qw(ComplexType);

our @property_list = (
   ['string', undef, 1, 0],
);


VIMRuntime::make_get_set('ArrayOfString', 'string');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfAnyType;
our @ISA = qw(ComplexType);

our @property_list = (
   ['anyType', 'anyType', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfAnyType', 'anyType');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfAnyURI;
our @ISA = qw(ComplexType);

our @property_list = (
   ['anyURI', undef, 1, 0],
);


VIMRuntime::make_get_set('ArrayOfAnyURI', 'anyURI');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfManagedObjectReference;
our @ISA = qw(ComplexType);

our @property_list = (
   ['ManagedObjectReference', 'ManagedObjectReference', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfManagedObjectReference', 'ManagedObjectReference');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfBoolean;
our @ISA = qw(ComplexType);

our @property_list = (
   ['boolean', 'boolean', 1, 0],
);


VIMRuntime::make_get_set('ArrayOfBoolean', 'boolean');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfByte;
our @ISA = qw(ComplexType);

our @property_list = (
   ['byte', undef, 1, 0],
);


VIMRuntime::make_get_set('ArrayOfByte', 'byte');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfDouble;
our @ISA = qw(ComplexType);

our @property_list = (
   ['double', undef, 1, 0],
);


VIMRuntime::make_get_set('ArrayOfDouble', 'double');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfInt;
our @ISA = qw(ComplexType);

our @property_list = (
   ['int', undef, 1, 0],
);


VIMRuntime::make_get_set('ArrayOfInt', 'int');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfLong;
our @ISA = qw(ComplexType);

our @property_list = (
   ['long', undef, 1, 0],
);


VIMRuntime::make_get_set('ArrayOfLong', 'long');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package ArrayOfShort;
our @ISA = qw(ComplexType);

our @property_list = (
   ['short', undef, 1, 0],
);


VIMRuntime::make_get_set('ArrayOfShort', 'short');


sub get_property_list {
   my $class = shift;
   my @super_list = $class->SUPER::get_property_list();
   return (@super_list, @property_list);   
}

1;
##################################################################################




##################################################################################
package BatchResultResult;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ConfigSpecOperation;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DatastoreAccessible;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DatastoreSummaryMaintenanceModeState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DiagnosticManagerLogCreator;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DiagnosticManagerLogFormat;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchProductSpecOperationType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchNicTeamingPolicyMode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchNetworkResourceControlVersion;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchHostInfrastructureTrafficClass;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DrsInjectorWorkloadCorrelationState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ReplicationVmState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package QuiesceMode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HealthUpdateInfoComponentType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostSystemConnectionState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostSystemPowerState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostStandbyMode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostCryptoState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HttpNfcLeaseState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package IoFilterOperation;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package IoFilterType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package LatencySensitivitySensitivityLevel;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package LicenseManagerState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package LicenseManagerLicenseKey;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package LicenseFeatureInfoUnit;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package LicenseFeatureInfoState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package LicenseFeatureInfoSourceRestriction;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package LicenseReservationInfoState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostLicensableResourceKey;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ManagedEntityStatus;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package OvfConsumerOstNodeType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package OvfCreateImportSpecParamsDiskProvisioningType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package PerfFormat;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package PerfSummaryType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package PerfStatsType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package PerformanceManagerUnit;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ValidateMigrationTestType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VMotionCompatibilityType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package SessionManagerHttpServiceRequestSpecMethod;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package SharesLevel;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package SimpleCommandEncoding;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package StorageIORMThresholdMode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package TaskFilterSpecRecursionOption;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package TaskFilterSpecTimeOption;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package TaskInfoState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualAppVAppState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualDiskType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualDiskAdapterType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachinePowerState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineAppHeartbeatStatusType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineConnectionState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineMovePriority;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineFaultToleranceState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineRecordReplayState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineNeedSecondaryReason;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineFaultToleranceType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineTicketType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VsanUpgradeSystemUpgradeHistoryDiskGroupOpType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ActionParameter;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package StateAlarmOperator;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package EventAlarmExpressionComparisonOperator;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package MetricAlarmOperator;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ActionType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DrsBehavior;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DpmBehavior;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ClusterInfraUpdateHaConfigInfoBehaviorType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ClusterInfraUpdateHaConfigInfoRemediationType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ClusterDasAamNodeStateDasState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ClusterDasConfigInfoServiceState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ClusterDasConfigInfoVmMonitoringState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ClusterDasConfigInfoHBDatastoreCandidate;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ClusterDasFdmAvailabilityState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DasVmPriority;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ClusterDasVmSettingsRestartPriority;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ClusterDasVmSettingsIsolationResponse;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DrsRecommendationReasonCode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ClusterHostInfraUpdateHaModeActionOperationType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostPowerOperationType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package PlacementSpecPlacementType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ClusterPowerOnVmOption;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package RecommendationType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package RecommendationReasonCode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ClusterVmComponentProtectionSettingsStorageVmReaction;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ClusterVmComponentProtectionSettingsVmReactionOnAPDCleared;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ClusterVmReadinessReadyCondition;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DvsFilterOnFailure;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DVPortStatusVmDirectPathGen2InactiveReasonNetwork;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DVPortStatusVmDirectPathGen2InactiveReasonOther;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DistributedVirtualPortgroupPortgroupType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DistributedVirtualPortgroupMetaTagName;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package EntityType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package EntityImportType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchHostMemberHostComponentState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DistributedVirtualSwitchPortConnecteeConnecteeType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DvsNetworkRuleDirectionType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VmwareDistributedVirtualSwitchPvlanPortType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VMwareDVSVspanSessionEncapType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VMwareDVSVspanSessionType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VMwareDVSTeamingMatchStatus;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VMwareUplinkLacpMode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VMwareDvsLacpLoadBalanceAlgorithm;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VMwareDvsLacpApiVersion;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VMwareDvsMulticastFilteringMode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package EventEventSeverity;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostDisconnectedEventReasonCode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostDasErrorEventHostDasErrorReason;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VmShutdownOnIsolationEventOperation;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VmDasBeingResetEventReasonCode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VmFailedStartingSecondaryEventFailureReason;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DvsEventPortBlockState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package EventCategory;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package EventFilterSpecRecursionOption;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package AffinityType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package AgentInstallFailedReason;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package CannotEnableVmcpForClusterReason;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package CannotMoveFaultToleranceVmMoveType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package CannotPowerOffVmInClusterOperation;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package CannotUseNetworkReason;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DasConfigFaultDasConfigFaultReason;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DeviceNotSupportedReason;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DisallowedChangeByServiceDisallowedChange;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package FtIssuesOnHostHostSelectionType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostHasComponentFailureHostComponentType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostIncompatibleForFaultToleranceReason;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostIncompatibleForRecordReplayReason;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package IncompatibleHostForVmReplicationIncompatibleReason;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package InvalidDasConfigArgumentEntryForInvalidArgument;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package InvalidProfileReferenceHostReason;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package LicenseAssignmentFailedReason;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package NotSupportedDeviceForFTDeviceType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package NumVirtualCpusIncompatibleReason;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package QuarantineModeFaultFaultType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ReplicationDiskConfigFaultReasonForFault;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ReplicationVmConfigFaultReasonForFault;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ReplicationVmFaultReasonForFault;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ReplicationVmInProgressFaultActivity;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ThirdPartyLicenseAssignmentFailedReason;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VFlashModuleNotSupportedReason;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VmFaultToleranceConfigIssueReasonForIssue;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VmFaultToleranceInvalidFileBackingDeviceType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package WillLoseHAProtectionResolution;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostActiveDirectoryAuthenticationCertificateDigest;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostActiveDirectoryInfoDomainMembershipStatus;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package AutoStartAction;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package AutoStartWaitHeartbeatSetting;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostReplayUnsupportedReason;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostCapabilityFtUnsupportedReason;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostCapabilityVmDirectPathGen2UnsupportedReason;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostCertificateManagerCertificateInfoCertificateStatus;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostConfigChangeMode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostConfigChangeOperation;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DiagnosticPartitionStorageType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DiagnosticPartitionType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostDiskPartitionInfoPartitionFormat;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostDiskPartitionInfoType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostFeatureVersionKey;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package FileSystemMountInfoVStorageSupportStatus;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostFileSystemVolumeFileSystemType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostNasVolumeSecurityType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostGraphicsConfigGraphicsType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostGraphicsConfigSharedPassthruAssignmentPolicy;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostGraphicsInfoGraphicsType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostCpuPowerManagementInfoPolicyType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostCpuPackageVendor;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostHardwareElementStatus;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostAccessMode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostLockdownMode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package FibreChannelPortType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package InternetScsiSnsDiscoveryMethod;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package SlpDiscoveryMethod;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostInternetScsiHbaChapAuthenticationType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostInternetScsiHbaDigestType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostInternetScsiHbaIscsiIpv6AddressAddressConfigurationType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostInternetScsiHbaIscsiIpv6AddressIPv6AddressOperation;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostInternetScsiHbaStaticTargetTargetDiscoveryMethod;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostInternetScsiHbaNetworkBindingSupportType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostImageAcceptanceLevel;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostIpConfigIpV6AddressConfigType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostIpConfigIpV6AddressStatus;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package IscsiPortInfoPathStatus;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package LinkDiscoveryProtocolConfigProtocolType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package LinkDiscoveryProtocolConfigOperationType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostLowLevelProvisioningManagerReloadTarget;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostLowLevelProvisioningManagerFileType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineMemoryAllocationPolicy;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostMountMode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostMountInfoInaccessibleReason;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package MultipathState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostNetStackInstanceSystemStackKey;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostNetStackInstanceCongestionControlAlgorithmType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostNumericSensorHealthState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostNumericSensorType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostOpaqueSwitchOpaqueSwitchState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostPatchManagerReason;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostPatchManagerIntegrityStatus;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostPatchManagerInstallState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package PhysicalNicVmDirectPathGen2SupportedMode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package PhysicalNicResourcePoolSchedulerDisallowedReason;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package PortGroupConnecteeType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostProtocolEndpointPEType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostProtocolEndpointProtocolEndpointType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostFirewallRuleDirection;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostFirewallRulePortType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostFirewallRuleProtocol;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostRuntimeInfoNetStackInstanceRuntimeInfoState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ScsiDiskType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ScsiLunType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ScsiLunState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ScsiLunDescriptorQuality;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ScsiLunVStorageSupportStatus;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostServicePolicy;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostSnmpAgentCapability;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package SoftwarePackageVibType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package SoftwarePackageConstraint;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostSystemIdentificationInfoIdentifier;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostDigestInfoDigestMethodType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostUnresolvedVmfsExtentUnresolvedReason;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostUnresolvedVmfsResolutionSpecVmfsUuidResolution;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostVirtualNicManagerNicType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostVmciAccessManagerMode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostVmfsVolumeUnmapPriority;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package NetIpConfigInfoIpAddressOrigin;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package NetIpConfigInfoIpAddressStatus;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package NetIpStackInfoEntryType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package NetIpStackInfoPreference;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package NetBIOSConfigInfoMode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ArrayUpdateOperation;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ComplianceResultStatus;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ProfileNumericComparator;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ClusterProfileServiceType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ProfileExecuteResultStatus;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostProfileManagerTaskListRequirement;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package HostProfileManagerAnswerFileStatus;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package DayOfWeek;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package WeekOfMonth;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package PlacementAffinityRuleRuleType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package PlacementAffinityRuleRuleScope;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package StorageDrsPodConfigInfoBehavior;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package StorageDrsSpaceLoadBalanceConfigSpaceThresholdMode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package StoragePlacementSpecPlacementType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VAppCloneSpecProvisioningType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VAppAutoStartAction;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VAppIPAssignmentInfoIpAllocationPolicy;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VAppIPAssignmentInfoAllocationSchemes;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VAppIPAssignmentInfoProtocols;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VchaState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VchaNodeRole;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VchaClusterMode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VchaClusterState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VchaNodeState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineBootOptionsNetworkBootProtocolType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineConfigInfoNpivWwnType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineConfigInfoSwapPlacementType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineConfigSpecNpivWwnOp;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineConfigSpecEncryptedVMotionModes;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachinePowerOpType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineStandbyActionType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineFileLayoutExFileType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineHtSharing;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachinePowerOffBehavior;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineFlagInfoMonitorType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineFlagInfoVirtualMmuUsage;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineFlagInfoVirtualExecUsage;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineForkConfigInfoChildType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineToolsStatus;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineToolsVersionStatus;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineToolsRunningStatus;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineToolsInstallType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineGuestState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package GuestInfoAppStateType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineGuestOsFamily;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineGuestOsIdentifier;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package GuestOsDescriptorFirmwareType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package GuestOsDescriptorSupportLevel;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineMetadataManagerVmMetadataOwnerOwner;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineMetadataManagerVmMetadataOp;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineRelocateTransformation;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineRelocateDiskMoveOptions;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ScheduledHardwareUpgradeInfoHardwareUpgradePolicy;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ScheduledHardwareUpgradeInfoHardwareUpgradeStatus;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineScsiPassthroughType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineTargetInfoConfigurationTag;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package UpgradePolicy;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineUsbInfoSpeed;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineUsbInfoFamily;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineWindowsQuiesceSpecVssBackupContext;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package CheckTestType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package CustomizationNetBIOSMode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package CustomizationSysprepRebootOption;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package CustomizationLicenseDataMode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualDeviceConnectInfoStatus;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualDeviceFileExtension;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualDeviceURIBackingOptionDirection;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualDeviceConfigSpecOperation;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualDeviceConfigSpecFileOperation;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualDiskDeltaDiskFormat;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualDiskDeltaDiskFormatVariant;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualDiskSharing;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualDiskVFlashCacheConfigInfoCacheConsistencyType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualDiskVFlashCacheConfigInfoCacheMode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualDiskMode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualDiskCompatibilityMode;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualEthernetCardLegacyNetworkDeviceName;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualEthernetCardMacType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualPointingDeviceHostChoice;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualSCSISharing;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualSerialPortEndPoint;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineVMCIDeviceAction;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineVMCIDeviceProtocol;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineVMCIDeviceDirection;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VirtualMachineVideoCardUse3dRenderer;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package GuestFileType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package GuestRegKeyWowSpec;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VsanHostDecommissionModeObjectAction;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VsanHostDiskResultState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VsanHostHealthState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VsanHostNodeState;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VsanDiskIssueType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package BaseConfigInfoDiskFileBackingInfoProvisioningType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package VStorageObjectConsumptionType;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package ObjectUpdateKind;
our @ISA = qw(SimpleType);

1;
##################################################################################




##################################################################################
package PropertyChangeOp;
our @ISA = qw(SimpleType);

1;
##################################################################################



###################################################################
package VimService;

sub new {
   my ($class, $url) = @_;
   my $self = {};
   my $vim_soap = SoapClient->new($url);
   $self->{vim_soap} = $vim_soap;
   return bless $self, $class;
}

sub save_session {
   my ($self, $file) = @_;
   my $vim_soap = $self->{vim_soap};
   $vim_soap->save_session($file);
   return;
}

sub load_session {
   my ($self, $file) = @_;
   my $vim_soap = $self->{vim_soap};
   $vim_soap->load_session($file);
   return;
}

sub unload_session {
   my ($self) = @_;
   my $vim_soap = $self->{vim_soap};
   $vim_soap->unload_session();
   return;
}

sub get_session_loaded {
   my $self = shift;
   my $vim_soap = $self->{vim_soap};
   return $vim_soap->get_session_loaded();
}

sub load_session_id {
   my ($self, $id) = @_;
   my $vim_soap = $self->{vim_soap};
   $vim_soap->load_session_id($id);
}

sub get_session_id {
   my $self = shift;
   my $vim_soap = $self->{vim_soap};
   my $id = $vim_soap->get_session_id();
   return $id;
}

sub deserialize_response {
   my ($result, $fault, $class_name, $isarray) = @_;
   my $response = SoapResponse->new;
   if ($fault) {
      my $soap_faut = new SoapFault($fault);      
      $response->fault($soap_faut);      
   } elsif ($result) {
      if ($isarray) {
         my @return_array;
         foreach (@$result) {
            if ($class_name) {
               my $obj = $class_name->deserialize($_);
               push @return_array, $obj;      
            } else {
               if ($_) {
                  push @return_array, $_->textContent;
               }
            }
         }
         $response->result(\@return_array);
      } else {
         if ($class_name) {
            $response->result($class_name->deserialize(shift @$result));     
         } else {
            my $node = shift @$result;
            if ($node) {
               $response->result($node->textContent);
            }
         }
      }
   } else {
      # void return      
   }
   return $response;
}

sub get_arg_string {   
    my ($arg, $arg_name, $expected_type) = @_;
    my $arg_string = "";

    if ($expected_type) {
        # complex type                  
        my $arg_type = ref $arg;                  
        if ($arg_type &&
            $arg_type->isa("ViewBase") &&
            $expected_type eq 'ManagedObjectReference') {
            # views can be passed off as MoRef
            $arg_type = 'ManagedObjectReference';
        }
        if (! $arg_type || ! $arg_type->isa($expected_type)) {
            Carp::confess("Expected $expected_type for '$arg_name' argument.");
        }
        # bug 236635
        if (defined($arg)) {
            if ($arg_type ne $expected_type) {
                #
                # $arg must be of derived type of $expected_type, better emit type then.
                #
                $arg_string = $arg->serialize($arg_name, $arg_type);
            } else {
                $arg_string = $arg->serialize($arg_name);
            }
        }
    } else {
        # primitive
        if (defined($arg)) {
           $arg_string = "<$arg_name>" . XmlUtil::escape_xml_string($arg) . "</$arg_name>";
        }
    }

    return $arg_string;
}

sub build_arg_string {   
   my ($arg_list, $arg_hash) = @_;
   my $arg_string;
   foreach (@$arg_list) {
      my ($arg_name, $type_name) = @$_;
      if (exists($arg_hash->{$arg_name})) {
         my $arg_value = ($arg_hash->{$arg_name});
         my $refName = ref $arg_value;
         if ($refName eq 'ARRAY') {
            foreach (@$arg_value) {
               $arg_string .= get_arg_string($_, $arg_name, $type_name);
            }
         } elsif (defined($arg_value)) {
            $arg_string .= get_arg_string($arg_value, $arg_name, $type_name);
         }
         delete $arg_hash->{$arg_name};
      }
   }
   my @leftover = keys %$arg_hash;
   if (@leftover > 0) {
      Carp::confess("Unexpected arguments: @leftover");
   }
   return $arg_string;
}

sub AddAuthorizationRole {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['privIds', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AddAuthorizationRole', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RemoveAuthorizationRole {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['roleId', undef],['failIfUsed', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveAuthorizationRole', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateAuthorizationRole {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['roleId', undef],['newName', undef],['privIds', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateAuthorizationRole', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub MergePermissions {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['srcRoleId', undef],['dstRoleId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MergePermissions', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RetrieveRolePermissions {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['roleId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveRolePermissions', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'Permission', 1);
}

sub RetrieveEntityPermissions {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],['inherited', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveEntityPermissions', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'Permission', 1);
}

sub RetrieveAllPermissions {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveAllPermissions', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'Permission', 1);
}

sub SetEntityPermissions {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],['permission', 'Permission'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SetEntityPermissions', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ResetEntityPermissions {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],['permission', 'Permission'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ResetEntityPermissions', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RemoveEntityPermission {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],['user', undef],['isGroup', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveEntityPermission', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub HasPrivilegeOnEntity {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],['sessionId', undef],['privId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HasPrivilegeOnEntity', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 1);
}

sub HasPrivilegeOnEntities {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],['sessionId', undef],['privId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HasPrivilegeOnEntities', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'EntityPrivilege', 1);
}

sub HasUserPrivilegeOnEntities {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entities', 'ManagedObjectReference'],['userName', undef],['privId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HasUserPrivilegeOnEntities', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'EntityPrivilege', 1);
}

sub FetchUserPrivilegeOnEntities {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entities', 'ManagedObjectReference'],['userName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('FetchUserPrivilegeOnEntities', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'UserPrivilegeResult', 1);
}

sub CertMgrRefreshCACertificatesAndCRLs_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CertMgrRefreshCACertificatesAndCRLs_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CertMgrRefreshCertificates_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CertMgrRefreshCertificates_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CertMgrRevokeCertificates_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CertMgrRevokeCertificates_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ConfigureEVC_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['evcModeKey', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my ($result, $fault) = $vim_soap->request('ConfigureEVC_Task', $arg_string);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub TransitionalEVCManager {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my ($result, $fault) = $vim_soap->request('TransitionalEVCManager', $arg_string);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ReconfigureCluster_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'ClusterConfigSpec'],['modify', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReconfigureCluster_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ApplyRecommendation {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['key', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ApplyRecommendation', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CancelRecommendation {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['key', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CancelRecommendation', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RecommendHostsForVm {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['pool', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RecommendHostsForVm', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ClusterHostRecommendation', 1);
}

sub AddHost_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'HostConnectSpec'],['asConnected', undef],['resourcePool', 'ManagedObjectReference'],['license', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AddHost_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub MoveInto_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MoveInto_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub MoveHostInto_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['resourcePool', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MoveHostInto_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RefreshRecommendation {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RefreshRecommendation', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub EvcManager {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('EvcManager', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RetrieveDasAdvancedRuntimeInfo {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveDasAdvancedRuntimeInfo', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ClusterDasAdvancedRuntimeInfo', 0);
}

sub ClusterEnterMaintenanceMode {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['option', 'OptionValue'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ClusterEnterMaintenanceMode', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ClusterEnterMaintenanceResult', 0);
}

sub PlaceVm {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['placementSpec', 'PlacementSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('PlaceVm', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'PlacementResult', 0);
}

sub FindRulesForVm {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('FindRulesForVm', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ClusterRuleInfo', 1);
}

sub StampAllRulesWithUuid_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('StampAllRulesWithUuid_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub GetResourceUsage {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('GetResourceUsage', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ClusterResourceUsageSummary', 0);
}

sub ReconfigureComputeResource_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'ComputeResourceConfigSpec'],['modify', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReconfigureComputeResource_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub AddCustomFieldDef {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['moType', undef],['fieldDefPolicy', 'PrivilegePolicyDef'],['fieldPolicy', 'PrivilegePolicyDef'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AddCustomFieldDef', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'CustomFieldDef', 0);
}

sub RemoveCustomFieldDef {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['key', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveCustomFieldDef', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RenameCustomFieldDef {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['key', undef],['name', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RenameCustomFieldDef', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub SetField {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],['key', undef],['value', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SetField', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DoesCustomizationSpecExist {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DoesCustomizationSpecExist', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub GetCustomizationSpec {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('GetCustomizationSpec', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'CustomizationSpecItem', 0);
}

sub CreateCustomizationSpec {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['item', 'CustomizationSpecItem'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateCustomizationSpec', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub OverwriteCustomizationSpec {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['item', 'CustomizationSpecItem'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('OverwriteCustomizationSpec', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DeleteCustomizationSpec {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DeleteCustomizationSpec', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DuplicateCustomizationSpec {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['newName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DuplicateCustomizationSpec', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RenameCustomizationSpec {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['newName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RenameCustomizationSpec', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CustomizationSpecItemToXml {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['item', 'CustomizationSpecItem'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CustomizationSpecItemToXml', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub XmlToCustomizationSpecItem {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['specItemXml', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('XmlToCustomizationSpecItem', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'CustomizationSpecItem', 0);
}

sub CheckCustomizationResources {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['guestOs', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CheckCustomizationResources', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryConnectionInfo {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['hostname', undef],['port', undef],['username', undef],['password', undef],['sslThumbprint', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryConnectionInfo', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostConnectInfo', 0);
}

sub QueryConnectionInfoViaSpec {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'HostConnectSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryConnectionInfoViaSpec', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostConnectInfo', 0);
}

sub PowerOnMultiVM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['option', 'OptionValue'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('PowerOnMultiVM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub queryDatacenterConfigOptionDescriptor {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('queryDatacenterConfigOptionDescriptor', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VirtualMachineConfigOptionDescriptor', 1);
}

sub ReconfigureDatacenter_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'DatacenterConfigSpec'],['modify', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReconfigureDatacenter_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RefreshDatastore {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RefreshDatastore', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RefreshDatastoreStorageInfo {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RefreshDatastoreStorageInfo', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateVirtualMachineFiles_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['mountPathDatastoreMapping', 'DatastoreMountPathDatastorePair'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateVirtualMachineFiles_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RenameDatastore {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['newName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RenameDatastore', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DestroyDatastore {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DestroyDatastore', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DatastoreEnterMaintenanceMode {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DatastoreEnterMaintenanceMode', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'StoragePlacementResult', 0);
}

sub DatastoreExitMaintenanceMode_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DatastoreExitMaintenanceMode_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub UpdateVVolVirtualMachineFiles_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['failoverPair', 'DatastoreVVolContainerFailoverPair'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateVVolVirtualMachineFiles_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CreateDirectory {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datastore', 'ManagedObjectReference'],['displayName', undef],['policy', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateDirectory', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DeleteDirectory {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datacenter', 'ManagedObjectReference'],['datastorePath', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DeleteDirectory', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ConvertNamespacePathToUuidPath {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datacenter', 'ManagedObjectReference'],['namespaceUrl', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ConvertNamespacePathToUuidPath', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryDescriptions {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryDescriptions', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'DiagnosticManagerLogDescriptor', 1);
}

sub BrowseDiagnosticLog {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['key', undef],['start', undef],['lines', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('BrowseDiagnosticLog', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'DiagnosticManagerLogHeader', 0);
}

sub GenerateLogBundles_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['includeDefault', undef],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('GenerateLogBundles_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub FetchDVPortKeys {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['criteria', 'DistributedVirtualSwitchPortCriteria'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('FetchDVPortKeys', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 1);
}

sub FetchDVPorts {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['criteria', 'DistributedVirtualSwitchPortCriteria'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('FetchDVPorts', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'DistributedVirtualPort', 1);
}

sub QueryUsedVlanIdInDvs {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryUsedVlanIdInDvs', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 1);
}

sub ReconfigureDvs_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'DVSConfigSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReconfigureDvs_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub PerformDvsProductSpecOperation_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['operation', undef],['productSpec', 'DistributedVirtualSwitchProductSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('PerformDvsProductSpecOperation_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub MergeDvs_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['dvs', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MergeDvs_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub AddDVPortgroup_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'DVPortgroupConfigSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AddDVPortgroup_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub MoveDVPort_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['portKey', undef],['destinationPortgroupKey', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MoveDVPort_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub UpdateDvsCapability {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['capability', 'DVSCapability'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateDvsCapability', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ReconfigureDVPort_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['port', 'DVPortConfigSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReconfigureDVPort_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RefreshDVPortState {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['portKeys', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RefreshDVPortState', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RectifyDvsHost_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['hosts', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RectifyDvsHost_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub UpdateNetworkResourcePool {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['configSpec', 'DVSNetworkResourcePoolConfigSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateNetworkResourcePool', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub AddNetworkResourcePool {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['configSpec', 'DVSNetworkResourcePoolConfigSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AddNetworkResourcePool', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RemoveNetworkResourcePool {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['key', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveNetworkResourcePool', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DvsReconfigureVmVnicNetworkResourcePool_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['configSpec', 'DvsVmVnicResourcePoolConfigSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DvsReconfigureVmVnicNetworkResourcePool_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub EnableNetworkResourceManagement {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['enable', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('EnableNetworkResourceManagement', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DVSRollback_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entityBackup', 'EntityBackupConfig'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DVSRollback_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CreateDVPortgroup_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'DVPortgroupConfigSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateDVPortgroup_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub UpdateDVSHealthCheckConfig_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['healthCheckConfig', 'DVSHealthCheckConfig'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateDVSHealthCheckConfig_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub LookupDvPortGroup {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['portgroupKey', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('LookupDvPortGroup', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub QueryConfigOptionDescriptor {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryConfigOptionDescriptor', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VirtualMachineConfigOptionDescriptor', 1);
}

sub QueryConfigOption {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['key', undef],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryConfigOption', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VirtualMachineConfigOption', 0);
}

sub QueryConfigOptionEx {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'EnvironmentBrowserConfigOptionQuerySpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryConfigOptionEx', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VirtualMachineConfigOption', 0);
}

sub QueryConfigTarget {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryConfigTarget', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ConfigTarget', 0);
}

sub QueryTargetCapabilities {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryTargetCapabilities', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostCapability', 0);
}

sub setCustomValue {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['key', undef],['value', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('setCustomValue', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UnregisterExtension {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['extensionKey', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UnregisterExtension', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub FindExtension {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['extensionKey', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('FindExtension', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'Extension', 0);
}

sub RegisterExtension {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['extension', 'Extension'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RegisterExtension', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateExtension {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['extension', 'Extension'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateExtension', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub GetPublicKey {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('GetPublicKey', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub SetPublicKey {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['extensionKey', undef],['publicKey', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SetPublicKey', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub SetExtensionCertificate {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['extensionKey', undef],['certificatePem', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SetExtensionCertificate', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryManagedBy {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['extensionKey', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryManagedBy', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 1);
}

sub QueryExtensionIpAllocationUsage {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['extensionKeys', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryExtensionIpAllocationUsage', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ExtensionManagerIpAllocationUsage', 1);
}

sub MoveDatastoreFile_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['sourceName', undef],['sourceDatacenter', 'ManagedObjectReference'],['destinationName', undef],['destinationDatacenter', 'ManagedObjectReference'],['force', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MoveDatastoreFile_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CopyDatastoreFile_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['sourceName', undef],['sourceDatacenter', 'ManagedObjectReference'],['destinationName', undef],['destinationDatacenter', 'ManagedObjectReference'],['force', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CopyDatastoreFile_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub DeleteDatastoreFile_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['datacenter', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DeleteDatastoreFile_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub MakeDirectory {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['datacenter', 'ManagedObjectReference'],['createParentDirectories', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MakeDirectory', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ChangeOwner {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['datacenter', 'ManagedObjectReference'],['owner', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ChangeOwner', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CreateFolder {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateFolder', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub MoveIntoFolder_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['list', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MoveIntoFolder_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CreateVM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['config', 'VirtualMachineConfigSpec'],['pool', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateVM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RegisterVM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['path', undef],['name', undef],['asTemplate', undef],['pool', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RegisterVM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CreateCluster {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['spec', 'ClusterConfigSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateCluster', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CreateClusterEx {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['spec', 'ClusterConfigSpecEx'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateClusterEx', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub AddStandaloneHost_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'HostConnectSpec'],['compResSpec', 'ComputeResourceConfigSpec'],['addConnected', undef],['license', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AddStandaloneHost_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CreateDatacenter {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateDatacenter', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub UnregisterAndDestroy_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UnregisterAndDestroy_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CreateDVS_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'DVSCreateSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateDVS_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CreateStoragePod {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateStoragePod', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RegisterHealthUpdateProvider {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['healthUpdateInfo', 'HealthUpdateInfo'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RegisterHealthUpdateProvider', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UnregisterHealthUpdateProvider {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['providerId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UnregisterHealthUpdateProvider', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryProviderList {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryProviderList', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 1);
}

sub HasProvider {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HasProvider', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryProviderName {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryProviderName', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryHealthUpdateInfos {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['providerId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryHealthUpdateInfos', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HealthUpdateInfo', 1);
}

sub AddMonitoredEntities {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['providerId', undef],['entities', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AddMonitoredEntities', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RemoveMonitoredEntities {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['providerId', undef],['entities', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveMonitoredEntities', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryMonitoredEntities {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['providerId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryMonitoredEntities', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 1);
}

sub HasMonitoredEntity {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['providerId', undef],['entity', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HasMonitoredEntity', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryUnmonitoredHosts {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['providerId', undef],['cluster', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryUnmonitoredHosts', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 1);
}

sub PostHealthUpdates {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['providerId', undef],['updates', 'HealthUpdate'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('PostHealthUpdates', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryHealthUpdates {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['providerId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryHealthUpdates', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HealthUpdate', 1);
}

sub AddFilter {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['providerId', undef],['filterName', undef],['infoIds', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AddFilter', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryFilterList {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['providerId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryFilterList', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 1);
}

sub QueryFilterName {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['filterId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryFilterName', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryFilterInfoIds {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['filterId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryFilterInfoIds', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 1);
}

sub QueryFilterEntities {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['filterId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryFilterEntities', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 1);
}

sub AddFilterEntities {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['filterId', undef],['entities', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AddFilterEntities', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RemoveFilterEntities {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['filterId', undef],['entities', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveFilterEntities', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RemoveFilter {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['filterId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveFilter', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub SetCollectorPageSize {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['maxCount', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SetCollectorPageSize', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RewindCollector {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RewindCollector', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ResetCollector {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ResetCollector', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DestroyCollector {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DestroyCollector', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryTpmAttestationReport {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryTpmAttestationReport', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostTpmAttestationReport', 0);
}

sub QueryHostConnectionInfo {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryHostConnectionInfo', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostConnectInfo', 0);
}

sub UpdateSystemResources {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['resourceInfo', 'HostSystemResourceInfo'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateSystemResources', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateSystemSwapConfiguration {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['sysSwapConfig', 'HostSystemSwapConfiguration'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateSystemSwapConfiguration', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ReconnectHost_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['cnxSpec', 'HostConnectSpec'],['reconnectSpec', 'HostSystemReconnectSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReconnectHost_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub DisconnectHost_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DisconnectHost_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub EnterMaintenanceMode_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['timeout', undef],['evacuatePoweredOffVms', undef],['maintenanceSpec', 'HostMaintenanceSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('EnterMaintenanceMode_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ExitMaintenanceMode_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['timeout', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ExitMaintenanceMode_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RebootHost_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['force', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RebootHost_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ShutdownHost_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['force', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ShutdownHost_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub PowerDownHostToStandBy_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['timeoutSec', undef],['evacuatePoweredOffVms', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('PowerDownHostToStandBy_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub PowerUpHostFromStandBy_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['timeoutSec', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('PowerUpHostFromStandBy_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub QueryMemoryOverhead {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['memorySize', undef],['videoRamSize', undef],['numVcpus', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryMemoryOverhead', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryMemoryOverheadEx {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vmConfigInfo', 'VirtualMachineConfigInfo'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryMemoryOverheadEx', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ReconfigureHostForDAS_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReconfigureHostForDAS_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub UpdateFlags {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['flagInfo', 'HostFlagInfo'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateFlags', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub EnterLockdownMode {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('EnterLockdownMode', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ExitLockdownMode {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ExitLockdownMode', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub AcquireCimServicesTicket {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AcquireCimServicesTicket', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostServiceTicket', 0);
}

sub UpdateIpmi {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['ipmiInfo', 'HostIpmiInfo'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateIpmi', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RetrieveHardwareUptime {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveHardwareUptime', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub PrepareCrypto {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('PrepareCrypto', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub EnableCrypto {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['keyPlain', 'CryptoKeyPlain'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('EnableCrypto', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ConfigureCryptoKey {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['keyId', 'CryptoKeyId'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ConfigureCryptoKey', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub HttpNfcLeaseGetManifest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HttpNfcLeaseGetManifest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HttpNfcLeaseManifestEntry', 1);
}

sub HttpNfcLeaseComplete {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HttpNfcLeaseComplete', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub HttpNfcLeaseAbort {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['fault', 'LocalizedMethodFault'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HttpNfcLeaseAbort', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub HttpNfcLeaseProgress {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['percent', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HttpNfcLeaseProgress', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub InstallIoFilter_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vibUrl', undef],['compRes', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('InstallIoFilter_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub UninstallIoFilter_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['filterId', undef],['compRes', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UninstallIoFilter_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub UpgradeIoFilter_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['filterId', undef],['compRes', 'ManagedObjectReference'],['vibUrl', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpgradeIoFilter_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub QueryIoFilterIssues {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['filterId', undef],['compRes', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryIoFilterIssues', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'IoFilterQueryIssueResult', 0);
}

sub QueryIoFilterInfo {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['compRes', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryIoFilterInfo', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ClusterIoFilterInfo', 1);
}

sub ResolveInstallationErrorsOnHost_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['filterId', undef],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ResolveInstallationErrorsOnHost_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ResolveInstallationErrorsOnCluster_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['filterId', undef],['cluster', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ResolveInstallationErrorsOnCluster_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub QueryDisksUsingFilter {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['filterId', undef],['compRes', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryDisksUsingFilter', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VirtualDiskId', 1);
}

sub QueryIpPools {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['dc', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryIpPools', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'IpPool', 1);
}

sub CreateIpPool {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['dc', 'ManagedObjectReference'],['pool', 'IpPool'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateIpPool', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateIpPool {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['dc', 'ManagedObjectReference'],['pool', 'IpPool'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateIpPool', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DestroyIpPool {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['dc', 'ManagedObjectReference'],['id', undef],['force', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DestroyIpPool', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub AllocateIpv4Address {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['dc', 'ManagedObjectReference'],['poolId', undef],['allocationId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AllocateIpv4Address', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub AllocateIpv6Address {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['dc', 'ManagedObjectReference'],['poolId', undef],['allocationId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AllocateIpv6Address', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ReleaseIpAllocation {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['dc', 'ManagedObjectReference'],['poolId', undef],['allocationId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReleaseIpAllocation', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryIPAllocations {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['dc', 'ManagedObjectReference'],['poolId', undef],['extensionKey', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryIPAllocations', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'IpPoolManagerIpAllocation', 1);
}

sub UpdateAssignedLicense {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', undef],['licenseKey', undef],['entityDisplayName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateAssignedLicense', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'LicenseManagerLicenseInfo', 0);
}

sub RemoveAssignedLicense {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entityId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveAssignedLicense', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryAssignedLicenses {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entityId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryAssignedLicenses', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'LicenseAssignmentManagerLicenseAssignment', 1);
}

sub QuerySupportedFeatures {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QuerySupportedFeatures', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'LicenseFeatureInfo', 1);
}

sub QueryLicenseSourceAvailability {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryLicenseSourceAvailability', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'LicenseAvailabilityInfo', 1);
}

sub QueryLicenseUsage {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryLicenseUsage', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'LicenseUsageInfo', 0);
}

sub SetLicenseEdition {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['featureKey', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SetLicenseEdition', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CheckLicenseFeature {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['featureKey', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CheckLicenseFeature', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub EnableFeature {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['featureKey', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('EnableFeature', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DisableFeature {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['featureKey', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DisableFeature', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ConfigureLicenseSource {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['licenseSource', 'LicenseSource'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ConfigureLicenseSource', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateLicense {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['licenseKey', undef],['labels', 'KeyValue'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateLicense', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'LicenseManagerLicenseInfo', 0);
}

sub AddLicense {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['licenseKey', undef],['labels', 'KeyValue'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AddLicense', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'LicenseManagerLicenseInfo', 0);
}

sub RemoveLicense {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['licenseKey', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveLicense', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DecodeLicense {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['licenseKey', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DecodeLicense', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'LicenseManagerLicenseInfo', 0);
}

sub UpdateLicenseLabel {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['licenseKey', undef],['labelKey', undef],['labelValue', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateLicenseLabel', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RemoveLicenseLabel {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['licenseKey', undef],['labelKey', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveLicenseLabel', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub Reload {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('Reload', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub Rename_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['newName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('Rename_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub Destroy_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('Destroy_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub DestroyNetwork {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DestroyNetwork', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub LookupVmOverheadMemory {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('LookupVmOverheadMemory', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ValidateHost {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['ovfDescriptor', undef],['host', 'ManagedObjectReference'],['vhp', 'OvfValidateHostParams'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ValidateHost', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'OvfValidateHostResult', 0);
}

sub ParseDescriptor {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['ovfDescriptor', undef],['pdp', 'OvfParseDescriptorParams'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ParseDescriptor', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'OvfParseDescriptorResult', 0);
}

sub CreateImportSpec {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['ovfDescriptor', undef],['resourcePool', 'ManagedObjectReference'],['datastore', 'ManagedObjectReference'],['cisp', 'OvfCreateImportSpecParams'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateImportSpec', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'OvfCreateImportSpecResult', 0);
}

sub CreateDescriptor {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['obj', 'ManagedObjectReference'],['cdp', 'OvfCreateDescriptorParams'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateDescriptor', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'OvfCreateDescriptorResult', 0);
}

sub QueryPerfProviderSummary {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryPerfProviderSummary', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'PerfProviderSummary', 0);
}

sub QueryAvailablePerfMetric {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],['beginTime', undef],['endTime', undef],['intervalId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryAvailablePerfMetric', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'PerfMetricId', 1);
}

sub QueryPerfCounter {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['counterId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryPerfCounter', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'PerfCounterInfo', 1);
}

sub QueryPerfCounterByLevel {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['level', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryPerfCounterByLevel', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'PerfCounterInfo', 1);
}

sub QueryPerf {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['querySpec', 'PerfQuerySpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryPerf', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'PerfEntityMetricBase', 1);
}

sub QueryPerfComposite {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['querySpec', 'PerfQuerySpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryPerfComposite', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'PerfCompositeMetric', 0);
}

sub CreatePerfInterval {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['intervalId', 'PerfInterval'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreatePerfInterval', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RemovePerfInterval {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['samplePeriod', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemovePerfInterval', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdatePerfInterval {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['interval', 'PerfInterval'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdatePerfInterval', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateCounterLevelMapping {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['counterLevelMap', 'PerformanceManagerCounterLevelMapping'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateCounterLevelMapping', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ResetCounterLevelMapping {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['counters', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ResetCounterLevelMapping', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub EstimateDatabaseSize {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['dbSizeParam', 'DatabaseSizeParam'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('EstimateDatabaseSize', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'DatabaseSizeEstimate', 0);
}

sub UpdateConfig {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['config', 'ResourceConfigSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateConfig', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub MoveIntoResourcePool {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['list', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MoveIntoResourcePool', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateChildResourceConfiguration {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'ResourceConfigSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateChildResourceConfiguration', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CreateResourcePool {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['spec', 'ResourceConfigSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateResourcePool', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub DestroyChildren {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DestroyChildren', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CreateVApp {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['resSpec', 'ResourceConfigSpec'],['configSpec', 'VAppConfigSpec'],['vmFolder', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateVApp', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CreateChildVM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['config', 'VirtualMachineConfigSpec'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateChildVM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RegisterChildVM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['path', undef],['name', undef],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RegisterChildVM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ImportVApp {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'ImportSpec'],['folder', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ImportVApp', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub QueryResourceConfigOption {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryResourceConfigOption', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ResourceConfigOption', 0);
}

sub RefreshRuntime {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RefreshRuntime', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub FindByUuid {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datacenter', 'ManagedObjectReference'],['uuid', undef],['vmSearch', undef],['instanceUuid', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('FindByUuid', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub FindByDatastorePath {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datacenter', 'ManagedObjectReference'],['path', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('FindByDatastorePath', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub FindByDnsName {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datacenter', 'ManagedObjectReference'],['dnsName', undef],['vmSearch', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('FindByDnsName', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub FindByIp {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datacenter', 'ManagedObjectReference'],['ip', undef],['vmSearch', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('FindByIp', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub FindByInventoryPath {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['inventoryPath', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('FindByInventoryPath', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub FindChild {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],['name', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('FindChild', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub FindAllByUuid {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datacenter', 'ManagedObjectReference'],['uuid', undef],['vmSearch', undef],['instanceUuid', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('FindAllByUuid', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 1);
}

sub FindAllByDnsName {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datacenter', 'ManagedObjectReference'],['dnsName', undef],['vmSearch', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('FindAllByDnsName', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 1);
}

sub FindAllByIp {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datacenter', 'ManagedObjectReference'],['ip', undef],['vmSearch', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('FindAllByIp', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 1);
}

sub CurrentTime {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CurrentTime', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RetrieveServiceContent {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveServiceContent', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ServiceContent', 0);
}

sub ValidateMigration {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['state', 'VirtualMachinePowerState'],['testType', undef],['pool', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ValidateMigration', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'Event', 1);
}

sub QueryVMotionCompatibility {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['compatibility', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryVMotionCompatibility', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostVMotionCompatibility', 1);
}

sub RetrieveProductComponents {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveProductComponents', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ProductComponentInfo', 1);
}

sub QueryServiceList {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['serviceName', undef],['location', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryServiceList', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ServiceManagerServiceInfo', 1);
}

sub UpdateServiceMessage {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['message', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateServiceMessage', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub LoginByToken {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['locale', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('LoginByToken', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'UserSession', 0);
}

sub Login {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['userName', undef],['password', undef],['locale', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('Login', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'UserSession', 0);
}

sub LoginBySSPI {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['base64Token', undef],['locale', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('LoginBySSPI', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'UserSession', 0);
}

sub Logout {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('Logout', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub AcquireLocalTicket {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['userName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AcquireLocalTicket', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'SessionManagerLocalTicket', 0);
}

sub AcquireGenericServiceTicket {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'SessionManagerServiceRequestSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AcquireGenericServiceTicket', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'SessionManagerGenericServiceTicket', 0);
}

sub TerminateSession {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['sessionId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('TerminateSession', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub SetLocale {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['locale', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SetLocale', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub LoginExtensionBySubjectName {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['extensionKey', undef],['locale', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('LoginExtensionBySubjectName', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'UserSession', 0);
}

sub LoginExtensionByCertificate {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['extensionKey', undef],['locale', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('LoginExtensionByCertificate', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'UserSession', 0);
}

sub ImpersonateUser {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['userName', undef],['locale', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ImpersonateUser', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'UserSession', 0);
}

sub SessionIsActive {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['sessionID', undef],['userName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SessionIsActive', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub AcquireCloneTicket {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AcquireCloneTicket', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CloneSession {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['cloneTicket', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CloneSession', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'UserSession', 0);
}

sub ExecuteSimpleCommand {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['arguments', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ExecuteSimpleCommand', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ConfigureDatastoreIORM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datastore', 'ManagedObjectReference'],['spec', 'StorageIORMConfigSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ConfigureDatastoreIORM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub QueryIORMConfigOption {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryIORMConfigOption', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'StorageIORMConfigOption', 0);
}

sub QueryDatastorePerformanceSummary {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datastore', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryDatastorePerformanceSummary', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'StoragePerformanceSummary', 1);
}

sub ApplyStorageDrsRecommendationToPod_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['pod', 'ManagedObjectReference'],['key', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ApplyStorageDrsRecommendationToPod_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ApplyStorageDrsRecommendation_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['key', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ApplyStorageDrsRecommendation_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CancelStorageDrsRecommendation {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['key', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CancelStorageDrsRecommendation', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RefreshStorageDrsRecommendation {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['pod', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RefreshStorageDrsRecommendation', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ConfigureStorageDrsForPod_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['pod', 'ManagedObjectReference'],['spec', 'StorageDrsConfigSpec'],['modify', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ConfigureStorageDrsForPod_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RecommendDatastores {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['storageSpec', 'StoragePlacementSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RecommendDatastores', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'StoragePlacementResult', 0);
}

sub CancelTask {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CancelTask', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateProgress {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['percentDone', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateProgress', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub SetTaskState {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['state', 'TaskInfoState'],['result', undef],['fault', 'LocalizedMethodFault'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SetTaskState', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub SetTaskDescription {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['description', 'LocalizableMessage'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SetTaskDescription', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ReadNextTasks {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['maxCount', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReadNextTasks', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'TaskInfo', 1);
}

sub ReadPreviousTasks {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['maxCount', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReadPreviousTasks', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'TaskInfo', 1);
}

sub CreateCollectorForTasks {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['filter', 'TaskFilterSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateCollectorForTasks', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CreateTask {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['obj', 'ManagedObjectReference'],['taskTypeId', undef],['initiatedBy', undef],['cancelable', undef],['parentTaskKey', undef],['activationId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateTask', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'TaskInfo', 0);
}

sub RetrieveUserGroups {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['domain', undef],['searchStr', undef],['belongsToGroup', undef],['belongsToUser', undef],['exactMatch', undef],['findUsers', undef],['findGroups', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveUserGroups', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'UserSearchResult', 1);
}

sub UpdateVAppConfig {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'VAppConfigSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateVAppConfig', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateLinkedChildren {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['addChangeSet', 'VirtualAppLinkInfo'],['removeSet', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateLinkedChildren', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CloneVApp_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['target', 'ManagedObjectReference'],['spec', 'VAppCloneSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CloneVApp_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ExportVApp {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ExportVApp', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub PowerOnVApp_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('PowerOnVApp_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub PowerOffVApp_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['force', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('PowerOffVApp_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub SuspendVApp_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SuspendVApp_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub unregisterVApp_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('unregisterVApp_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CreateVirtualDisk_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['datacenter', 'ManagedObjectReference'],['spec', 'VirtualDiskSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateVirtualDisk_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub DeleteVirtualDisk_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['datacenter', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DeleteVirtualDisk_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub MoveVirtualDisk_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['sourceName', undef],['sourceDatacenter', 'ManagedObjectReference'],['destName', undef],['destDatacenter', 'ManagedObjectReference'],['force', undef],['profile', 'VirtualMachineProfileSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MoveVirtualDisk_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CopyVirtualDisk_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['sourceName', undef],['sourceDatacenter', 'ManagedObjectReference'],['destName', undef],['destDatacenter', 'ManagedObjectReference'],['destSpec', 'VirtualDiskSpec'],['force', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CopyVirtualDisk_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ExtendVirtualDisk_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['datacenter', 'ManagedObjectReference'],['newCapacityKb', undef],['eagerZero', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ExtendVirtualDisk_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub QueryVirtualDiskFragmentation {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['datacenter', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryVirtualDiskFragmentation', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DefragmentVirtualDisk_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['datacenter', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DefragmentVirtualDisk_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ShrinkVirtualDisk_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['datacenter', 'ManagedObjectReference'],['copy', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ShrinkVirtualDisk_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub InflateVirtualDisk_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['datacenter', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('InflateVirtualDisk_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub EagerZeroVirtualDisk_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['datacenter', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('EagerZeroVirtualDisk_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ZeroFillVirtualDisk_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['datacenter', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ZeroFillVirtualDisk_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub SetVirtualDiskUuid {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['datacenter', 'ManagedObjectReference'],['uuid', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SetVirtualDiskUuid', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryVirtualDiskUuid {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['datacenter', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryVirtualDiskUuid', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryVirtualDiskGeometry {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['datacenter', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryVirtualDiskGeometry', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostDiskDimensionsChs', 0);
}

sub ImportUnmanagedSnapshot {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vdisk', undef],['datacenter', 'ManagedObjectReference'],['vvolId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ImportUnmanagedSnapshot', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ReleaseManagedSnapshot {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vdisk', undef],['datacenter', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReleaseManagedSnapshot', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RefreshStorageInfo {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RefreshStorageInfo', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CreateSnapshot_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['description', undef],['memory', undef],['quiesce', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateSnapshot_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CreateSnapshotEx_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['description', undef],['memory', undef],['quiesceSpec', 'VirtualMachineGuestQuiesceSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateSnapshotEx_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RevertToCurrentSnapshot_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['suppressPowerOn', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RevertToCurrentSnapshot_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RemoveAllSnapshots_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['consolidate', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveAllSnapshots_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ConsolidateVMDisks_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ConsolidateVMDisks_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub EstimateStorageForConsolidateSnapshots_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('EstimateStorageForConsolidateSnapshots_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ReconfigVM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'VirtualMachineConfigSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReconfigVM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub UpgradeVM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['version', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpgradeVM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ExtractOvfEnvironment {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ExtractOvfEnvironment', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub PowerOnVM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('PowerOnVM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub PowerOffVM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('PowerOffVM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub SuspendVM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SuspendVM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ResetVM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ResetVM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ShutdownGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ShutdownGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RebootGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RebootGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub StandbyGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('StandbyGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub AnswerVM {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['questionId', undef],['answerChoice', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AnswerVM', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CustomizeVM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'CustomizationSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CustomizeVM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CheckCustomizationSpec {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'CustomizationSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CheckCustomizationSpec', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub MigrateVM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['pool', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['priority', 'VirtualMachineMovePriority'],['state', 'VirtualMachinePowerState'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MigrateVM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RelocateVM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'VirtualMachineRelocateSpec'],['priority', 'VirtualMachineMovePriority'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RelocateVM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CloneVM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['folder', 'ManagedObjectReference'],['name', undef],['spec', 'VirtualMachineCloneSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CloneVM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ExportVm {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ExportVm', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub MarkAsTemplate {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MarkAsTemplate', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub MarkAsVirtualMachine {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['pool', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MarkAsVirtualMachine', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UnregisterVM {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UnregisterVM', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ResetGuestInformation {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ResetGuestInformation', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub MountToolsInstaller {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MountToolsInstaller', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UnmountToolsInstaller {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UnmountToolsInstaller', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpgradeTools_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['installerOptions', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpgradeTools_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub AcquireMksTicket {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AcquireMksTicket', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VirtualMachineMksTicket', 0);
}

sub AcquireTicket {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['ticketType', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AcquireTicket', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VirtualMachineTicket', 0);
}

sub SetScreenResolution {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['width', undef],['height', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SetScreenResolution', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DefragmentAllDisks {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DefragmentAllDisks', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CreateSecondaryVM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateSecondaryVM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CreateSecondaryVMEx_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['spec', 'FaultToleranceConfigSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateSecondaryVMEx_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub TurnOffFaultToleranceForVM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('TurnOffFaultToleranceForVM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub MakePrimaryVM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MakePrimaryVM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub TerminateFaultTolerantVM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('TerminateFaultTolerantVM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub DisableSecondaryVM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DisableSecondaryVM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub EnableSecondaryVM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('EnableSecondaryVM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub SetDisplayTopology {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['displays', 'VirtualMachineDisplayTopology'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SetDisplayTopology', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub StartRecording_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['description', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('StartRecording_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub StopRecording_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('StopRecording_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub StartReplaying_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['replaySnapshot', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('StartReplaying_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub StopReplaying_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('StopReplaying_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub PromoteDisks_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['unlink', undef],['disks', 'VirtualDisk'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('PromoteDisks_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CreateScreenshot_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateScreenshot_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub PutUsbScanCodes {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'UsbScanCodeSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('PutUsbScanCodes', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryChangedDiskAreas {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['snapshot', 'ManagedObjectReference'],['deviceKey', undef],['startOffset', undef],['changeId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryChangedDiskAreas', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'DiskChangeInfo', 0);
}

sub QueryUnownedFiles {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryUnownedFiles', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 1);
}

sub reloadVirtualMachineFromPath_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['configurationPath', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('reloadVirtualMachineFromPath_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub QueryFaultToleranceCompatibility {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryFaultToleranceCompatibility', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'LocalizedMethodFault', 1);
}

sub QueryFaultToleranceCompatibilityEx {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['forLegacyFt', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryFaultToleranceCompatibilityEx', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'LocalizedMethodFault', 1);
}

sub TerminateVM {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('TerminateVM', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub SendNMI {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SendNMI', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub AttachDisk_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['diskId', 'ID'],['datastore', 'ManagedObjectReference'],['controllerKey', undef],['unitNumber', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AttachDisk_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub DetachDisk_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['diskId', 'ID'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DetachDisk_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub PerformVsanUpgradePreflightCheck {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['cluster', 'ManagedObjectReference'],['downgradeFormat', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('PerformVsanUpgradePreflightCheck', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VsanUpgradeSystemPreflightCheckResult', 0);
}

sub QueryVsanUpgradeStatus {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['cluster', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryVsanUpgradeStatus', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VsanUpgradeSystemUpgradeStatus', 0);
}

sub PerformVsanUpgrade_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['cluster', 'ManagedObjectReference'],['performObjectUpgrade', undef],['downgradeFormat', undef],['allowReducedRedundancy', undef],['excludeHosts', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('PerformVsanUpgrade_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RemoveAlarm {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveAlarm', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ReconfigureAlarm {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'AlarmSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReconfigureAlarm', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CreateAlarm {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],['spec', 'AlarmSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateAlarm', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub GetAlarm {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('GetAlarm', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 1);
}

sub AreAlarmActionsEnabled {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AreAlarmActionsEnabled', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub EnableAlarmActions {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],['enabled', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('EnableAlarmActions', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub GetAlarmState {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('GetAlarmState', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'AlarmState', 1);
}

sub AcknowledgeAlarm {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['alarm', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AcknowledgeAlarm', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ConfigureEvcMode_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['evcModeKey', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ConfigureEvcMode_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub DisableEvcMode_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DisableEvcMode_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CheckConfigureEvcMode_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['evcModeKey', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CheckConfigureEvcMode_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CheckAddHostEvc_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['cnxSpec', 'HostConnectSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CheckAddHostEvc_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ReconfigureDVPortgroup_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'DVPortgroupConfigSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReconfigureDVPortgroup_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub DVPortgroupRollback_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entityBackup', 'EntityBackupConfig'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DVPortgroupRollback_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub QueryAvailableDvsSpec {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['recommended', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryAvailableDvsSpec', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'DistributedVirtualSwitchProductSpec', 1);
}

sub QueryCompatibleHostForNewDvs {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['container', 'ManagedObjectReference'],['recursive', undef],['switchProductSpec', 'DistributedVirtualSwitchProductSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryCompatibleHostForNewDvs', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 1);
}

sub QueryCompatibleHostForExistingDvs {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['container', 'ManagedObjectReference'],['recursive', undef],['dvs', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryCompatibleHostForExistingDvs', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 1);
}

sub QueryDvsCompatibleHostSpec {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['switchProductSpec', 'DistributedVirtualSwitchProductSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryDvsCompatibleHostSpec', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'DistributedVirtualSwitchHostProductSpec', 1);
}

sub QueryDvsFeatureCapability {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['switchProductSpec', 'DistributedVirtualSwitchProductSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryDvsFeatureCapability', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'DVSFeatureCapability', 0);
}

sub QueryDvsByUuid {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['uuid', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryDvsByUuid', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub QueryDvsConfigTarget {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['dvs', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryDvsConfigTarget', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'DVSManagerDvsConfigTarget', 0);
}

sub QueryDvsCheckCompatibility {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['hostContainer', 'DistributedVirtualSwitchManagerHostContainer'],['dvsProductSpec', 'DistributedVirtualSwitchManagerDvsProductSpec'],['hostFilterSpec', 'DistributedVirtualSwitchManagerHostDvsFilterSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryDvsCheckCompatibility', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'DistributedVirtualSwitchManagerCompatibilityResult', 1);
}

sub RectifyDvsOnHost_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['hosts', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RectifyDvsOnHost_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub DVSManagerExportEntity_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['selectionSet', 'SelectionSet'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DVSManagerExportEntity_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub DVSManagerImportEntity_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entityBackup', 'EntityBackupConfig'],['importType', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DVSManagerImportEntity_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub DVSManagerLookupDvPortGroup {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['switchUuid', undef],['portgroupKey', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DVSManagerLookupDvPortGroup', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub UpdateDVSLacpGroupConfig_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['lacpGroupSpec', 'VMwareDvsLacpGroupSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateDVSLacpGroupConfig_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub AddKey {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['key', 'CryptoKeyPlain'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AddKey', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub AddKeys {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['keys', 'CryptoKeyPlain'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AddKeys', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'CryptoKeyResult', 1);
}

sub RemoveKey {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['key', 'CryptoKeyId'],['force', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveKey', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RemoveKeys {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['keys', 'CryptoKeyId'],['force', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveKeys', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'CryptoKeyResult', 1);
}

sub ListKeys {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['limit', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ListKeys', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'CryptoKeyId', 1);
}

sub RegisterKmipServer {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['server', 'KmipServerSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RegisterKmipServer', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub MarkDefault {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['clusterId', 'KeyProviderId'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MarkDefault', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateKmipServer {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['server', 'KmipServerSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateKmipServer', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RemoveKmipServer {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['clusterId', 'KeyProviderId'],['serverName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveKmipServer', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ListKmipServers {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['limit', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ListKmipServers', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'KmipClusterInfo', 1);
}

sub RetrieveKmipServersStatus_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['clusters', 'KmipClusterInfo'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveKmipServersStatus_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub GenerateKey {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['keyProvider', 'KeyProviderId'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('GenerateKey', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'CryptoKeyResult', 0);
}

sub RetrieveKmipServerCert {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['keyProvider', 'KeyProviderId'],['server', 'KmipServerInfo'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveKmipServerCert', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'CryptoManagerKmipServerCertInfo', 0);
}

sub UploadKmipServerCert {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['cluster', 'KeyProviderId'],['certificate', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UploadKmipServerCert', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub GenerateSelfSignedClientCert {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['cluster', 'KeyProviderId'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('GenerateSelfSignedClientCert', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub GenerateClientCsr {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['cluster', 'KeyProviderId'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('GenerateClientCsr', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RetrieveSelfSignedClientCert {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['cluster', 'KeyProviderId'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveSelfSignedClientCert', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RetrieveClientCsr {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['cluster', 'KeyProviderId'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveClientCsr', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RetrieveClientCert {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['cluster', 'KeyProviderId'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveClientCert', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateSelfSignedClientCert {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['cluster', 'KeyProviderId'],['certificate', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateSelfSignedClientCert', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateKmsSignedCsrClientCert {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['cluster', 'KeyProviderId'],['certificate', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateKmsSignedCsrClientCert', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UploadClientCert {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['cluster', 'KeyProviderId'],['certificate', undef],['privateKey', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UploadClientCert', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ReadNextEvents {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['maxCount', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReadNextEvents', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'Event', 1);
}

sub ReadPreviousEvents {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['maxCount', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReadPreviousEvents', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'Event', 1);
}

sub RetrieveArgumentDescription {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['eventTypeId', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveArgumentDescription', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'EventArgDesc', 1);
}

sub CreateCollectorForEvents {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['filter', 'EventFilterSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateCollectorForEvents', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub LogUserEvent {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],['msg', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('LogUserEvent', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryEvents {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['filter', 'EventFilterSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryEvents', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'Event', 1);
}

sub PostEvent {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['eventToPost', 'Event'],['taskInfo', 'TaskInfo'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('PostEvent', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub JoinDomain_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['domainName', undef],['userName', undef],['password', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('JoinDomain_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub JoinDomainWithCAM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['domainName', undef],['camServer', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('JoinDomainWithCAM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ImportCertificateForCAM_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['certPath', undef],['camServer', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ImportCertificateForCAM_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub LeaveCurrentDomain_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['force', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('LeaveCurrentDomain_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub EnableSmartCardAuthentication {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('EnableSmartCardAuthentication', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub InstallSmartCardTrustAnchor {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['cert', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('InstallSmartCardTrustAnchor', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ReplaceSmartCardTrustAnchors {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['certs', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReplaceSmartCardTrustAnchors', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RemoveSmartCardTrustAnchor {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['issuer', undef],['serial', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveSmartCardTrustAnchor', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RemoveSmartCardTrustAnchorByFingerprint {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['fingerprint', undef],['digest', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveSmartCardTrustAnchorByFingerprint', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ListSmartCardTrustAnchors {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ListSmartCardTrustAnchors', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 1);
}

sub DisableSmartCardAuthentication {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DisableSmartCardAuthentication', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ReconfigureAutostart {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'HostAutoStartManagerConfig'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReconfigureAutostart', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub AutoStartPowerOn {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AutoStartPowerOn', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub AutoStartPowerOff {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AutoStartPowerOff', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryBootDevices {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryBootDevices', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostBootDeviceInfo', 0);
}

sub UpdateBootDevice {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['key', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateBootDevice', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ConfigureHostCache_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'HostCacheConfigurationSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ConfigureHostCache_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub GenerateCertificateSigningRequest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['useIpAddressAsCommonName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('GenerateCertificateSigningRequest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub GenerateCertificateSigningRequestByDn {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['distinguishedName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('GenerateCertificateSigningRequestByDn', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub InstallServerCertificate {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['cert', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('InstallServerCertificate', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ReplaceCACertificatesAndCRLs {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['caCert', undef],['caCrl', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReplaceCACertificatesAndCRLs', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ListCACertificates {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ListCACertificates', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 1);
}

sub ListCACertificateRevocationLists {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ListCACertificateRevocationLists', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 1);
}

sub EnableHyperThreading {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('EnableHyperThreading', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DisableHyperThreading {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DisableHyperThreading', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub SearchDatastore_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datastorePath', undef],['searchSpec', 'HostDatastoreBrowserSearchSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SearchDatastore_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub SearchDatastoreSubFolders_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datastorePath', undef],['searchSpec', 'HostDatastoreBrowserSearchSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SearchDatastoreSubFolders_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub DeleteFile {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datastorePath', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DeleteFile', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateLocalSwapDatastore {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datastore', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateLocalSwapDatastore', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryAvailableDisksForVmfs {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datastore', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryAvailableDisksForVmfs', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostScsiDisk', 1);
}

sub QueryVmfsDatastoreCreateOptions {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['devicePath', undef],['vmfsMajorVersion', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryVmfsDatastoreCreateOptions', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VmfsDatastoreOption', 1);
}

sub CreateVmfsDatastore {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'VmfsDatastoreCreateSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateVmfsDatastore', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub QueryVmfsDatastoreExtendOptions {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datastore', 'ManagedObjectReference'],['devicePath', undef],['suppressExpandCandidates', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryVmfsDatastoreExtendOptions', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VmfsDatastoreOption', 1);
}

sub QueryVmfsDatastoreExpandOptions {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datastore', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryVmfsDatastoreExpandOptions', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VmfsDatastoreOption', 1);
}

sub ExtendVmfsDatastore {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datastore', 'ManagedObjectReference'],['spec', 'VmfsDatastoreExtendSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ExtendVmfsDatastore', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ExpandVmfsDatastore {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datastore', 'ManagedObjectReference'],['spec', 'VmfsDatastoreExpandSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ExpandVmfsDatastore', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CreateNasDatastore {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'HostNasVolumeSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateNasDatastore', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CreateLocalDatastore {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['path', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateLocalDatastore', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CreateVvolDatastore {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'HostDatastoreSystemVvolDatastoreSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateVvolDatastore', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RemoveDatastore {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datastore', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveDatastore', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RemoveDatastoreEx_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datastore', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveDatastoreEx_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ConfigureDatastorePrincipal {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['userName', undef],['password', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ConfigureDatastorePrincipal', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryUnresolvedVmfsVolumes {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryUnresolvedVmfsVolumes', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostUnresolvedVmfsVolume', 1);
}

sub ResignatureUnresolvedVmfsVolume_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['resolutionSpec', 'HostUnresolvedVmfsResignatureSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ResignatureUnresolvedVmfsVolume_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub UpdateDateTimeConfig {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['config', 'HostDateTimeConfig'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateDateTimeConfig', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryAvailableTimeZones {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryAvailableTimeZones', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostDateTimeSystemTimeZone', 1);
}

sub QueryDateTime {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryDateTime', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateDateTime {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['dateTime', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateDateTime', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RefreshDateTimeSystem {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RefreshDateTimeSystem', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryAvailablePartition {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryAvailablePartition', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostDiagnosticPartition', 1);
}

sub SelectActivePartition {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['partition', 'HostScsiDiskPartition'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SelectActivePartition', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryPartitionCreateOptions {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['storageType', undef],['diagnosticType', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryPartitionCreateOptions', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostDiagnosticPartitionCreateOption', 1);
}

sub QueryPartitionCreateDesc {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['diskUuid', undef],['diagnosticType', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryPartitionCreateDesc', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostDiagnosticPartitionCreateDescription', 0);
}

sub CreateDiagnosticPartition {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'HostDiagnosticPartitionCreateSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateDiagnosticPartition', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub EsxAgentHostManagerUpdateConfig {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['configInfo', 'HostEsxAgentHostManagerConfigInfo'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('EsxAgentHostManagerUpdateConfig', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateDefaultPolicy {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['defaultPolicy', 'HostFirewallDefaultPolicy'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateDefaultPolicy', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub EnableRuleset {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('EnableRuleset', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DisableRuleset {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DisableRuleset', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateRuleset {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', undef],['spec', 'HostFirewallRulesetRulesetSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateRuleset', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RefreshFirewall {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RefreshFirewall', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ResetFirmwareToFactoryDefaults {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ResetFirmwareToFactoryDefaults', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub BackupFirmwareConfiguration {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('BackupFirmwareConfiguration', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryFirmwareConfigUploadURL {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryFirmwareConfigUploadURL', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RestoreFirmwareConfiguration {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['force', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RestoreFirmwareConfiguration', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RefreshGraphicsManager {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RefreshGraphicsManager', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub IsSharedGraphicsActive {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('IsSharedGraphicsActive', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateGraphicsConfig {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['config', 'HostGraphicsConfig'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateGraphicsConfig', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RefreshHealthStatusSystem {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RefreshHealthStatusSystem', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ResetSystemHealthInfo {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ResetSystemHealthInfo', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ClearSystemEventLog {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ClearSystemEventLog', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub FetchSystemEventLog {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('FetchSystemEventLog', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'SystemEventInfo', 1);
}

sub RetrieveHostAccessControlEntries {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveHostAccessControlEntries', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostAccessControlEntry', 1);
}

sub ChangeAccessMode {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['principal', undef],['isGroup', undef],['accessMode', 'HostAccessMode'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ChangeAccessMode', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QuerySystemUsers {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QuerySystemUsers', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 1);
}

sub UpdateSystemUsers {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['users', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateSystemUsers', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryLockdownExceptions {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryLockdownExceptions', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 1);
}

sub UpdateLockdownExceptions {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['users', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateLockdownExceptions', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ChangeLockdownMode {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['mode', 'HostLockdownMode'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ChangeLockdownMode', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub HostImageConfigGetAcceptance {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HostImageConfigGetAcceptance', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub HostImageConfigGetProfile {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HostImageConfigGetProfile', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostImageProfileSummary', 0);
}

sub UpdateHostImageAcceptanceLevel {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['newAcceptanceLevel', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateHostImageAcceptanceLevel', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub fetchSoftwarePackages {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('fetchSoftwarePackages', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'SoftwarePackage', 1);
}

sub installDate {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('installDate', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryVnicStatus {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vnicDevice', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryVnicStatus', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'IscsiStatus', 0);
}

sub QueryPnicStatus {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['pnicDevice', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryPnicStatus', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'IscsiStatus', 0);
}

sub QueryBoundVnics {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['iScsiHbaName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryBoundVnics', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'IscsiPortInfo', 1);
}

sub QueryCandidateNics {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['iScsiHbaName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryCandidateNics', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'IscsiPortInfo', 1);
}

sub BindVnic {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['iScsiHbaName', undef],['vnicDevice', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('BindVnic', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UnbindVnic {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['iScsiHbaName', undef],['vnicDevice', undef],['force', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UnbindVnic', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryMigrationDependencies {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['pnicDevice', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryMigrationDependencies', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'IscsiMigrationDependency', 0);
}

sub QueryModules {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryModules', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'KernelModuleInfo', 1);
}

sub UpdateModuleOptionString {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['options', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateModuleOptionString', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryConfiguredModuleOptionString {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryConfiguredModuleOptionString', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CreateUser {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['user', 'HostAccountSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateUser', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateUser {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['user', 'HostAccountSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateUser', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CreateGroup {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['group', 'HostAccountSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateGroup', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RemoveUser {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['userName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveUser', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RemoveGroup {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['groupName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveGroup', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub AssignUserToGroup {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['user', undef],['group', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AssignUserToGroup', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UnassignUserFromGroup {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['user', undef],['group', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UnassignUserFromGroup', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ReconfigureServiceConsoleReservation {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['cfgBytes', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReconfigureServiceConsoleReservation', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ReconfigureVirtualMachineReservation {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'VirtualMachineMemoryReservationSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReconfigureVirtualMachineReservation', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateNetworkConfig {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['config', 'HostNetworkConfig'],['changeMode', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateNetworkConfig', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostNetworkConfigResult', 0);
}

sub UpdateDnsConfig {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['config', 'HostDnsConfig'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateDnsConfig', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateIpRouteConfig {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['config', 'HostIpRouteConfig'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateIpRouteConfig', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateConsoleIpRouteConfig {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['config', 'HostIpRouteConfig'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateConsoleIpRouteConfig', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateIpRouteTableConfig {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['config', 'HostIpRouteTableConfig'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateIpRouteTableConfig', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub AddVirtualSwitch {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vswitchName', undef],['spec', 'HostVirtualSwitchSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AddVirtualSwitch', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RemoveVirtualSwitch {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vswitchName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveVirtualSwitch', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateVirtualSwitch {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vswitchName', undef],['spec', 'HostVirtualSwitchSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateVirtualSwitch', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub AddPortGroup {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['portgrp', 'HostPortGroupSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AddPortGroup', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RemovePortGroup {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['pgName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemovePortGroup', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdatePortGroup {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['pgName', undef],['portgrp', 'HostPortGroupSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdatePortGroup', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdatePhysicalNicLinkSpeed {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['device', undef],['linkSpeed', 'PhysicalNicLinkInfo'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdatePhysicalNicLinkSpeed', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryNetworkHint {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['device', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryNetworkHint', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'PhysicalNicHintInfo', 1);
}

sub AddVirtualNic {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['portgroup', undef],['nic', 'HostVirtualNicSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AddVirtualNic', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RemoveVirtualNic {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['device', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveVirtualNic', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateVirtualNic {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['device', undef],['nic', 'HostVirtualNicSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateVirtualNic', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub AddServiceConsoleVirtualNic {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['portgroup', undef],['nic', 'HostVirtualNicSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AddServiceConsoleVirtualNic', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RemoveServiceConsoleVirtualNic {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['device', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveServiceConsoleVirtualNic', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateServiceConsoleVirtualNic {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['device', undef],['nic', 'HostVirtualNicSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateServiceConsoleVirtualNic', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RestartServiceConsoleVirtualNic {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['device', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RestartServiceConsoleVirtualNic', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RefreshNetworkSystem {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RefreshNetworkSystem', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CheckHostPatch_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['metaUrls', undef],['bundleUrls', undef],['spec', 'HostPatchManagerPatchManagerOperationSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CheckHostPatch_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ScanHostPatch_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['repository', 'HostPatchManagerLocator'],['updateID', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ScanHostPatch_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ScanHostPatchV2_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['metaUrls', undef],['bundleUrls', undef],['spec', 'HostPatchManagerPatchManagerOperationSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ScanHostPatchV2_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub StageHostPatch_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['metaUrls', undef],['bundleUrls', undef],['vibUrls', undef],['spec', 'HostPatchManagerPatchManagerOperationSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('StageHostPatch_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub InstallHostPatch_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['repository', 'HostPatchManagerLocator'],['updateID', undef],['force', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('InstallHostPatch_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub InstallHostPatchV2_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['metaUrls', undef],['bundleUrls', undef],['vibUrls', undef],['spec', 'HostPatchManagerPatchManagerOperationSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('InstallHostPatchV2_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub UninstallHostPatch_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['bulletinIds', undef],['spec', 'HostPatchManagerPatchManagerOperationSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UninstallHostPatch_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub QueryHostPatch_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'HostPatchManagerPatchManagerOperationSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryHostPatch_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub Refresh {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('Refresh', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdatePassthruConfig {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['config', 'HostPciPassthruConfig'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdatePassthruConfig', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ConfigurePowerPolicy {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['key', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ConfigurePowerPolicy', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateServicePolicy {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', undef],['policy', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateServicePolicy', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub StartService {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('StartService', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub StopService {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('StopService', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RestartService {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RestartService', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UninstallService {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UninstallService', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RefreshServices {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RefreshServices', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ReconfigureSnmpAgent {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'HostSnmpConfigSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReconfigureSnmpAgent', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub SendTestNotification {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SendTestNotification', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RetrieveDiskPartitionInfo {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['devicePath', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveDiskPartitionInfo', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostDiskPartitionInfo', 1);
}

sub ComputeDiskPartitionInfo {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['devicePath', undef],['layout', 'HostDiskPartitionLayout'],['partitionFormat', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ComputeDiskPartitionInfo', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostDiskPartitionInfo', 0);
}

sub ComputeDiskPartitionInfoForResize {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['partition', 'HostScsiDiskPartition'],['blockRange', 'HostDiskPartitionBlockRange'],['partitionFormat', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ComputeDiskPartitionInfoForResize', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostDiskPartitionInfo', 0);
}

sub UpdateDiskPartitions {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['devicePath', undef],['spec', 'HostDiskPartitionSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateDiskPartitions', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub FormatVmfs {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['createSpec', 'HostVmfsSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('FormatVmfs', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostVmfsVolume', 0);
}

sub MountVmfsVolume {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vmfsUuid', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MountVmfsVolume', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UnmountVmfsVolume {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vmfsUuid', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UnmountVmfsVolume', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UnmountVmfsVolumeEx_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vmfsUuid', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UnmountVmfsVolumeEx_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub MountVmfsVolumeEx_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vmfsUuid', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MountVmfsVolumeEx_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub UnmapVmfsVolumeEx_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vmfsUuid', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UnmapVmfsVolumeEx_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub DeleteVmfsVolumeState {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vmfsUuid', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DeleteVmfsVolumeState', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RescanVmfs {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RescanVmfs', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub AttachVmfsExtent {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vmfsPath', undef],['extent', 'HostScsiDiskPartition'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AttachVmfsExtent', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ExpandVmfsExtent {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vmfsPath', undef],['extent', 'HostScsiDiskPartition'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ExpandVmfsExtent', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpgradeVmfs {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vmfsPath', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpgradeVmfs', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpgradeVmLayout {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpgradeVmLayout', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryUnresolvedVmfsVolume {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryUnresolvedVmfsVolume', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostUnresolvedVmfsVolume', 1);
}

sub ResolveMultipleUnresolvedVmfsVolumes {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['resolutionSpec', 'HostUnresolvedVmfsResolutionSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ResolveMultipleUnresolvedVmfsVolumes', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostUnresolvedVmfsResolutionResult', 1);
}

sub ResolveMultipleUnresolvedVmfsVolumesEx_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['resolutionSpec', 'HostUnresolvedVmfsResolutionSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ResolveMultipleUnresolvedVmfsVolumesEx_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub UnmountForceMountedVmfsVolume {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vmfsUuid', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UnmountForceMountedVmfsVolume', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RescanHba {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['hbaDevice', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RescanHba', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RescanAllHba {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RescanAllHba', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateSoftwareInternetScsiEnabled {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['enabled', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateSoftwareInternetScsiEnabled', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateInternetScsiDiscoveryProperties {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['iScsiHbaDevice', undef],['discoveryProperties', 'HostInternetScsiHbaDiscoveryProperties'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateInternetScsiDiscoveryProperties', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateInternetScsiAuthenticationProperties {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['iScsiHbaDevice', undef],['authenticationProperties', 'HostInternetScsiHbaAuthenticationProperties'],['targetSet', 'HostInternetScsiHbaTargetSet'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateInternetScsiAuthenticationProperties', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateInternetScsiDigestProperties {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['iScsiHbaDevice', undef],['targetSet', 'HostInternetScsiHbaTargetSet'],['digestProperties', 'HostInternetScsiHbaDigestProperties'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateInternetScsiDigestProperties', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateInternetScsiAdvancedOptions {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['iScsiHbaDevice', undef],['targetSet', 'HostInternetScsiHbaTargetSet'],['options', 'HostInternetScsiHbaParamValue'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateInternetScsiAdvancedOptions', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateInternetScsiIPProperties {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['iScsiHbaDevice', undef],['ipProperties', 'HostInternetScsiHbaIPProperties'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateInternetScsiIPProperties', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateInternetScsiName {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['iScsiHbaDevice', undef],['iScsiName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateInternetScsiName', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateInternetScsiAlias {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['iScsiHbaDevice', undef],['iScsiAlias', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateInternetScsiAlias', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub AddInternetScsiSendTargets {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['iScsiHbaDevice', undef],['targets', 'HostInternetScsiHbaSendTarget'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AddInternetScsiSendTargets', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RemoveInternetScsiSendTargets {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['iScsiHbaDevice', undef],['targets', 'HostInternetScsiHbaSendTarget'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveInternetScsiSendTargets', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub AddInternetScsiStaticTargets {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['iScsiHbaDevice', undef],['targets', 'HostInternetScsiHbaStaticTarget'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AddInternetScsiStaticTargets', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RemoveInternetScsiStaticTargets {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['iScsiHbaDevice', undef],['targets', 'HostInternetScsiHbaStaticTarget'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveInternetScsiStaticTargets', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub EnableMultipathPath {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['pathName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('EnableMultipathPath', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DisableMultipathPath {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['pathName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DisableMultipathPath', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub SetMultipathLunPolicy {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['lunId', undef],['policy', 'HostMultipathInfoLogicalUnitPolicy'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SetMultipathLunPolicy', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryPathSelectionPolicyOptions {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryPathSelectionPolicyOptions', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostPathSelectionPolicyOption', 1);
}

sub QueryStorageArrayTypePolicyOptions {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryStorageArrayTypePolicyOptions', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostStorageArrayTypePolicyOption', 1);
}

sub UpdateScsiLunDisplayName {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['lunUuid', undef],['displayName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateScsiLunDisplayName', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DetachScsiLun {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['lunUuid', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DetachScsiLun', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DetachScsiLunEx_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['lunUuid', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DetachScsiLunEx_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub DeleteScsiLunState {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['lunCanonicalName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DeleteScsiLunState', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub AttachScsiLun {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['lunUuid', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AttachScsiLun', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub AttachScsiLunEx_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['lunUuid', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AttachScsiLunEx_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RefreshStorageSystem {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RefreshStorageSystem', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DiscoverFcoeHbas {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['fcoeSpec', 'FcoeConfigFcoeSpecification'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DiscoverFcoeHbas', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub MarkForRemoval {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['hbaName', undef],['remove', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MarkForRemoval', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub FormatVffs {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['createSpec', 'HostVffsSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('FormatVffs', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostVffsVolume', 0);
}

sub ExtendVffs {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vffsPath', undef],['devicePath', undef],['spec', 'HostDiskPartitionSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ExtendVffs', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DestroyVffs {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vffsPath', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DestroyVffs', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub MountVffsVolume {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vffsUuid', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MountVffsVolume', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UnmountVffsVolume {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vffsUuid', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UnmountVffsVolume', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DeleteVffsVolumeState {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vffsUuid', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DeleteVffsVolumeState', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RescanVffs {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RescanVffs', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryAvailableSsds {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vffsPath', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryAvailableSsds', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostScsiDisk', 1);
}

sub SetNFSUser {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['user', undef],['password', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SetNFSUser', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ChangeNFSUserPassword {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['password', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ChangeNFSUserPassword', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryNFSUser {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryNFSUser', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostNasVolumeUserInfo', 0);
}

sub ClearNFSUser {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ClearNFSUser', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub TurnDiskLocatorLedOn_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['scsiDiskUuids', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('TurnDiskLocatorLedOn_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub TurnDiskLocatorLedOff_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['scsiDiskUuids', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('TurnDiskLocatorLedOff_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub MarkAsSsd_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['scsiDiskUuid', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MarkAsSsd_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub MarkAsNonSsd_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['scsiDiskUuid', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MarkAsNonSsd_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub MarkAsLocal_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['scsiDiskUuid', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MarkAsLocal_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub MarkAsNonLocal_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['scsiDiskUuid', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MarkAsNonLocal_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub UpdateVmfsUnmapPriority {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vmfsUuid', undef],['unmapPriority', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateVmfsUnmapPriority', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryVmfsConfigOption {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryVmfsConfigOption', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VmfsConfigOption', 1);
}

sub ConfigureVFlashResourceEx_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['devicePath', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ConfigureVFlashResourceEx_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub HostConfigureVFlashResource {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'HostVFlashManagerVFlashResourceConfigSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HostConfigureVFlashResource', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub HostRemoveVFlashResource {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HostRemoveVFlashResource', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub HostConfigVFlashCache {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'HostVFlashManagerVFlashCacheConfigSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HostConfigVFlashCache', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub HostGetVFlashModuleDefaultConfig {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vFlashModule', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HostGetVFlashModuleDefaultConfig', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VirtualDiskVFlashCacheConfigInfo', 0);
}

sub UpdateIpConfig {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['ipConfig', 'HostIpConfig'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateIpConfig', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub SelectVnic {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['device', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SelectVnic', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DeselectVnic {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DeselectVnic', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryNetConfig {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['nicType', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryNetConfig', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VirtualNicManagerNetConfig', 0);
}

sub SelectVnicForNicType {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['nicType', undef],['device', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SelectVnicForNicType', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DeselectVnicForNicType {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['nicType', undef],['device', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DeselectVnicForNicType', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryCmmds {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['queries', 'HostVsanInternalSystemCmmdsQuery'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryCmmds', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryPhysicalVsanDisks {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['props', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryPhysicalVsanDisks', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryVsanObjects {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['uuids', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryVsanObjects', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryObjectsOnPhysicalVsanDisk {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['disks', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryObjectsOnPhysicalVsanDisk', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub AbdicateDomOwnership {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['uuids', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AbdicateDomOwnership', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 1);
}

sub QueryVsanStatistics {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['labels', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryVsanStatistics', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ReconfigureDomObject {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['uuid', undef],['policy', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReconfigureDomObject', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QuerySyncingVsanObjects {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['uuids', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QuerySyncingVsanObjects', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RunVsanPhysicalDiskDiagnostics {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['disks', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RunVsanPhysicalDiskDiagnostics', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostVsanInternalSystemVsanPhysicalDiskDiagnosticsResult', 1);
}

sub GetVsanObjExtAttrs {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['uuids', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('GetVsanObjExtAttrs', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ReconfigurationSatisfiable {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['pcbs', 'VsanPolicyChangeBatch'],['ignoreSatisfiability', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReconfigurationSatisfiable', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VsanPolicySatisfiability', 1);
}

sub CanProvisionObjects {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['npbs', 'VsanNewPolicyBatch'],['ignoreSatisfiability', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CanProvisionObjects', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VsanPolicySatisfiability', 1);
}

sub DeleteVsanObjects {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['uuids', undef],['force', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DeleteVsanObjects', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostVsanInternalSystemDeleteVsanObjectsResult', 1);
}

sub UpgradeVsanObjects {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['uuids', undef],['newVersion', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpgradeVsanObjects', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostVsanInternalSystemVsanObjectOperationResult', 1);
}

sub QueryVsanObjectUuidsByFilter {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['uuids', undef],['limit', undef],['version', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryVsanObjectUuidsByFilter', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 1);
}

sub QueryDisksForVsan {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['canonicalName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryDisksForVsan', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VsanHostDiskResult', 1);
}

sub AddDisks_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['disk', 'HostScsiDisk'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AddDisks_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub InitializeDisks_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['mapping', 'VsanHostDiskMapping'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('InitializeDisks_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RemoveDisk_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['disk', 'HostScsiDisk'],['maintenanceSpec', 'HostMaintenanceSpec'],['timeout', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveDisk_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RemoveDiskMapping_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['mapping', 'VsanHostDiskMapping'],['maintenanceSpec', 'HostMaintenanceSpec'],['timeout', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveDiskMapping_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub UnmountDiskMapping_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['mapping', 'VsanHostDiskMapping'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UnmountDiskMapping_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub UpdateVsan_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['config', 'VsanHostConfigInfo'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateVsan_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub QueryHostStatus {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryHostStatus', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VsanHostClusterStatus', 0);
}

sub EvacuateVsanNode_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['maintenanceSpec', 'HostMaintenanceSpec'],['timeout', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('EvacuateVsanNode_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RecommissionVsanNode_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RecommissionVsanNode_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub QueryOptions {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryOptions', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'OptionValue', 1);
}

sub UpdateOptions {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['changedValue', 'OptionValue'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateOptions', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CheckCompliance_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['profile', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CheckCompliance_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub QueryComplianceStatus {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['profile', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryComplianceStatus', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ComplianceResult', 1);
}

sub ClearComplianceStatus {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['profile', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ClearComplianceStatus', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub QueryExpressionMetadata {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['expressionName', undef],['profile', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryExpressionMetadata', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ProfileExpressionMetadata', 1);
}

sub RetrieveDescription {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveDescription', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ProfileDescription', 0);
}

sub DestroyProfile {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DestroyProfile', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub AssociateProfile {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AssociateProfile', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DissociateProfile {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DissociateProfile', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CheckProfileCompliance_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CheckProfileCompliance_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ExportProfile {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ExportProfile', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CreateProfile {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['createSpec', 'ProfileCreateSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateProfile', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub QueryPolicyMetadata {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['policyName', undef],['profile', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryPolicyMetadata', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ProfilePolicyMetadata', 1);
}

sub FindAssociatedProfile {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('FindAssociatedProfile', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 1);
}

sub UpdateClusterProfile {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['config', 'ClusterProfileConfigSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateClusterProfile', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateReferenceHost {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateReferenceHost', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateHostProfile {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['config', 'HostProfileConfigSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateHostProfile', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ExecuteHostProfile {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['deferredParam', 'ProfileDeferredPolicyOptionParameter'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ExecuteHostProfile', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ProfileExecuteResult', 0);
}

sub UpdateHostSpecification {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['hostSpec', 'HostSpecification'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateHostSpecification', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub UpdateHostSubSpecification {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['hostSubSpec', 'HostSubSpecification'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateHostSubSpecification', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RetrieveHostSpecification {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['fromHost', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveHostSpecification', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostSpecification', 0);
}

sub DeleteHostSubSpecification {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['subSpecName', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DeleteHostSubSpecification', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DeleteHostSpecification {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DeleteHostSpecification', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub HostSpecGetUpdatedHosts {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['startChangeID', undef],['endChangeID', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HostSpecGetUpdatedHosts', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 1);
}

sub ApplyHostConfig_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['configSpec', 'HostConfigSpec'],['userInput', 'ProfileDeferredPolicyOptionParameter'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ApplyHostConfig_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub GenerateConfigTaskList {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['configSpec', 'HostConfigSpec'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('GenerateConfigTaskList', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'HostProfileManagerConfigTaskList', 0);
}

sub GenerateHostProfileTaskList_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['configSpec', 'HostConfigSpec'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('GenerateHostProfileTaskList_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub QueryHostProfileMetadata {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['profileName', undef],['profile', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryHostProfileMetadata', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ProfileMetadata', 1);
}

sub QueryProfileStructure {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['profile', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryProfileStructure', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ProfileProfileStructure', 0);
}

sub CreateDefaultProfile {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['profileType', undef],['profileTypeName', undef],['profile', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateDefaultProfile', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ApplyProfile', 0);
}

sub UpdateAnswerFile_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['configSpec', 'AnswerFileCreateSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateAnswerFile_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RetrieveAnswerFile {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveAnswerFile', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'AnswerFile', 0);
}

sub RetrieveAnswerFileForProfile {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['applyProfile', 'HostApplyProfile'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveAnswerFileForProfile', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'AnswerFile', 0);
}

sub ExportAnswerFile_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ExportAnswerFile_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CheckAnswerFileStatus_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CheckAnswerFileStatus_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub QueryAnswerFileStatus {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryAnswerFileStatus', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'AnswerFileStatusResult', 1);
}

sub UpdateHostCustomizations_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['hostToConfigSpecMap', 'HostProfileManagerHostToConfigSpecMap'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('UpdateHostCustomizations_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RetrieveHostCustomizations {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['hosts', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveHostCustomizations', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'StructuredCustomizations', 1);
}

sub RetrieveHostCustomizationsForProfile {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['hosts', 'ManagedObjectReference'],['applyProfile', 'HostApplyProfile'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveHostCustomizationsForProfile', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'StructuredCustomizations', 1);
}

sub GenerateHostConfigTaskSpec_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['hostsInfo', 'StructuredCustomizations'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('GenerateHostConfigTaskSpec_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ApplyEntitiesConfig_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['applyConfigSpecs', 'ApplyHostProfileConfigurationSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ApplyEntitiesConfig_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RemoveScheduledTask {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveScheduledTask', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ReconfigureScheduledTask {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'ScheduledTaskSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReconfigureScheduledTask', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RunScheduledTask {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RunScheduledTask', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CreateScheduledTask {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],['spec', 'ScheduledTaskSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateScheduledTask', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RetrieveEntityScheduledTask {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveEntityScheduledTask', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 1);
}

sub CreateObjectScheduledTask {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['obj', 'ManagedObjectReference'],['spec', 'ScheduledTaskSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateObjectScheduledTask', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RetrieveObjectScheduledTask {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['obj', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveObjectScheduledTask', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 1);
}

sub prepareVcha_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['networkSpec', 'VchaClusterNetworkSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('prepareVcha_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub deployVcha_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['deploymentSpec', 'VchaClusterDeploymentSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('deployVcha_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub configureVcha_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['configSpec', 'VchaClusterConfigSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('configureVcha_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub createPassiveNode_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['passiveDeploymentSpec', 'PassiveNodeDeploymentSpec'],['sourceVcSpec', 'SourceNodeSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('createPassiveNode_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub createWitnessNode_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['witnessDeploymentSpec', 'NodeDeploymentSpec'],['sourceVcSpec', 'SourceNodeSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('createWitnessNode_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub getVchaConfig {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('getVchaConfig', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VchaClusterConfigInfo', 0);
}

sub destroyVcha_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('destroyVcha_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub setClusterMode_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['mode', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('setClusterMode_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub getClusterMode {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('getClusterMode', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub GetVchaClusterHealth {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('GetVchaClusterHealth', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VchaClusterHealth', 0);
}

sub initiateFailover_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['planned', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('initiateFailover_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub OpenInventoryViewFolder {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('OpenInventoryViewFolder', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 1);
}

sub CloseInventoryViewFolder {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['entity', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CloseInventoryViewFolder', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 1);
}

sub ModifyListView {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['add', 'ManagedObjectReference'],['remove', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ModifyListView', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 1);
}

sub ResetListView {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['obj', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ResetListView', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 1);
}

sub ResetListViewFromView {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['view', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ResetListViewFromView', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DestroyView {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DestroyView', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CreateInventoryView {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateInventoryView', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CreateContainerView {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['container', 'ManagedObjectReference'],['type', undef],['recursive', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateContainerView', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CreateListView {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['obj', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateListView', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CreateListViewFromView {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['view', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateListViewFromView', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RevertToSnapshot_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['suppressPowerOn', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RevertToSnapshot_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RemoveSnapshot_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['removeChildren', undef],['consolidate', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveSnapshot_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RenameSnapshot {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['name', undef],['description', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RenameSnapshot', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ExportSnapshot {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ExportSnapshot', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CheckCompatibility_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['pool', 'ManagedObjectReference'],['testType', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CheckCompatibility_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub QueryVMotionCompatibilityEx_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('QueryVMotionCompatibilityEx_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CheckMigrate_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['host', 'ManagedObjectReference'],['pool', 'ManagedObjectReference'],['state', 'VirtualMachinePowerState'],['testType', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CheckMigrate_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub CheckRelocate_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['spec', 'VirtualMachineRelocateSpec'],['testType', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CheckRelocate_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub AddGuestAlias {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['username', undef],['mapCert', undef],['base64Cert', undef],['aliasInfo', 'GuestAuthAliasInfo'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AddGuestAlias', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RemoveGuestAlias {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['username', undef],['base64Cert', undef],['subject', 'GuestAuthSubject'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveGuestAlias', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub RemoveGuestAliasByCert {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['username', undef],['base64Cert', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RemoveGuestAliasByCert', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ListGuestAliases {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['username', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ListGuestAliases', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'GuestAliases', 1);
}

sub ListGuestMappedAliases {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ListGuestMappedAliases', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'GuestMappedAliases', 1);
}

sub ValidateCredentialsInGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ValidateCredentialsInGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub AcquireCredentialsInGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['requestedAuth', 'GuestAuthentication'],['sessionID', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AcquireCredentialsInGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'GuestAuthentication', 0);
}

sub ReleaseCredentialsInGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReleaseCredentialsInGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub MakeDirectoryInGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['directoryPath', undef],['createParentDirectories', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MakeDirectoryInGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DeleteFileInGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['filePath', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DeleteFileInGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DeleteDirectoryInGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['directoryPath', undef],['recursive', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DeleteDirectoryInGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub MoveDirectoryInGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['srcDirectoryPath', undef],['dstDirectoryPath', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MoveDirectoryInGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub MoveFileInGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['srcFilePath', undef],['dstFilePath', undef],['overwrite', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('MoveFileInGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CreateTemporaryFileInGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['prefix', undef],['suffix', undef],['directoryPath', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateTemporaryFileInGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CreateTemporaryDirectoryInGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['prefix', undef],['suffix', undef],['directoryPath', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateTemporaryDirectoryInGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ListFilesInGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['filePath', undef],['index', undef],['maxResults', undef],['matchPattern', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ListFilesInGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'GuestListFileInfo', 0);
}

sub ChangeFileAttributesInGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['guestFilePath', undef],['fileAttributes', 'GuestFileAttributes'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ChangeFileAttributesInGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub InitiateFileTransferFromGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['guestFilePath', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('InitiateFileTransferFromGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'FileTransferInformation', 0);
}

sub InitiateFileTransferToGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['guestFilePath', undef],['fileAttributes', 'GuestFileAttributes'],['fileSize', undef],['overwrite', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('InitiateFileTransferToGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub StartProgramInGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['spec', 'GuestProgramSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('StartProgramInGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ListProcessesInGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['pids', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ListProcessesInGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'GuestProcessInfo', 1);
}

sub TerminateProcessInGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['pid', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('TerminateProcessInGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ReadEnvironmentVariableInGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['names', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReadEnvironmentVariableInGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 1);
}

sub CreateRegistryKeyInGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['keyName', 'GuestRegKeyNameSpec'],['isVolatile', undef],['classType', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateRegistryKeyInGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ListRegistryKeysInGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['keyName', 'GuestRegKeyNameSpec'],['recursive', undef],['matchPattern', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ListRegistryKeysInGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'GuestRegKeyRecordSpec', 1);
}

sub DeleteRegistryKeyInGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['keyName', 'GuestRegKeyNameSpec'],['recursive', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DeleteRegistryKeyInGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub SetRegistryValueInGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['value', 'GuestRegValueSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('SetRegistryValueInGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ListRegistryValuesInGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['keyName', 'GuestRegKeyNameSpec'],['expandStrings', undef],['matchPattern', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ListRegistryValuesInGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'GuestRegValueSpec', 1);
}

sub DeleteRegistryValueInGuest {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['vm', 'ManagedObjectReference'],['auth', 'GuestAuthentication'],['valueName', 'GuestRegValueNameSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DeleteRegistryValueInGuest', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub HostCreateDisk_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'VslmCreateSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HostCreateDisk_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub HostRegisterDisk {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['path', undef],['name', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HostRegisterDisk', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VStorageObject', 0);
}

sub HostExtendDisk_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', 'ID'],['datastore', 'ManagedObjectReference'],['newCapacityInMB', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HostExtendDisk_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub HostInflateDisk_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', 'ID'],['datastore', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HostInflateDisk_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub HostRenameVStorageObject {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', 'ID'],['datastore', 'ManagedObjectReference'],['name', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HostRenameVStorageObject', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub HostDeleteVStorageObject_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', 'ID'],['datastore', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HostDeleteVStorageObject_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub HostRetrieveVStorageObject {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', 'ID'],['datastore', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HostRetrieveVStorageObject', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VStorageObject', 0);
}

sub HostRetrieveVStorageObjectState {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', 'ID'],['datastore', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HostRetrieveVStorageObjectState', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VStorageObjectStateInfo', 0);
}

sub HostListVStorageObject {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datastore', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HostListVStorageObject', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ID', 1);
}

sub HostCloneVStorageObject_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', 'ID'],['datastore', 'ManagedObjectReference'],['spec', 'VslmCloneSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HostCloneVStorageObject_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub HostRelocateVStorageObject_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', 'ID'],['datastore', 'ManagedObjectReference'],['spec', 'VslmRelocateSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HostRelocateVStorageObject_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub HostReconcileDatastoreInventory_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datastore', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HostReconcileDatastoreInventory_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub HostScheduleReconcileDatastoreInventory {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datastore', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('HostScheduleReconcileDatastoreInventory', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CreateDisk_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'VslmCreateSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateDisk_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RegisterDisk {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['path', undef],['name', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RegisterDisk', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VStorageObject', 0);
}

sub ExtendDisk_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', 'ID'],['datastore', 'ManagedObjectReference'],['newCapacityInMB', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ExtendDisk_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub InflateDisk_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', 'ID'],['datastore', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('InflateDisk_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RenameVStorageObject {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', 'ID'],['datastore', 'ManagedObjectReference'],['name', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RenameVStorageObject', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DeleteVStorageObject_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', 'ID'],['datastore', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DeleteVStorageObject_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RetrieveVStorageObject {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', 'ID'],['datastore', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveVStorageObject', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VStorageObject', 0);
}

sub RetrieveVStorageObjectState {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', 'ID'],['datastore', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveVStorageObjectState', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VStorageObjectStateInfo', 0);
}

sub ListVStorageObject {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datastore', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ListVStorageObject', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ID', 1);
}

sub CloneVStorageObject_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', 'ID'],['datastore', 'ManagedObjectReference'],['spec', 'VslmCloneSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CloneVStorageObject_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RelocateVStorageObject_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', 'ID'],['datastore', 'ManagedObjectReference'],['spec', 'VslmRelocateSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RelocateVStorageObject_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub AttachTagToVStorageObject {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', 'ID'],['category', undef],['tag', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('AttachTagToVStorageObject', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DetachTagFromVStorageObject {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', 'ID'],['category', undef],['tag', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DetachTagFromVStorageObject', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub ListVStorageObjectsAttachedToTag {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['category', undef],['tag', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ListVStorageObjectsAttachedToTag', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ID', 1);
}

sub ListTagsAttachedToVStorageObject {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['id', 'ID'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ListTagsAttachedToVStorageObject', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'VslmTagEntry', 1);
}

sub ReconcileDatastoreInventory_Task {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datastore', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ReconcileDatastoreInventory_Task', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub ScheduleReconcileDatastoreInventory {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['datastore', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ScheduleReconcileDatastoreInventory', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub DestroyPropertyFilter {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DestroyPropertyFilter', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CreateFilter {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['spec', 'PropertyFilterSpec'],['partialUpdates', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreateFilter', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub RetrieveProperties {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['specSet', 'PropertyFilterSpec'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrieveProperties', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ObjectContent', 1);
}

sub CheckForUpdates {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['version', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CheckForUpdates', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'UpdateSet', 0);
}

sub WaitForUpdates {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['version', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('WaitForUpdates', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'UpdateSet', 0);
}

sub CancelWaitForUpdates {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CancelWaitForUpdates', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub WaitForUpdatesEx {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['version', undef],['options', 'WaitOptions'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('WaitForUpdatesEx', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'UpdateSet', 0);
}

sub RetrievePropertiesEx {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['specSet', 'PropertyFilterSpec'],['options', 'RetrieveOptions'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('RetrievePropertiesEx', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'RetrieveResult', 0);
}

sub ContinueRetrievePropertiesEx {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['token', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('ContinueRetrievePropertiesEx', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'RetrieveResult', 0);
}

sub CancelRetrievePropertiesEx {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],['token', undef],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CancelRetrievePropertiesEx', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}

sub CreatePropertyCollector {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('CreatePropertyCollector', $arg_string, $soap_action);
   return deserialize_response($result, $fault, 'ManagedObjectReference', 0);
}

sub DestroyPropertyCollector {
   my ($self, %args) = @_;
   my $vim_soap = $self->{vim_soap};
   my @arg_list = (['_this', 'ManagedObjectReference'],);
   my $arg_string = build_arg_string(\@arg_list, \%args);
   my $soap_action = '"urn:vim25/6.5"';
   my ($result, $fault) = $vim_soap->request('DestroyPropertyCollector', $arg_string, $soap_action);
   return deserialize_response($result, $fault, undef, 0);
}



1;
###################################################################


__END__
=head1 NAME

VMware::VIStub - Perl binding for VMware Infrastructure API

=head1 SYNOPSIS

  use VMware::VIStub;

  # service object
  my $vim_service = VimService->new('https://<host>/sdk');

  # get service content
  my $mo = ManagedObjectReference->new(type => 'ServiceInstance', value => 'ServiceInstance');
  my $service_content = $vim_service->RetrieveServiceContent(_this => $mo)->result;
  

=head1 DESCRIPTION

This module provides Perl binding for VMware Infrastructure API.  It provides type
and operation definitions as specified by the VMware Infrastructure API.
For detailed documentation, refer to reference guide in VI SDK distribution
downloadable at <http://www.vmware.com/download/sdk/>


=head1 SEE ALSO

VI Perl Toolkit Guide is available at ./doc/guide.html in module package.

VI API Programming guide and reference guide is available for download at
<http://www.vmware.com/download/sdk/>


=head1 COPYRIGHT AND LICENSE


The Original Software is licensed under the CDDL v. 1.0 only and cannot 
be distributed or otherwise made available under any subsequent version 
of the license.  This License hall be governed by and construed in 
accordance with the laws of the State of California, excluding its 
conflict-of-law provisions.  Any litigation relating to this License 
will be brought solely in the federal court in the Northern District 
of California or the state court in the County of Santa Clara.  

A copy of the CDDL license is included in this distribution.


Copyright (c) 2006, VMware, Inc.  All rights not expressly granted herein 
are reserved. 

=cut

